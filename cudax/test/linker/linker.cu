#include <cuda/experimental/linker.cuh>

#include <testing.cuh>
#include <utility.cuh>

constexpr auto compute_ptx_src = R"(
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-36037853
// Cuda compilation tools, release 12.9, V12.9.86
// Based on NVVM 7.0.1
//

.version 8.8
.target sm_75
.address_size 64

	// .globl	_Z7computefff

.visible .func  (.param .b32 func_retval0) _Z7computefff(
	.param .b32 _Z7computefff_param_0,
	.param .b32 _Z7computefff_param_1,
	.param .b32 _Z7computefff_param_2
)
{
	.reg .f32 	%f<5>;


	ld.param.f32 	%f1, [_Z7computefff_param_0];
	ld.param.f32 	%f2, [_Z7computefff_param_1];
	ld.param.f32 	%f3, [_Z7computefff_param_2];
	fma.rn.f32 	%f4, %f1, %f2, %f3;
	st.param.f32 	[func_retval0+0], %f4;
	ret;

}
)";

const char* saxpy_ptx_src = R"(
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-36037853
// Cuda compilation tools, release 12.9, V12.9.86
// Based on NVVM 7.0.1
//

.version 8.8
.target sm_75
.address_size 64

	// .globl	_Z5saxpyfPfS_S_m
.extern .func  (.param .b32 func_retval0) _Z7computefff
(
	.param .b32 _Z7computefff_param_0,
	.param .b32 _Z7computefff_param_1,
	.param .b32 _Z7computefff_param_2
)
;

.visible .entry _Z5saxpyfPfS_S_m(
	.param .f32 _Z5saxpyfPfS_S_m_param_0,
	.param .u64 _Z5saxpyfPfS_S_m_param_1,
	.param .u64 _Z5saxpyfPfS_S_m_param_2,
	.param .u64 _Z5saxpyfPfS_S_m_param_3,
	.param .u64 _Z5saxpyfPfS_S_m_param_4
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<13>;


	ld.param.f32 	%f1, [_Z5saxpyfPfS_S_m_param_0];
	ld.param.u64 	%rd2, [_Z5saxpyfPfS_S_m_param_1];
	ld.param.u64 	%rd3, [_Z5saxpyfPfS_S_m_param_2];
	ld.param.u64 	%rd4, [_Z5saxpyfPfS_S_m_param_3];
	ld.param.u64 	%rd5, [_Z5saxpyfPfS_S_m_param_4];
	mov.u32 	%r1, %ctaid.x;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	cvt.u64.u32 	%rd1, %r4;
	setp.ge.u64 	%p1, %rd1, %rd5;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd6, %rd2;
	shl.b64 	%rd7, %rd1, 2;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.f32 	%f2, [%rd8];
	cvta.to.global.u64 	%rd9, %rd3;
	add.s64 	%rd10, %rd9, %rd7;
	ld.global.f32 	%f3, [%rd10];
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b32 param0;
	st.param.f32 	[param0+0], %f1;
	.param .b32 param1;
	st.param.f32 	[param1+0], %f2;
	.param .b32 param2;
	st.param.f32 	[param2+0], %f3;
	.param .b32 retval0;
	call.uni (retval0),
	_Z7computefff,
	(
	param0,
	param1,
	param2
	);
	ld.param.f32 	%f4, [retval0+0];
	} // callseq 0
	cvta.to.global.u64 	%rd11, %rd4;
	add.s64 	%rd12, %rd11, %rd7;
	st.global.f32 	[%rd12], %f4;

$L__BB0_2:
	ret;

}
)";

C2H_TEST("Link PTX", "[cuda.linker.ptx]")
{
  cudax::ptx_link_opts ptx_opts;
  {
    using namespace cudax::ptx_link_options;
    // todo
  }

  cudax::ptx_link_sources ptx_sources{};
  ptx_sources.add_ptx("compute.ptx", compute_ptx_src);
  ptx_sources.add_ptx("saxpy.ptx", saxpy_ptx_src);
  ptx_sources.add_kernel_symbol("_Z5saxpyfPfS_S_m");

  cudax::ptx_linker linker{};
  auto result = linker.link_to_ptx(ptx_sources, ptx_opts);

  if (result)
  {
    [[maybe_unused]] const auto log = result.get_log();
  }

  [[maybe_unused]] auto ptx = result.get_ptx();
}

C2H_TEST("Link CUBIN", "[cuda.linker.cubin]")
{
  cudax::ptx_compile_opts ptx_copts;
  {
    using namespace cudax::ptx_compile_options;
    // todo
  }

  cudax::cubin_link_opts cubin_lopts;
  {
    using namespace cudax::cubin_link_options;
    // todo
  }

  cudax::cubin_link_sources cubin_sources{};
  cubin_sources.add_ptx("compute.ptx", compute_ptx_src);
  cubin_sources.add_ptx("saxpy.ptx", saxpy_ptx_src);
  cubin_sources.add_kernel_symbol("_Z5saxpyfPfS_S_m");

  cudax::cubin_linker linker{};
  auto result = linker.link_to_cubin(cubin_sources, ptx_copts, cubin_lopts);

  if (result)
  {
    [[maybe_unused]] const auto log = result.get_log();
  }

  [[maybe_unused]] auto cubin = result.get_cubin();
}
