name: "Run Linux Job"
description: "Run a job on a Linux runner."

inputs:
  id:
    description: "A unique identifier."
    required: true
  command:
    description: "The command to run."
    required: true
  image:
    description: "The Docker image to use."
    required: true
  runner:
    description: "The GHA runs-on value."
    required: true
  cuda:
    description: "The CUDA version to use when selecting a devcontainer."
    required: true
  host:
    description: "The host compiler to use when selecting a devcontainer."
    required: true

runs:
  using: "composite"
  steps:
    - name: Define and log job details
      shell: bash --noprofile --norc -euo pipefail {0}
      env:
        # Dereferencing the command from an env var instead of a GHA input avoids issues with escaping
        # semicolons and other special characters (e.g. `-arch "60;70;80"`).
        COMMAND: "${{inputs.command}}"
      run: |
        echo -e "\e[1;34mMock with: ci/util/create_mock_job_env.sh $GITHUB_RUN_ID ${{inputs.id}}\e[0m"

        echo "::group::Ô∏èüîç Job Inputs"
        # Define the job input parameters as JOB_* environment variables that are visible in all steps:
        echo "JOB_ID=${{inputs.id}}"               | tee -a $GITHUB_ENV
        echo "JOB_RUNNER=${{inputs.runner}}"       | tee -a $GITHUB_ENV
        echo "JOB_IMAGE=${{inputs.image}}"         | tee -a $GITHUB_ENV
        echo "JOB_CUDA=${{inputs.cuda}}"           | tee -a $GITHUB_ENV
        echo "JOB_HOST=${{inputs.host}}"           | tee -a $GITHUB_ENV
        echo
        echo "Job command: ${COMMAND}" # Intentionally not passing to GITUB_ENV, arg handling is fragile.
        echo "::endgroup::"

    - name: Add NVCC problem matcher
      continue-on-error: true
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "::add-matcher::${{github.workspace}}/.github/problem-matchers/problem-matcher.json"
    - name: Get AWS credentials for sccache bucket
      if: ${{ github.repository == 'NVIDIA/cccl' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::279114543810:role/gha-oidc-NVIDIA
        aws-region: us-east-2
        role-duration-seconds: 43200 # 12 hours
    - name: Print CI override matrix job def
      env:
        GH_TOKEN: ${{ github.token }}
      continue-on-error: true
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        # Get the origin matrix job definition embedded in thw workflow artifact:
        matrix_job=$(ci/util/workflow/get_job_def.sh | jq -c '.origin.matrix_job')

        # Delete the cxx_family and cudacxx_family fields
        matrix_job=$(echo "$matrix_job" | jq 'del(.cxx_family, .cudacxx_family, .job_name)')

        # Convert to a single line of YAML, with unquoted keys:
        matrix_job=$(
          echo "- $matrix_job" |
            yq -o=yaml |
            sed -E 's/"([[:alnum:]_]+)"([[:space:]]*):/\1\2:/g' |
            tr '"' "'"
        )

        echo -e "\e[1;34mOverride matrix entry:\e[0m"
        echo -e "\e[1;34m    $matrix_job\e[0m"
    - name: Run command # Do not change this step's name, it is checked in parse-job-times.py
      id: run
      shell: bash --noprofile --norc -euo pipefail {0}
      env:
        GH_TOKEN: ${{ github.token }}
        CI: true
        # Dereferencing the command from an env var instead of a GHA input avoids issues with escaping
        # semicolons and other special characters (e.g. `-arch "60;70;80"`).
        COMMAND: "${{inputs.command}}"
        AWS_ACCESS_KEY_ID: "${{env.AWS_ACCESS_KEY_ID}}"
        AWS_SESSION_TOKEN: "${{env.AWS_SESSION_TOKEN}}"
        AWS_SECRET_ACCESS_KEY: "${{env.AWS_SECRET_ACCESS_KEY}}"
      run: |
        cat <<'EOF' > ci.sh
        #! /usr/bin/env bash

        set -euo pipefail

        # Need this for git to trust the docker-mounted workspace:
        git config --global --add safe.directory "$(pwd)"

        echo -e "\e[1;34mRunning as '$(whoami)' user in $(pwd):\e[0m"
        echo -e "\e[1;34mMock with: ci/util/create_mock_job_env.sh $GITHUB_RUN_ID $JOB_ID\e[0m"
        echo -e "\e[1;34m${COMMAND}\e[0m"
        exit_code=0
        eval "${COMMAND}" || exit_code=$?
        if [[ "$exit_code" -ne 0 ]]; then
          echo -e "::group::Ô∏è‚ùó \e[1;31mInstructions to Reproduce CI Failure Locally\e[0m"
          echo "::error:: To replicate this failure locally, follow the steps below:"
          echo "1. Clone the repository, and navigate to the correct branch and commit:"
          echo "   git clone --branch $GITHUB_REF_NAME --single-branch https://github.com/$GITHUB_REPOSITORY.git && cd $(echo $GITHUB_REPOSITORY | cut -d'/' -f2) && git checkout $GITHUB_SHA"
          echo ""
          echo "2. Run the failed command inside the same Docker container used by this CI job:"
          echo "   .devcontainer/launch.sh -d -c ${{inputs.cuda}} -H ${{inputs.host}} -- ${COMMAND}"
          echo ""
          echo "For additional information, see:"
          echo "   - DevContainer Documentation: https://github.com/NVIDIA/cccl/blob/main/.devcontainer/README.md"
          echo "   - Continuous Integration (CI) Overview: https://github.com/NVIDIA/cccl/blob/main/ci-overview.md"
        fi

        ci/upload_job_result_artifacts.sh "${{inputs.id}}" $exit_code > /dev/null

        exit $exit_code
        EOF

        chmod +x ci.sh

        # The devcontainer will mount this path to the home directory:
        readonly aws_dir="${{github.workspace}}/.aws"
        mkdir "${aws_dir}";

        cat <<EOF > "${aws_dir}/config"
        [default]
        bucket=rapids-sccache-devs
        region=us-east-2
        EOF

        cat <<EOF > "${aws_dir}/credentials"
        [default]
        aws_access_key_id=$AWS_ACCESS_KEY_ID
        aws_session_token=$AWS_SESSION_TOKEN
        aws_secret_access_key=$AWS_SECRET_ACCESS_KEY
        EOF

        chmod 0600 "${aws_dir}/credentials"
        chmod 0664 "${aws_dir}/config"

        # Clear the ARN when using the pre-minted aws creds on the main repo.
        if [[ "$GITHUB_REPOSITORY" == "NVIDIA/cccl" ]]; then
          set aws_arn="--env AWS_ROLE_ARN="
        fi

        declare -a gpu_request=()

        # Explicitly pass which GPU to use if on a GPU runner
        if [[ "${JOB_RUNNER}" = *"-gpu-"* ]]; then
          gpu_request+=(--gpus "device=${NVIDIA_VISIBLE_DEVICES:-}")
        fi

        # If the image contains "cudaXX.Yext"...
        if [[ "${JOB_IMAGE}" =~ cuda[0-9.]+ext ]]; then
          cuda_ext_request="--cuda-ext"
        fi

        # Initialize artifact paths, vars, etc shared with the devcontainer:
        source ci/util/artifacts/common.sh
        source ci/util/workflow/common.sh

        # Launch this container using the host's docker daemon
        ( # Subshell to contain the set -x log
          set -x
          .devcontainer/launch.sh \
            --docker \
            --cuda $JOB_CUDA \
            --host $JOB_HOST \
            ${cuda_ext_request:-} \
            "${gpu_request[@]}" \
            ${aws_arn:-} \
            --env "COMMAND=$COMMAND" \
            --env "CI=true" \
            --env "GH_TOKEN=$GH_TOKEN" \
            --env "GITHUB_ENV=$GITHUB_ENV" \
            --env "GITHUB_SHA=$GITHUB_SHA" \
            --env "GITHUB_PATH=$GITHUB_PATH" \
            --env "GITHUB_OUTPUT=$GITHUB_OUTPUT" \
            --env "GITHUB_ACTIONS=$GITHUB_ACTIONS" \
            --env "GITHUB_REF_NAME=$GITHUB_REF_NAME" \
            --env "GITHUB_RUN_ID=$GITHUB_RUN_ID" \
            --env "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" \
            --env "GITHUB_REPOSITORY=$GITHUB_REPOSITORY" \
            --env "GITHUB_STEP_SUMMARY=$GITHUB_STEP_SUMMARY" \
            --env "HOST_WORKSPACE=${{github.workspace}}" \
            --env "NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:-}" \
            --env "JOB_ID=$JOB_ID" \
            --volume "${ARTIFACT_ARCHIVES}:${ARTIFACT_ARCHIVES}" \
            --volume "${ARTIFACT_UPLOAD_STAGE}:${ARTIFACT_UPLOAD_STAGE}" \
            --volume "${WORKFLOW_DIR}:${WORKFLOW_DIR}" \
            -- ./ci.sh
        )

        # Dump artifact matrix for upload step:
        printf "ARTIFACTS=%s\n" "$(ci/util/artifacts/upload/print_matrix.sh)" >> "${GITHUB_OUTPUT}"

    - name: Upload job artifacts
      if: ${{ always() && steps.run.outputs.ARTIFACTS != '' && fromJson(steps.run.outputs.ARTIFACTS)[0] != null }}
      uses: ./.github/actions/upload-artifacts
      with:
        artifacts: ${{ steps.run.outputs.ARTIFACTS }}
