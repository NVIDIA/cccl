name: "CCCL Workflow Sentinel"
description: "Check the results of the dispatched jobs and comment on the PR."

inputs:
  github_token:
    description: "The GitHub token to use for commenting on the PR. No comment will be made if not provided."
    required: false
  pr_number:
    description: "The PR number to comment on, if applicable. No comment will be made if not provided."
    required: false
  slack_token:
    description: "The Slack token to use for notifications. No notifications will be sent if not provided."
    required: false
  slack_log:
    description: "Slack channel ID for verbose notifications."
    required: false
  slack_alert:
    description: "Slack channel ID for alert notifications."
    required: false

outputs:
  success:
    description: "Whether any jobs failed."
    value: ${{ steps.check-success.outputs.success }}

runs:
  using: "composite"
  steps:

    - name: Download workflow artifacts
      uses: actions/download-artifact@v4
      with:
        name: workflow
        path: workflow/

    - name: Download job artifacts
      continue-on-error: true # This may fail if no jobs succeed. The checks below will catch this.
      uses: actions/download-artifact@v4
      with:
        path: jobs
        pattern: zz_jobs-*
        merge-multiple: true

    - name: Clean up job artifacts
      continue-on-error: true
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        # Fix artifacts written on windows:
        echo "::group::Fixing line endings in job artifacts"
        sudo apt-get update
        sudo apt-get install -y dos2unix
        find jobs -type f -exec dos2unix -v {} \;
        echo "::endgroup::"

    - name: Fetch workflow job info
      if: ${{ inputs.github_token != ''}}
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require('fs');

          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const runId = context.runId;

          github.paginate(
            'GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs?filter=all',
            {
              owner: owner,
              repo: repo,
              run_id: runId
            }
          )
          .then(jobs => {
            console.log('::group::Jobs JSON');
            console.log(JSON.stringify(jobs, null, 2));
            console.log('::endgroup::');
            fs.mkdirSync("results", { recursive: true });
            fs.writeFileSync('results/jobs.json', JSON.stringify(jobs, null, 2));
            console.log(`Fetched ${jobs.length} jobs and saved to results/jobs.json`);
          })
          .catch(error => {
            console.error(error);
          });

    - name: Parse job times
      continue-on-error: true
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "Parsing job times..."
        python3 "${GITHUB_ACTION_PATH}/parse-job-times.py" workflow/workflow.json results/jobs.json

        echo "::group::Unmapped jobs"
        cat workflow/unmapped_jobs.md || :
        echo "::endgroup::"

        echo "::group::Job Times"
        cat workflow/job_times.md || :
        echo "::endgroup::"

    - name: Check for job success
      id: check-jobs
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "::group::Checking for job success artifacts"
        ec=0
        "${GITHUB_ACTION_PATH}/verify-job-success.py" workflow/job_ids.json || ec=$?
        echo "::endgroup::"

        success=$([ $ec -eq 0 ] && echo true || echo false)
        echo "Jobs passed: ${success}"
        echo "success=${success}" > "${GITHUB_OUTPUT}"

    - name: Prepare execution summary
      continue-on-error: true
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "Generating execution summary..."
        python3 "${GITHUB_ACTION_PATH}/prepare-execution-summary.py" workflow/workflow.json results/job_times.json

    - name: Prepare final summary
      id: final-summary
      continue-on-error: true
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        python3 "${GITHUB_ACTION_PATH}/final-summary.py" | tee workflow/final_summary.md

        echo "::group::GHA Output: EXEC_SUMMARY"
        printf "EXEC_SUMMARY=%s\n" "$(cat execution/heading.txt)" | tee -a "${GITHUB_OUTPUT}"
        echo "::endgroup::"

        echo "::group::Job Results"
        readonly success=${{ steps.check-jobs.outputs.success }}
        readonly icon=$(if ${success}; then echo "ðŸ¥³"; else echo "ðŸ˜¬"; fi)
        (
          echo "## [${icon} Job Matrix Results]($(cat workflow/summary_url.txt))"
          declare -a files=(
            workflow/final_summary.md
            workflow/unmapped_jobs.md
            workflow/job_times.md
          )

          for file in "${files[@]}"; do
            if [[ -f "$file" ]]; then
              cat "$file"
            fi
          done
        ) | tee -a "${GITHUB_STEP_SUMMARY}"
        echo "::endgroup::"

        # Keep this brief -- github notification emails don't collapse <details>.
        # Just link to the summary where the above step summary will be available.
        echo "::group::PR Comment"
        (
          echo "## ${icon} CI Workflow Results"
          echo ""
          echo "### $(cat execution/heading.txt)"
          echo ""
          echo "See results [here]($(cat workflow/summary_url.txt))."
        ) | tee pr_comment.md
        echo "::endgroup::"

    - name: Comment on PR
      if: ${{ !cancelled() && inputs.pr_number != '' && inputs.github_token != ''}}
      continue-on-error: true
      uses: marocchino/sticky-pull-request-comment@67d0dec7b07ed060a405f9b2a64b8ab319fdd7db  # v2.9.2
      with:
        github_token: ${{ inputs.github_token }}
        header: ci-results
        number: ${{ inputs.pr_number }}
        path: pr_comment.md
        hide_and_recreate: true
        hide_classify: "OUTDATED"

    - name: Check for workflow success
      id: check-workflow
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        workflow_passed=true

        jobs_passed=${{ steps.check-jobs.outputs.success }}
        if ! $jobs_passed; then
          echo "::notice::Some jobs failed. Failing workflow."
          workflow_passed=false
        fi

        if [ -f workflow/override.json ]; then
          echo "::notice::Workflow matrix was overridden. Failing workflow."
          echo "Override matrix:"
          cat workflow/override.json | jq -c '.'
          workflow_passed=false
        fi

        echo "Workflow passed: ${workflow_passed}"
        if ! $workflow_passed; then
          exit 1
        fi

    - name: Send Slack log notification
      if: ${{ always() && inputs.slack_token != '' && inputs.slack_log != '' }}
      uses: slackapi/slack-github-action@v1.26.0
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slack_token }}
        WORKFLOW_TYPE: ${{ github.workflow }} # nightly, weekly, pr, etc.
        STATUS: ${{ steps.check-success.outcome }}
        EXEC_SUMMARY: ${{ steps.final-summary.outputs.EXEC_SUMMARY }}
        SUMMARY_URL: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
      with:
        channel-id: ${{ inputs.slack_log }}
        slack-message: |
          Workflow '${{ env.WORKFLOW_TYPE }}' has finished with status `${{ env.STATUS }}`:

          ${{ env.EXEC_SUMMARY }}

          Details: ${{ env.SUMMARY_URL }}

    - name: Send Slack alert notification
      if: ${{ failure() && inputs.slack_token != '' && inputs.slack_alert != '' }}
      uses: slackapi/slack-github-action@v1.26.0
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slack_token }}
        WORKFLOW_TYPE: ${{ github.workflow }} # nightly, weekly, pr, etc.
        EXEC_SUMMARY: ${{ steps.final-summary.outputs.EXEC_SUMMARY }}
        SUMMARY_URL: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
      with:
        channel-id: ${{ inputs.slack_alert }}
        slack-message: |
          Workflow '${{ env.WORKFLOW_TYPE }}' has failed:

          ${{ env.EXEC_SUMMARY }}

          Details: ${{ env.SUMMARY_URL }}
