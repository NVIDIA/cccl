name: "Run Windows Job"
description: "Run a job on a Windows runner."

inputs:
  id:
    description: "A unique identifier."
    required: true
  command:
    description: "The command to run."
    required: true
  image:
    description: "The Docker image to use."
    required: true
  runner:
    description: "The GitHub Actions runner name."
    required: true
  cuda:
    description: "The CUDA version to use when selecting a devcontainer."
    required: true
  host:
    description: "The host compiler to use when selecting a devcontainer."
    required: true

runs:
  using: "composite"
  steps:
    - name: Define and log job details
      shell: bash --noprofile --norc -euo pipefail {0}
      env:
        COMMAND: "${{inputs.command}}"
      run: |
        echo "::group::️🔍 Job Inputs"
        printf 'JOB_ID=%s\n' "${{inputs.id}}" | tee -a "${GITHUB_ENV}"
        printf 'JOB_IMAGE=%s\n' "${{inputs.image}}" | tee -a "${GITHUB_ENV}"
        printf 'JOB_RUNNER=%s\n' "${{inputs.runner}}" | tee -a "${GITHUB_ENV}"
        printf 'JOB_CUDA=%s\n' "${{inputs.cuda}}" | tee -a "${GITHUB_ENV}"
        printf 'JOB_HOST=%s\n' "${{inputs.host}}" | tee -a "${GITHUB_ENV}"
        printf 'JOB_COMMAND=%s\n' "${COMMAND}"
        echo "::endgroup::"

    - name: Install GPU driver
      if: ${{ contains(inputs.runner, '-gpu-') }}
      shell: powershell
      env:
        RUNNER: ${{ runner.name }}
      run: |
        echo "::group::Installing GPU driver"
        ./.github/actions/workflow-run-job-windows/install_gpu_driver.ps1
        nvidia-smi
        echo "::endgroup::"

    - name: Configure sccache
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "SCCACHE_BUCKET=rapids-sccache-devs" | tee -a "${GITHUB_ENV}"
        echo "SCCACHE_REGION=us-east-2" | tee -a "${GITHUB_ENV}"
        echo "SCCACHE_IDLE_TIMEOUT=0" | tee -a "${GITHUB_ENV}"
        echo "SCCACHE_S3_USE_SSL=true" | tee -a "${GITHUB_ENV}"
        echo "SCCACHE_S3_NO_CREDENTIALS=false" | tee -a "${GITHUB_ENV}"

    - name: Get AWS credentials for sccache bucket
      if: ${{ github.repository == 'NVIDIA/cccl' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::279114543810:role/gha-oidc-NVIDIA
        aws-region: us-east-2
        role-duration-seconds: 43200 # 12 hours

    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        path: ${{github.event.repository.name}}
        persist-credentials: false

    - name: Initialize artifact environment
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        repo_dir="${{ github.event.repository.name }}"
        pushd "$repo_dir" > /dev/null
        source ci/util/artifacts/common.sh
        source ci/util/workflow/common.sh
        popd > /dev/null

        to_windows_path() {
          local path="$1"

          if [[ "$path" =~ ^/([a-z])/(.*)$ ]]; then
            local drive="${BASH_REMATCH[1]^^}"
            local rest="${BASH_REMATCH[2]}"
            printf '%s:/%s\n' "$drive" "$rest"
            return
          fi

          printf '%s\n' "$path"
        }

        printf 'ARTIFACT_UPLOAD_STAGE=%s\n' "$ARTIFACT_UPLOAD_STAGE" >> "$GITHUB_ENV"
        printf 'ARTIFACT_ARCHIVES=%s\n' "$ARTIFACT_ARCHIVES" >> "$GITHUB_ENV"
        printf 'ARTIFACT_UPLOAD_REGISTERY=%s\n' "$ARTIFACT_UPLOAD_REGISTERY" >> "$GITHUB_ENV"
        printf 'WORKFLOW_ARTIFACT=%s\n' "$WORKFLOW_ARTIFACT" >> "$GITHUB_ENV"
        printf 'WORKFLOW_DIR=%s\n' "$WORKFLOW_DIR" >> "$GITHUB_ENV"
        printf 'RUNNER_TEMP_HOST=%s\n' "${RUNNER_TEMP:-}" >> "$GITHUB_ENV"

        printf 'ARTIFACT_UPLOAD_STAGE_WIN=%s\n' "$(to_windows_path "$ARTIFACT_UPLOAD_STAGE")" >> "$GITHUB_ENV"
        printf 'ARTIFACT_ARCHIVES_WIN=%s\n' "$(to_windows_path "$ARTIFACT_ARCHIVES")" >> "$GITHUB_ENV"
        printf 'WORKFLOW_DIR_WIN=%s\n' "$(to_windows_path "$WORKFLOW_DIR")" >> "$GITHUB_ENV"

    - name: Prepare paths for docker
      shell: powershell
      id: paths
      run: |
        echo "HOST_REPO=${{ github.workspace }}\${{ github.event.repository.name }}".Replace('\', '/') | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        echo "MOUNT_REPO=C:/${{ github.event.repository.name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Fetch ${{ inputs.image }}
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "::group::Pulling Docker image ${{ inputs.image }}"
        docker pull ${{ inputs.image }}
        echo "::endgroup::"

    - name: Run command
      id: run
      shell: bash --noprofile --norc -euo pipefail {0}
      env:
        GH_TOKEN: ${{ github.token }}
        ENABLE_GPU: ${{ contains(inputs.runner, '-gpu-') && '--device class/5B45201D-F2F2-4F3B-85BB-30FF1F953599' || '' }}
      run: |
        cat <<'EOF' > "${{steps.paths.outputs.HOST_REPO}}/ci.ps1"
        $ErrorActionPreference = 'Stop'

        git config --global --add safe.directory '${{steps.paths.outputs.MOUNT_REPO}}'

        $exitCode = 0
        try {
          Write-Host "::group::>>>>> Executing command: $env:COMMAND <<<<<"
          Write-Host "In directory: $(Get-Location)"
          Invoke-Expression $env:COMMAND
          $exitCode = $LASTEXITCODE
          Write-Host "::endgroup::"
          Write-Host "Command finished with exit code $exitCode"
        } catch {
          Write-Host 'Command failed with error'
          Write-Host $_
          $exitCode = 1
        } finally {
          Write-Host '::group::Uploading job result artifacts'
          & bash 'ci/upload_job_result_artifacts.sh' $env:JOB_ID $exitCode
          Write-Host '::endgroup::'
        }

        Write-Host "Container finished with exit code $exitCode"
        exit $exitCode
        EOF

        docker_exit=0
        set +e
        docker run \
          -v //./pipe/docker_engine://./pipe/docker_engine \
          --mount type=bind,source="${{steps.paths.outputs.HOST_REPO}}",target="${{steps.paths.outputs.MOUNT_REPO}}" \
          --mount type=bind,source="${{ env.ARTIFACT_UPLOAD_STAGE_WIN }}",target="${{ env.ARTIFACT_UPLOAD_STAGE_WIN }}" \
          --mount type=bind,source="${{ env.ARTIFACT_ARCHIVES_WIN }}",target="${{ env.ARTIFACT_ARCHIVES_WIN }}" \
          --mount type=bind,source="${{ env.WORKFLOW_DIR_WIN }}",target="${{ env.WORKFLOW_DIR_WIN }}" \
          --workdir "${{steps.paths.outputs.MOUNT_REPO}}" \
          --isolation=process \
          ${{ env.ENABLE_GPU }} \
          --env COMMAND='& ${{inputs.command}}' \
          --env JOB_ID='${{inputs.id}}' \
          --env DOCKER_HOST='npipe:////./pipe/docker_engine' \
          --env "DEVCONTAINER_NAME=cuda${{inputs.cuda}}-${{inputs.host}}" \
          --env GH_TOKEN="$GH_TOKEN" \
          --env "GITHUB_SHA=$GITHUB_SHA" \
          --env "GITHUB_ACTIONS=$GITHUB_ACTIONS" \
          --env "GITHUB_REF_NAME=$GITHUB_REF_NAME" \
          --env "GITHUB_RUN_ID=$GITHUB_RUN_ID" \
          --env "GITHUB_REPOSITORY=$GITHUB_REPOSITORY" \
          --env "CI=true" \
          --env "AWS_ACCESS_KEY_ID=${{env.AWS_ACCESS_KEY_ID}}" \
          --env "AWS_SECRET_ACCESS_KEY=${{env.AWS_SECRET_ACCESS_KEY}}" \
          --env "AWS_SESSION_TOKEN=${{env.AWS_SESSION_TOKEN }}" \
          --env "SCCACHE_BUCKET=${{env.SCCACHE_BUCKET}}" \
          --env "SCCACHE_REGION=${{env.SCCACHE_REGION}}" \
          --env "SCCACHE_IDLE_TIMEOUT=${{env.SCCACHE_IDLE_TIMEOUT}}" \
          --env "SCCACHE_S3_USE_SSL=${{env.SCCACHE_S3_USE_SSL}}" \
          --env "SCCACHE_S3_NO_CREDENTIALS=${{env.SCCACHE_S3_NO_CREDENTIALS}}" \
          --env RUNNER_TEMP='${{ env.RUNNER_TEMP_HOST }}' \
          --env ARTIFACT_UPLOAD_STAGE='${{ env.ARTIFACT_UPLOAD_STAGE }}' \
          --env ARTIFACT_ARCHIVES='${{ env.ARTIFACT_ARCHIVES }}' \
          --env ARTIFACT_UPLOAD_REGISTERY='${{ env.ARTIFACT_UPLOAD_REGISTERY }}' \
          --env WORKFLOW_ARTIFACT='${{ env.WORKFLOW_ARTIFACT }}' \
          --env WORKFLOW_DIR='${{ env.WORKFLOW_DIR }}' \
          --env "HOST_WORKSPACE=${{steps.paths.outputs.HOST_REPO}}" \
          --env "CONTAINER_WORKSPACE=${{steps.paths.outputs.MOUNT_REPO}}" \
          --env CUDA13_IMAGE='rapidsai/devcontainers:25.12-cuda13.0-cl14.44-windows2022' \
          ${{ inputs.image }} \
          powershell "${{steps.paths.outputs.MOUNT_REPO}}/ci.ps1"

        docker_exit=$?
        set -e

        artifacts=""
        if artifacts=$(cd "${{ github.event.repository.name }}" && ci/util/artifacts/upload/print_matrix.sh); then
          printf 'ARTIFACTS=%s\n' "$artifacts" >> "$GITHUB_OUTPUT"
        fi

        exit "$docker_exit"
    - name: Upload job artifacts
      if: ${{ always() && steps.run.outputs.ARTIFACTS != '' && fromJson(steps.run.outputs.ARTIFACTS)[0] != null }}
      uses: ./.github/actions/upload-artifacts
      with:
        artifacts: ${{ steps.run.outputs.ARTIFACTS }}
