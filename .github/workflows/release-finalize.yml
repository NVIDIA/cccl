# SPDX-FileCopyrightText: Copyright (c) 2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Release: 3. Tag Final Release"

on:
  workflow_dispatch:
    inputs:
      new_version:
        type: string
        description: "Semantic version string (eg. '2.3.0')"
        required: true

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

jobs:
  tag-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      rc_tag: ${{ steps.prepare.outputs.rc_tag }}
      release_tag: ${{ steps.prepare.outputs.release_tag }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Prepare environment
        id: prepare
        run: |
          log_and_export_vars() {
            for var in "$@"; do
              var_name=${var^^}
              printf "%-15s %s\n" "$var_name:" "${!var}" | tee -a $GITHUB_STEP_SUMMARY
              echo "${var_name}=${!var}" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
            done
          }

          full_version=${{ inputs.new_version }}
          major_version=$(echo ${full_version} | cut -d. -f1)
          minor_version=$(echo ${full_version} | cut -d. -f2)
          patch_version=$(echo ${full_version} | cut -d. -f3)
          release_tag="v${full_version}"
          release_tag_escaped=$(echo "${release_tag}" | sed 's/\./\\./g')

          log_and_export_vars full_version major_version minor_version patch_version release_tag

          # Ensure that there is no final release tag (vX.Y.Z) for the requested version.
          if git ls-remote --tags origin | grep -q "refs/tags/${release_tag_escaped}$"; then
            echo "::error::Tag ${release_tag} already exists."
            exit 1
            fi
          fi

          # Look for previous release candidates:
          declare -i last_rc=
          for tag in $(git ls-remote --tags origin; do
              if [[ $tag =~ v${full_version}-rc([0-9]+)$ ]]; then
                rc=${BASH_REMATCH[1]}
                if (( rc > last_rc )); then
                  last_rc=rc
                fi
              fi
          done

          if [[ -z $last_rc ]]; then
            echo "::error::No release candidates found for version ${full_version}."
          fi

          # Determine tag name
          rc_tag="v${full_version}-rc${last_rc}"

          log_and_export_vars last_rc rc_tag

      - name: Tag
        run: |
          git tag ${{ steps.prepare.outputs.release_tag }} ${{ steps.prepare.outputs.rc_tag }}
          git push origin ${{ steps.prepare.outputs.release_tag }}
          echo "Tagged release ${release_tag}."
          # TODO Notify team of results.
