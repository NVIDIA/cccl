name: "Workflow/Dispatch/TwoStage"

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

on:
  workflow_call:
    inputs:
      producers: {type: string, required: true}
      consumers: {type: string, required: true}

permissions:
  contents: read

jobs:
  # It is impossible to accumulate output variables across a matrix,
  # and we cannot rely on the results of the dispatch-job workflow to determine success.
  # See the note in ci-dispatch-job.yml for more information.
  #
  # Since we cannot accumulate results from multiple producers, only support a single producer for now.
  # This is enforced by compute-matrix.py.
  producers:
    # This is an internal dispatch job and the name is not important.
    # Give the job a short and unique name, otherwise github will bloat the job name with the matrix values.
    # This keeps the UI from getting cluttered.
    name: "p.${{ matrix.id }}"
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJSON(inputs.producers)}}
    uses: ./.github/workflows/workflow-dispatch-job.yml
    with:
      name:     ${{ matrix.name }}
      runner:   ${{ matrix.runner }}
      image:    ${{ matrix.image }}
      command:  ${{ matrix.command }}
      id:       ${{ matrix.id }}

  consumers:
    # This is an internal dispatch job and the name is not important.
    # Give the job a short and unique name, otherwise github will bloat the job name with the matrix values.
    # This keeps the UI from getting cluttered.
    name: "c.${{ matrix.id }}"
    needs: producers
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJSON(inputs.consumers)}}
    uses: ./.github/workflows/workflow-dispatch-job.yml
    with:
      name:     ${{ matrix.name }}
      runner:   ${{ matrix.runner }}
      image:    ${{ matrix.image }}
      command:  ${{ matrix.command }}
      id:       ${{ matrix.id }}
