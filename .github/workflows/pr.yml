# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main workflow that runs on every PR and push to main
name: pr

defaults:
  run:
    shell: bash -euo pipefail {0}

on:
  push:
    branches:
      - "pull-request/[0-9]+"

# Only runs one instance of this workflow at a time for a given PR and cancels any in-progress runs when a new one starts.
concurrency:
  group: ${{ github.workflow }}-on-${{ github.event_name }}-from-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  inspect-changes:
    name: "Inspect Changes"
    runs-on: ubuntu-latest
    outputs:
      LIBCUDACXX_DIRTY: ${{ steps.set-outputs.outputs.LIBCUDACXX_DIRTY }}
      CUB_DIRTY: ${{ steps.set-outputs.outputs.CUB_DIRTY }}
      THRUST_DIRTY: ${{ steps.set-outputs.outputs.THRUST_DIRTY }}
    steps:
      - name: Get Base Branch from PR
        id: get-pr-info
        uses: nv-gha-runners/get-pr-info@main
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Identify dirty subprojects
        id: set-outputs
        run: |
          ./ci/inspect_changes.sh ${BASE_SHA} ${GITHUB_SHA}
        env:
          BASE_SHA: ${{ fromJSON(steps.get-pr-info.outputs.pr-info).base.sha }}

  compute-matrix:
    name: Compute matrix
    runs-on: ubuntu-latest
    needs:
      - inspect-changes
    outputs:
      DEVCONTAINER_VERSION: ${{steps.set-outputs.outputs.DEVCONTAINER_VERSION}}
      PER_CUDA_COMPILER_MATRIX: ${{steps.set-outputs.outputs.PER_CUDA_COMPILER_MATRIX}}
      PER_CUDA_COMPILER_KEYS: ${{steps.set-outputs.outputs.PER_CUDA_COMPILER_KEYS}}
      NVRTC_MATRIX: ${{steps.set-outputs.outputs.NVRTC_MATRIX}}
      CLANG_CUDA_MATRIX: ${{steps.set-outputs.outputs.CLANG_CUDA_MATRIX}}
      CCCL_INFRA_MATRIX: ${{steps.set-outputs.outputs.CCCL_INFRA_MATRIX}}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Compute matrix outputs
        id: set-outputs
        run: |
          .github/actions/compute-matrix/compute-matrix.sh ci/matrix.yaml pull_request
        env:
          THRUST_DIRTY: ${{ needs.inspect-changes.outputs.THRUST_DIRTY }}
          CUB_DIRTY: ${{ needs.inspect-changes.outputs.CUB_DIRTY }}
          LIBCUDACXX_DIRTY: ${{ needs.inspect-changes.outputs.LIBCUDACXX_DIRTY }}

  nvrtc:
    name: libcudacxx NVRTC CUDA${{matrix.cuda}}
    permissions:
      id-token: write
      contents: read
    needs:
      - compute-matrix
      - inspect-changes
    if: ${{ !contains(github.event.head_commit.message, 'skip-tests') && needs.inspect-changes.outputs.LIBCUDACXX_DIRTY == 'true' }}
    uses: ./.github/workflows/run-as-coder.yml
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.compute-matrix.outputs.NVRTC_MATRIX) }}
    with:
      name: Build and Test libcudacxx CUDA${{matrix.cuda}} C++${{matrix.std}}
      runner: linux-${{matrix.cpu}}-gpu-v100-latest-1
      image: rapidsai/devcontainers:${{needs.compute-matrix.outputs.DEVCONTAINER_VERSION}}-cpp-gcc12-cuda${{matrix.cuda}}-${{matrix.os}}
      command: |
        ./ci/nvrtc_libcudacxx.sh -cxx g++ -std ${{matrix.std}}

  thrust:
    name: Thrust CUDA${{ matrix.cuda_host_combination }}
    permissions:
      id-token: write
      contents: read
    needs:
      - compute-matrix
      - inspect-changes
    if: ${{ needs.inspect-changes.outputs.THRUST_DIRTY == 'true' }}
    uses: ./.github/workflows/dispatch-build-and-test.yml
    strategy:
      fail-fast: false
      matrix:
        cuda_host_combination: ${{ fromJSON(needs.compute-matrix.outputs.PER_CUDA_COMPILER_KEYS) }}
    with:
      project_name: "thrust"
      per_cuda_compiler_matrix: ${{ toJSON(fromJSON(needs.compute-matrix.outputs.PER_CUDA_COMPILER_MATRIX)[ matrix.cuda_host_combination ]) }}
      devcontainer_version: ${{ needs.compute-matrix.outputs.DEVCONTAINER_VERSION }}
      is_windows: ${{ contains(matrix.cuda_host_combination, 'cl') }}

  cub:
    name: CUB CUDA${{ matrix.cuda_host_combination }}
    permissions:
      id-token: write
      contents: read
    needs:
      - compute-matrix
      - inspect-changes
    if: ${{ needs.inspect-changes.outputs.CUB_DIRTY == 'true' }}
    uses: ./.github/workflows/dispatch-build-and-test.yml
    strategy:
      fail-fast: false
      matrix:
        cuda_host_combination: ${{ fromJSON(needs.compute-matrix.outputs.PER_CUDA_COMPILER_KEYS) }}
    with:
      project_name: "cub"
      per_cuda_compiler_matrix: ${{ toJSON(fromJSON(needs.compute-matrix.outputs.PER_CUDA_COMPILER_MATRIX)[ matrix.cuda_host_combination ]) }}
      devcontainer_version: ${{ needs.compute-matrix.outputs.DEVCONTAINER_VERSION }}
      is_windows: ${{ contains(matrix.cuda_host_combination, 'cl') }}

  libcudacxx:
    name: libcudacxx CUDA${{ matrix.cuda_host_combination }}
    permissions:
      id-token: write
      contents: read
    needs:
      - compute-matrix
      - inspect-changes
    if: ${{ needs.inspect-changes.outputs.LIBCUDACXX_DIRTY == 'true' }}
    uses: ./.github/workflows/dispatch-build-and-test.yml
    strategy:
      fail-fast: false
      matrix:
        cuda_host_combination: ${{ fromJSON(needs.compute-matrix.outputs.PER_CUDA_COMPILER_KEYS) }}
    with:
      project_name: "libcudacxx"
      per_cuda_compiler_matrix: ${{ toJSON(fromJSON(needs.compute-matrix.outputs.PER_CUDA_COMPILER_MATRIX)[ matrix.cuda_host_combination ]) }}
      devcontainer_version: ${{ needs.compute-matrix.outputs.DEVCONTAINER_VERSION }}
      is_windows: ${{ contains(matrix.cuda_host_combination, 'cl') }}

  clang-cuda:
    name: ${{matrix.lib}} Clang CUDA
    permissions:
      id-token: write
      contents: read
    needs: compute-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.compute-matrix.outputs.CLANG_CUDA_MATRIX) }}
    uses: ./.github/workflows/run-as-coder.yml
    with:
      name: Build ${{matrix.lib}} ${{matrix.cpu}}/clang-cuda${{matrix.compiler.version}}/C++${{matrix.std}}
      runner: linux-${{matrix.cpu}}-cpu16
      image: rapidsai/devcontainers:${{needs.compute-matrix.outputs.DEVCONTAINER_VERSION}}-cpp-${{matrix.compiler.name}}${{matrix.compiler.version}}-cuda${{matrix.cuda}}-${{matrix.os}}
      command: |
        ./ci/build_${{matrix.lib}}.sh -cxx "${{matrix.compiler.exe}}" -cuda "${{matrix.compiler.exe}}" -std "${{matrix.std}}"

  cccl-infra:
    name: CCCL Infrastructure
    permissions:
      id-token: write
      contents: read
    needs: compute-matrix
    if: ${{ !contains(github.event.head_commit.message, 'skip-tests') }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.compute-matrix.outputs.CCCL_INFRA_MATRIX) }}
    uses: ./.github/workflows/run-as-coder.yml
    with:
      name: CCCL Examples CUDA${{matrix.cuda}} ${{matrix.compiler.name}}${{matrix.compiler.version}}
      runner: linux-${{matrix.cpu}}-gpu-v100-latest-1
      image: rapidsai/devcontainers:${{needs.compute-matrix.outputs.DEVCONTAINER_VERSION}}-cpp-${{matrix.compiler.name}}${{matrix.compiler.version}}-cuda${{matrix.cuda}}-${{matrix.os}}
      command: |
        cmake -S . --preset=cccl-infra -DCCCL_EXAMPLE_CPM_TAG=${GITHUB_SHA}
        ctest --preset=cccl-infra

  verify-devcontainers:
    name: Verify Dev Containers
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/verify-devcontainers.yml

  verify-codegen:
    name: Verify Codegen in libcudacxx
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Run libcudacxx codegen verification
        id: verify-codegen
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          export CXX="g++"
          ./ci/verify_codegen.sh

  # This job is the final job that runs after all other jobs and is used for branch protection status checks.
  # See: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks
  # https://github.com/orgs/community/discussions/26822#discussioncomment-5122101
  ci:
    runs-on: ubuntu-latest
    name: CI
    if: ${{ always() }} # need to use always() instead of !cancelled() because skipped jobs count as success
    needs:
      - clang-cuda
      - cub
      - libcudacxx
      - nvrtc
      - thrust
      - cccl-infra
      - verify-devcontainers
      - verify-codegen
    steps:
      - name: Check status of all precursor jobs
        if: >-
          ${{contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')}}
        run: exit 1
