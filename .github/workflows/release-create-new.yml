# SPDX-FileCopyrightText: Copyright (c) 2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Release: 1. Begin Release Cycle"

on:
  workflow_dispatch:
    inputs:
      new_version:
        description: "Semantic version string (eg. '2.3.0')"
        type: string
        required: true
      branch_point:
        description: "If the release branch doesn't exist yet, it will be branched from this ref."
        type: string
        required: true
        default: 'main'

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

jobs:
  create-release-branch:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Prepare environment
        id: prepare-env
        run: |
          log_and_export_vars() {
            for var in "$@"; do
              printf "%-15s %s\n" "$var:" "${!var}" | tee -a $GITHUB_STEP_SUMMARY
              echo "${var}=${!var}" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
            done
          }

          full_version=${{ inputs.new_version }}
          major_version=$(echo ${full_version} | cut -d. -f1)
          minor_version=$(echo ${full_version} | cut -d. -f2)
          patch_version=$(echo ${full_version} | cut -d. -f3)
          branch_name="branch/${major_version}.${minor_version}.x"

          log_and_export_vars full_version major_version minor_version patch_version branch_name

      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Create release branch if needed
        id: create_branch
        run: |
          # Create the release branch if it doesn't already exist:
          if git ls-remote --exit-code origin $branch_name; then
            echo "Branch $branch_name already exists:" | tee -a $GITHUB_STEP_SUMMARY
          else
            git push origin ${{inputs.branch_point}}:$branch_name
            echo "Created branch $branch_name at:" | tee -a $GITHUB_STEP_SUMMARY
          fi

          git show --oneline --no-patch HEAD | tee -a $GITHUB_STEP_SUMMARY

      - name: Update version numbers
        run: |
          git checkout main
          git checkout -b bump_version_${full_version}

          echo "::group::Running update-version.sh"
          ./ci/update-version.sh ${major_version} ${minor_version} ${patch_version}
          echo "::endgroup::"

          echo "::group::Diff"
          git diff
          echo "::endgroup::"

          git add .
          git commit -m "Bump version to ${full_version}."

      - name: Create a pull request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          branch: ${{ steps.prepare-env.outputs.branch_name }}
          title: 'Bump version to ${{ steps.prepare-env.outputs.full_version }}'
          body: 'This PR was automatically generated by the release-create-new workflow.'
          base: main

      - name: Add backport comment
        run: |
          echo "/backport $branch_name" | gh issue comment ${{ steps.create_pr.outputs.pull-request-number }} -F -
