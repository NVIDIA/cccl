# SPDX-FileCopyrightText: Copyright (c) 2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Release: 1. Begin Release Cycle"

on:
  workflow_dispatch:
    inputs:
      branch_version:
        description: "Version 'X.Y.Z' for the release branch."
        type: string
        required: true
      main_version:
        description: "If set, open PR to update `main` to version 'X.Y.Z'."
        type: string
        required: false

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}

jobs:
  create-release-branch:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Prepare environment
        id: prepare-env
        run: |
          log_and_export_vars() {
            for var in "$@"; do
              printf "%-15s %s\n" "$var:" "${!var}" | tee -a $GITHUB_STEP_SUMMARY
              echo "${var}=${!var}" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT
            done
          }

          full_version=${{ inputs.branch_version }}
          major_version=$(echo ${full_version} | cut -d. -f1)
          minor_version=$(echo ${full_version} | cut -d. -f2)
          patch_version=$(echo ${full_version} | cut -d. -f3)
          branch_name="branch/${major_version}.${minor_version}.x"

          main_version=${{ inputs.main_version }}
          main_major_version=$(echo ${main_version} | cut -d. -f1)
          main_minor_version=$(echo ${main_version} | cut -d. -f2)
          main_patch_version=$(echo ${main_version} | cut -d. -f3)

          log_and_export_vars \
            full_version major_version minor_version patch_version \
            main_version main_major_version main_minor_version main_patch_version \
            branch_name

          echo "Branch ref: $GITHUB_REF" | tee -a $GITHUB_STEP_SUMMARY
          echo "Branch SHA: $GITHUB_SHA" | tee -a $GITHUB_STEP_SUMMARY
          echo "Branch commit: $(git show --oneline --no-patch ${GITHUB_SHA})" | tee -a $GITHUB_STEP_SUMMARY

      - name: Verify environment
        run: |
          # If the release branch already exists, it must match the branch point:
          if git ls-remote --exit-code origin $branch_name; then
            if [[ $GITHUB_REF != refs/heads/$branch_name ]]; then
              echo "Branch $branch_name already exists but does not match GITHUB_REF:" | tee -a $GITHUB_STEP_SUMMARY
              echo "  GITHUB_REF: $GITHUB_REF" | tee -a $GITHUB_STEP_SUMMARY
              echo "  branch_name: $branch_name" | tee -a $GITHUB_STEP_SUMMARY
              echo "This workflow must be run from the release branch if it already exists."
              exit 1
            fi
          fi

          if [[ ! $full_version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version number: $full_version"
            exit 1
          fi

          # Main version may be empty:
          if [[ -n $main_version ]]; then
            if [[ ! $main_version =~ ^[0-9]+\.[0-9]+\.[0-9]*$ ]]; then
              echo "Invalid main version number: $main_version"
              exit 1
            fi
          fi

      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Create release branch if needed
        id: create_branch
        run: |
          if git ls-remote --exit-code origin $branch_name; then
            echo "Branch $branch_name already exists:" | tee -a $GITHUB_STEP_SUMMARY
          else
            git push origin ${GITHUB_SHA}:$branch_name
            echo "Created branch $branch_name at:" | tee -a $GITHUB_STEP_SUMMARY
          fi

          git show --oneline --no-patch HEAD | tee -a $GITHUB_STEP_SUMMARY

      - name: Update version numbers in release branch
        run: |
          git checkout $GITHUB_SHA
          echo "::group::Running update-version.sh"
          ./ci/update-version.sh ${major_version} ${minor_version} ${patch_version}
          echo "::endgroup::"

          if ! git diff --quiet; then
            echo "::group::Diff"
            git diff
            echo "::endgroup::"

            git add .
            git commit -m "Bump ${branch_name} to ${full_version}."

            # Push the changes to the release branch:
            git push --no-ff origin ${branch_name}:${branch_name}
          fi

      - name: Update version numbers in `main`
        if: ${{ inputs.main_version }}
        run: |
          git checkout main
          topic_branch=bump_version_${main_version}
          git checkout -b ${topic_branch}

          echo "::group::Running update-version.sh"
          ./ci/update-version.sh ${main_major_version} ${main_minor_version} ${main_patch_version}
          echo "::endgroup::"

          if ! git diff --quiet; then
            echo "::group::Diff"
            git diff
            echo "::endgroup::"

            git add .
            git commit -m "Bump main branch to ${main_version}."
            git push origin ${topic_branch}:${topic_branch}
          fi

      - name: Create a pull request for `main` version update
        if: ${{ inputs.main_version }}
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          branch: bump_version_${{ inputs.main_version }}
          title: 'Bump `main` branch to version ${{ inputs.main_version }}'
          body: 'This PR was automatically generated by the release-create-new workflow.'
          base: main
