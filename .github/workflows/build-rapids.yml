name: Build all RAPIDS repositories

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_call:

jobs:
  check-event:
    name: Check GH Event
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.check_gh_event.outputs.ok }}
    steps:
      - id: check_gh_event
        name: Check GH Event
        shell: bash
        run: |
          [[ '${{ github.event_name }}' == 'push' && '${{ github.repository }}' == 'NVIDIA/cccl' ]] || \
          [[ '${{ github.event_name }}' == 'schedule' && '${{ github.repository }}' == 'NVIDIA/cccl' ]] || \
          [[ '${{ github.event_name }}' == 'pull_request' && '${{ github.repository }}' != 'NVIDIA/cccl' ]] \
          && echo "ok=true"  | tee -a $GITHUB_OUTPUT \
          || echo "ok=false" | tee -a $GITHUB_OUTPUT;

  build-rapids:
    name: Build RAPIDS (${{ matrix.libs }})
    if: needs.check-event.outputs.ok == 'true'
    needs: check-event
    secrets: inherit
    # TODO: this is temporary
    uses: ./.github/workflows/build-in-devcontainer.yml
    # uses: rapidsai/shared-workflows/.github/workflows/build-in-devcontainer.yaml@branch-24.06
    strategy:
      fail-fast: false
      matrix:
        include:
          - { libs: 'rmm KvikIO cudf cudf_kafka cuspatial',         args: 'BUILD_TESTS BUILD_BENCHMARKS' }
          - { libs: 'rmm ucxx raft cuvs',                           args: 'BUILD_TESTS BUILD_BENCHMARKS BUILD_ANN_BENCH BUILD_PRIMS_BENCH' }
          - { libs: 'rmm ucxx raft cumlprims_mg cuml',              args: 'BUILD_TESTS BUILD_BENCHMARKS BUILD_ANN_BENCH BUILD_PRIMS_BENCH' }
          - { libs: 'rmm ucxx raft cugraph-ops cugraph wholegraph', args: 'BUILD_TESTS BUILD_BENCHMARKS BUILD_ANN_BENCH BUILD_PRIMS_BENCH' }
    permissions:
      actions: read
      packages: read
      id-token: write
      contents: read
      pull-requests: read
    with:
      dir: 'ci/rapids'
      arch: '["amd64"]'
      cuda: '["12.2"]'
      pkgr: '["conda"]'
      node_type: cpu32
      extra-repo-deploy-key: RAPIDSAI_CUMLPRIMS_DEPLOY_KEY
      extra-repo-deploy-key-2: RAPIDSAI_CUGRAPH_OPS_DEPLOY_KEY
      build_command: |
        set -x;

        ###
        # Remove libs from /opt/rapids-build-utils/manifest.yaml
        ###
        filters=(${{ matrix.libs }});
        # prefix each element
        filters=("${filters[@]/#/'"'}");
        # suffix each element
        filters=("${filters[@]/%/'",'}");
        # Remove trailing comma
        filters="$(cut -d',' -f1-${#filters[@]} <<< "${filters[*]}")";
        sudo yq -i ".repos |= filter(.cpp[].name | contains(${filters[*]}))" /opt/rapids-build-utils/manifest.yaml;
        # Regenerate builds scripts after modifying /opt/rapids-build-utils/manifest.yaml
        rapids-generate-scripts;

        ###
        # Clone all the RAPIDS repos
        ###
        clone-all -j$(nproc) -v -q --clone-upstream --single-branch --shallow-submodules;

        ###
        # Build the RAPIDS repos using the local CCCL mount without and then with tests and benchmarks
        ###

        # Build up to 6 device archs in parallel
        export INFER_NUM_DEVICE_ARCHITECTURES=1;
        export MAX_DEVICE_OBJ_TO_COMPILE_IN_PARALLEL=6;

        declare -A failures;

        for opt in OFF ON; do

          # Build arguments list
          args=(${{ matrix.args }});
          # Enable/disable tests
          args=("${args[@]/%/"=${opt}"}");
          # Use the local CCCL mount
          args+=(-DCPM_CCCL_SOURCE="${HOME}/cccl");
          args+=(-DBUILD_SHARED_LIBS=ON);

          for lib in ${{ matrix.libs }}; do

            if test "${lib}" != "cugraph"; then
              args=(-v -j "${args[@]}");
            else
              # cuGraph device objects use lots of memory, so tell the scaler to
              # take that into account when calculating -j/-t
              args=(-v -j --max-device-obj-memory-usage 5 "${args[@]}");
            fi

            sccache -z;
            if ! build-${lib}-cpp "${args[@]}"; then
              failures["${lib}"]=1;
            fi
            sccache --show-adv-stats;
          done
        done

        # Print failures and exit
        if test "${#failures[*]}" -gt 0; then
          echo "Failures: ${!failures[*]}";
          exit 1;
        fi
