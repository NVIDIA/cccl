name: Build all RAPIDS repositories

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_call:

jobs:
  check-event:
    name: Check GH Event
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.check_gh_event.outputs.ok }}
    steps:
      - id: check_gh_event
        name: Check GH Event
        shell: bash
        run: |
          [[ '${{ github.event_name }}' == 'push' && '${{ github.repository }}' == 'NVIDIA/cccl' ]] || \
          [[ '${{ github.event_name }}' == 'schedule' && '${{ github.repository }}' == 'NVIDIA/cccl' ]] || \
          [[ '${{ github.event_name }}' == 'pull_request' && '${{ github.repository }}' != 'NVIDIA/cccl' ]] \
          && echo "ok=true"  | tee -a $GITHUB_OUTPUT \
          || echo "ok=false" | tee -a $GITHUB_OUTPUT;

  build-rapids:
    name: Build RAPIDS (${{ matrix.libs }})
    if: needs.check-event.outputs.ok == 'true'
    needs: check-event
    secrets: inherit
    # TODO: this is temporary
    uses: ./.github/workflows/build-in-devcontainer.yml
    # uses: rapidsai/shared-workflows/.github/workflows/build-in-devcontainer.yaml@branch-24.06
    strategy:
      fail-fast: false
      matrix:
        include:
          - { libs: 'rmm KvikIO cudf cudf_kafka cuspatial',         args: 'BUILD_TESTS BUILD_BENCHMARKS' }
          - { libs: 'rmm ucxx raft cuvs',                           args: 'BUILD_TESTS BUILD_BENCHMARKS BUILD_ANN_BENCH BUILD_PRIMS_BENCH' }
          - { libs: 'rmm ucxx raft cumlprims_mg cuml',              args: 'BUILD_TESTS BUILD_BENCHMARKS BUILD_ANN_BENCH BUILD_PRIMS_BENCH' }
          - { libs: 'rmm ucxx raft cugraph-ops wholegraph cugraph', args: 'BUILD_TESTS BUILD_BENCHMARKS BUILD_ANN_BENCH BUILD_PRIMS_BENCH' }
    permissions:
      actions: read
      packages: read
      id-token: write
      contents: read
      pull-requests: read
    with:
      dir: 'ci/rapids'
      arch: '["amd64"]'
      cuda: '["12.2"]'
      pkgr: '["conda"]'
      node_type: cpu32
      extra-repo-deploy-key: RAPIDSAI_CUMLPRIMS_DEPLOY_KEY
      extra-repo-deploy-key-2: RAPIDSAI_CUGRAPH_OPS_DEPLOY_KEY
      build_command: |
        set -x;

        ###
        # Remove libs from /opt/rapids-build-utils/manifest.yaml
        ###
        filters=(${{ matrix.libs }});
        # prefix each element
        filters=("${filters[@]/#/'"'}");
        # suffix each element
        filters=("${filters[@]/%/'",'}");
        # Remove trailing comma
        filters="$(cut -d',' -f1-${#filters[@]} <<< "${filters[*]}")";
        sudo yq -i ".repos |= filter(.cpp[].name | contains(${filters}))" /opt/rapids-build-utils/manifest.yaml;

        # Use the miscco/cudf fork with fixes for latest CCCL (https://github.com/rapidsai/cudf/pull/15552)
        sudo yq -i '(.repos[] | select(.name == "cudf") | .git) *= {"upstream": "miscco", "tag": "fix_cccl_compat"}' /opt/rapids-build-utils/manifest.yaml;
        # Use the trxcllnt/cuml fork with fixes for latest CCCL (https://github.com/rapidsai/cuml/pull/5886)
        sudo yq -i '(.repos[] | select(.name == "cuml") | .git) *= {"upstream": "trxcllnt", "tag": "fix/cccl-2.5"}' /opt/rapids-build-utils/manifest.yaml;
        # Use the trxcllnt/cugraph fork with fixes for latest CCCL (https://github.com/rapidsai/cugraph/pull/4404)
        sudo yq -i '(.repos[] | select(.name == "cugraph") | .git) *= {"upstream": "trxcllnt", "tag": "fix/cccl-2.5"}' /opt/rapids-build-utils/manifest.yaml;
        # Use the trxcllnt/cuspatial fork with fixes for latest CCCL (https://github.com/rapidsai/cuspatial/pull/4404)
        sudo yq -i '(.repos[] | select(.name == "cuspatial") | .git) *= {"upstream": "trxcllnt", "tag": "fix/cccl-2.5"}' /opt/rapids-build-utils/manifest.yaml;

        # Regenerate builds scripts after modifying /opt/rapids-build-utils/manifest.yaml
        rapids-generate-scripts;

        ###
        # Clone all the RAPIDS repos
        ###
        clone-all -j$(nproc) -v -q --clone-upstream --single-branch --shallow-submodules;

        # Tell rapids-cmake to use custom CCCL and cuCollections forks
        rapids_branch="$(yq '.x-git-defaults.tag' /opt/rapids-build-utils/manifest.yaml)";
        rapids_version="${rapids_branch#branch-}";
        cccl_url="${{ github.repositoryUrl }}";
        curl -fsSL -o- https://raw.githubusercontent.com/trxcllnt/rapids-cmake/branch-24.04-cccl-2.4.0/rapids-cmake/cpm/patches/cccl/revert_pr_211.diff \
          | tee ~/rapids-cmake-revert_pr_211.diff;
        curl -fsSL -o- "https://raw.githubusercontent.com/rapidsai/rapids-cmake/${rapids_branch}/rapids-cmake/cpm/versions.json" \
          | jq -r ".packages.CCCL *= {\"version\": \"2.5.0\", \"git_url\": \"${cccl_url/git:/https:}\", \"git_tag\": \"${{ github.ref_name }}\"}" \
          | jq -r "(.packages.CCCL.patches[] | select(.file == \"cccl/revert_pr_211.diff\")).file = \"${HOME}/rapids-cmake-revert_pr_211.diff\"" \
          | jq -r ".packages.cuco *= {\"git_url\": \"https://github.com/trxcllnt/cuCollections.git\", \"git_tag\": \"rapids-${rapids_version}-cccl-2.5.0\", \"always_download\": true}" \
          | tee ~/rapids-cmake-override-versions.json;

        ###
        # Build the RAPIDS repos using the local CCCL mount without and then with tests and benchmarks
        ###

        # Build up to 6 device archs in parallel
        export INFER_NUM_DEVICE_ARCHITECTURES=1;
        export MAX_DEVICE_OBJ_TO_COMPILE_IN_PARALLEL=3;

        declare -A failures;

        for opt in OFF ON; do

          # Build arguments list
          args_=(${{ matrix.args }});
          # Enable/disable tests
          args_=("${args_[@]/#/"-D"}");
          args_=("${args_[@]/%/"=${opt}"}");
          args_+=(-DBUILD_SHARED_LIBS=ON);
          # Tell rapids-cmake to use custom CCCL and cuCollections forks
          args_+=(-DRAPIDS_CMAKE_CPM_DEFAULT_VERSION_FILE="${HOME}/rapids-cmake-override-versions.json");

          for lib in ${{ matrix.libs }}; do

            args=("${args_[@]}")
            if test "${lib}" != "cugraph"; then
              args=(-v -j "${args[@]}");
            else
              # cuGraph device objects use lots of memory, so only build with -t=1
              args=(-v -j$(nproc --ignore=1) --archs 1 "${args[@]}");
            fi

            sccache -z;
            if ! configure-${lib}-cpp "${args[@]}" || ! build-${lib}-cpp "${args[@]}"; then
              failures["${lib}"]=1;
            fi
            sccache --show-adv-stats;
          done
        done

        # Print failures and exit
        if test "${#failures[*]}" -gt 0; then
          echo "Failures: ${!failures[*]}";
          exit 1;
        fi
