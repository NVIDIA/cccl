// -*- C++ -*-
//===----------------------------- regex ----------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCUDACXX_EXPERIMENTAL_REGEX
#define _LIBCUDACXX_EXPERIMENTAL_REGEX
/*
    experimental/regex synopsis

// C++1z
namespace std {
namespace experimental {
inline namespace fundamentals_v1 {
namespace pmr {

  template <class BidirectionalIterator>
  using match_results =
    std::match_results<BidirectionalIterator,
                       polymorphic_allocator<sub_match<BidirectionalIterator>>>;

  typedef match_results<const char*> cmatch;
  typedef match_results<const wchar_t*> wcmatch;
  typedef match_results<string::const_iterator> smatch;
  typedef match_results<wstring::const_iterator> wsmatch;

} // namespace pmr
} // namespace fundamentals_v1
} // namespace experimental
} // namespace std

 */

#include <experimental/__config>
#include <regex>
#include <experimental/string>
#include <experimental/memory_resource>

#if defined(_LIBCUDACXX_USE_PRAGMA_GCC_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_LIBCUDACXX_BEGIN_NAMESPACE_LFTS_PMR

template <class _BiDirIter>
using match_results =
    _CUDA_VSTD::match_results<_BiDirIter,
        polymorphic_allocator<_CUDA_VSTD::sub_match<_BiDirIter>>>;

typedef match_results<const char*> cmatch;
typedef match_results<const wchar_t*> wcmatch;
typedef match_results<_CUDA_VSTD_LFTS_PMR::string::const_iterator> smatch;
typedef match_results<_CUDA_VSTD_LFTS_PMR::wstring::const_iterator> wsmatch;

_LIBCUDACXX_END_NAMESPACE_LFTS_PMR

#endif /* _LIBCUDACXX_EXPERIMENTAL_REGEX */
