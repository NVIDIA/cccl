// -*- C++ -*-
//===--------------------------- list ------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCUDACXX_EXPERIMENTAL_SET
#define _LIBCUDACXX_EXPERIMENTAL_SET
/*
    experimental/set synopsis

// C++1z
namespace std {
namespace experimental {
inline namespace fundamentals_v1 {
namespace pmr {

  template <class Key, class T, class Compare = less<Key>>
  using set = std::set<Key, T, Compare,
                       polymorphic_allocator<pair<const Key,T>>>;

  template <class Key, class T, class Compare = less<Key>>
  using multiset = std::multiset<Key, T, Compare,
                                 polymorphic_allocator<pair<const Key,T>>>;

} // namespace pmr
} // namespace fundamentals_v1
} // namespace experimental
} // namespace std

 */

#include <experimental/__config>
#include <set>
#include <experimental/memory_resource>

#if defined(_LIBCUDACXX_USE_PRAGMA_GCC_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_LIBCUDACXX_BEGIN_NAMESPACE_LFTS_PMR

template <class _Value, class  _Compare = less<_Value>>
using set = _CUDA_VSTD::set<_Value, _Compare,
                        polymorphic_allocator<_Value>>;

template <class _Value, class  _Compare = less<_Value>>
using multiset = _CUDA_VSTD::multiset<_Value, _Compare,
                        polymorphic_allocator<_Value>>;

_LIBCUDACXX_END_NAMESPACE_LFTS_PMR

#endif /* _LIBCUDACXX_EXPERIMENTAL_SET */
