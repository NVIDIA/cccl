// -*- C++ -*-
//===--------------------------- cstdlib ----------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCUDACXX_CSTDLIB
#define _LIBCUDACXX_CSTDLIB

/*
    cstdlib synopsis

Macros:

    EXIT_FAILURE
    EXIT_SUCCESS
    MB_CUR_MAX
    NULL
    RAND_MAX

namespace std
{

Types:

    size_t
    div_t
    ldiv_t
    lldiv_t                                                               // C99

double    atof (const char* nptr);
int       atoi (const char* nptr);
long      atol (const char* nptr);
long long atoll(const char* nptr);                                        // C99
double             strtod  (const char* restrict nptr, char** restrict endptr);
float              strtof  (const char* restrict nptr, char** restrict endptr); // C99
long double        strtold (const char* restrict nptr, char** restrict endptr); // C99
long               strtol  (const char* restrict nptr, char** restrict endptr, int base);
long long          strtoll (const char* restrict nptr, char** restrict endptr, int base); // C99
unsigned long      strtoul (const char* restrict nptr, char** restrict endptr, int base);
unsigned long long strtoull(const char* restrict nptr, char** restrict endptr, int base); // C99
int rand();
void srand(unsigned int seed);
void* calloc(size_t nmemb, size_t size);
void free(void* ptr);
void* malloc(size_t size);
void* realloc(void* ptr, size_t size);
void abort();
int atexit(void (*func)(void));
void exit(int status);
void _Exit(int status);
char* getenv(const char* name);
int system(const char* string);
void* bsearch(const void* key, const void* base, size_t nmemb, size_t size,
              int (*compar)(const void *, const void *));
void qsort(void* base, size_t nmemb, size_t size,
           int (*compar)(const void *, const void *));
int         abs(      int j);
long        abs(     long j);
long long   abs(long long j);                                             // C++0X
long       labs(     long j);
long long llabs(long long j);                                             // C99
div_t     div(      int numer,       int denom);
ldiv_t    div(     long numer,      long denom);
lldiv_t   div(long long numer, long long denom);                          // C++0X
ldiv_t   ldiv(     long numer,      long denom);
lldiv_t lldiv(long long numer, long long denom);                          // C99
int mblen(const char* s, size_t n);
int mbtowc(wchar_t* restrict pwc, const char* restrict s, size_t n);
int wctomb(char* s, wchar_t wchar);
size_t mbstowcs(wchar_t* restrict pwcs, const char* restrict s, size_t n);
size_t wcstombs(char* restrict s, const wchar_t* restrict pwcs, size_t n);
int at_quick_exit(void (*func)(void))                                     // C++11
void quick_exit(int status);                                              // C++11
void *aligned_alloc(size_t alignment, size_t size);                       // C11

}  // std

*/

#include <cuda/std/detail/__config>

#if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
#  pragma GCC system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
#  pragma clang system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
#  pragma system_header
#endif // no system header

#if !_CCCL_COMPILER(NVRTC)
#  include <cstdlib>
#endif // !_CCCL_COMPILER(NVRTC)

_CCCL_PUSH_MACROS

_LIBCUDACXX_BEGIN_NAMESPACE_STD

#if !_CCCL_COMPILER(NVRTC)
using ::div_t;
using ::ldiv_t;
using ::size_t;
#  ifndef _LIBCUDACXX_HAS_NO_LONG_LONG
using ::lldiv_t;
#  endif // _LIBCUDACXX_HAS_NO_LONG_LONG
using ::atof;
using ::atoi;
using ::atol;
#  ifndef _LIBCUDACXX_HAS_NO_LONG_LONG
using ::atoll;
#  endif // _LIBCUDACXX_HAS_NO_LONG_LONG
using ::strtod;
using ::strtof;
using ::strtol;
using ::strtold;
#  ifndef _LIBCUDACXX_HAS_NO_LONG_LONG
using ::strtoll;
#  endif // _LIBCUDACXX_HAS_NO_LONG_LONG
using ::strtoul;
#  ifndef _LIBCUDACXX_HAS_NO_LONG_LONG
using ::strtoull;
#  endif // _LIBCUDACXX_HAS_NO_LONG_LONG
using ::_Exit;
using ::abort;
using ::atexit;
using ::calloc;
using ::exit;
using ::free;
using ::malloc;
using ::rand;
using ::realloc;
using ::srand;
#  ifndef _LIBCUDACXX_WINDOWS_STORE_APP
using ::getenv;
using ::system;
#  endif
using ::abs;
using ::bsearch;
using ::labs;
using ::qsort;
#  ifndef _LIBCUDACXX_HAS_NO_LONG_LONG
using ::llabs;
#  endif // _LIBCUDACXX_HAS_NO_LONG_LONG
using ::div;
using ::ldiv;
#  ifndef _LIBCUDACXX_HAS_NO_LONG_LONG
using ::lldiv;
#  endif // _LIBCUDACXX_HAS_NO_LONG_LONG
using ::mblen;
using ::mbstowcs;
using ::mbtowc;
using ::wcstombs;
using ::wctomb;
#  if defined(_LIBCUDACXX_HAS_QUICK_EXIT)
using ::at_quick_exit;
using ::quick_exit;
#  endif
#  if _CCCL_STD_VER > 2014 && defined(_LIBCUDACXX_HAS_C11_FEATURES)
using ::aligned_alloc;
#  endif
#endif // !_CCCL_COMPILER(NVRTC)

_LIBCUDACXX_END_NAMESPACE_STD

_CCCL_POP_MACROS

#endif // _LIBCUDACXX_CSTDLIB
