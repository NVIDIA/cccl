// -*- C++ -*-
//===------------------------------ span ---------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES.
//
//===---------------------------------------------------------------------===//

#ifndef _LIBCUDACXX_SPAN
#define _LIBCUDACXX_SPAN

/*
    span synopsis

namespace std {

// constants
inline constexpr size_t dynamic_extent = numeric_limits<size_t>::max();

// [views.span], class template span
template <class ElementType, size_t Extent = dynamic_extent>
    class span;

template<class ElementType, size_t Extent>
  inline constexpr bool ranges::enable_view<span<ElementType, Extent>> = true;

template<class ElementType, size_t Extent>
    inline constexpr bool ranges::enable_borrowed_range<span<ElementType, Extent>> = true;

// [span.objectrep], views of object representation
template <class ElementType, size_t Extent>
    span<const byte, ((Extent == dynamic_extent) ? dynamic_extent :
        (sizeof(ElementType) * Extent))> as_bytes(span<ElementType, Extent> s) noexcept;

template <class ElementType, size_t Extent>
    span<      byte, ((Extent == dynamic_extent) ? dynamic_extent :
        (sizeof(ElementType) * Extent))> as_writable_bytes(span<ElementType, Extent> s) noexcept;


template <class ElementType, size_t Extent = dynamic_extent>
class span {
public:
    // constants and types
    using element_type = ElementType;
    using value_type = remove_cv_t<ElementType>;
    using size_type = size_t;
    using difference_type = ptrdiff_t;
    using pointer = element_type*;
    using const_pointer = const element_type*;
    using reference = element_type&;
    using const_reference = const element_type&;
    using iterator = implementation-defined;
    using reverse_iterator = std::reverse_iterator<iterator>;
    static constexpr size_type extent = Extent;

    // [span.cons], span constructors, copy, assignment, and destructor
    constexpr span() noexcept;
    template <class It>
    constexpr explicit(Extent != dynamic_extent) span(It first, size_type count);
    template <class It, class End>
    constexpr explicit(Extent != dynamic_extent) span(It first, End last);
    template <size_t N>
        constexpr span(type_identity_t<element_type> (&arr)[N]) noexcept;
    template <size_t N>
        constexpr span(array<value_type, N>& arr) noexcept;
    template <size_t N>
        constexpr span(const array<value_type, N>& arr) noexcept;
    template<class R>
      constexpr explicit(Extent != dynamic_extent) span(R&& r);
    constexpr span(const span& other) noexcept = default;
    template <class OtherElementType, size_t OtherExtent>
        constexpr explicit(Extent != dynamic_extent) span(const span<OtherElementType, OtherExtent>& s) noexcept;
    ~span() noexcept = default;
    constexpr span& operator=(const span& other) noexcept = default;

    // [span.sub], span subviews
    template <size_t Count>
        constexpr span<element_type, Count> first() const;
    template <size_t Count>
        constexpr span<element_type, Count> last() const;
    template <size_t Offset, size_t Count = dynamic_extent>
        constexpr span<element_type, see below> subspan() const;

    constexpr span<element_type, dynamic_extent> first(size_type count) const;
    constexpr span<element_type, dynamic_extent> last(size_type count) const;
    constexpr span<element_type, dynamic_extent> subspan(size_type offset, size_type count = dynamic_extent) const;

    // [span.obs], span observers
    constexpr size_type size() const noexcept;
    constexpr size_type size_bytes() const noexcept;
    [[nodiscard]] constexpr bool empty() const noexcept;

    // [span.elem], span element access
    constexpr reference operator[](size_type idx) const;
    constexpr reference front() const;
    constexpr reference back() const;
    constexpr pointer data() const noexcept;

    // [span.iterators], span iterator support
    constexpr iterator begin() const noexcept;
    constexpr iterator end() const noexcept;
    constexpr reverse_iterator rbegin() const noexcept;
    constexpr reverse_iterator rend() const noexcept;

private:
    pointer data_;    // exposition only
    size_type size_;  // exposition only
};

template<class It, class EndOrSize>
    span(It, EndOrSize) -> span<remove_reference_t<iter_reference_t<_It>>>;

template<class T, size_t N>
    span(T (&)[N]) -> span<T, N>;

template<class T, size_t N>
    span(array<T, N>&) -> span<T, N>;

template<class T, size_t N>
    span(const array<T, N>&) -> span<const T, N>;

template<class R>
    span(R&&) -> span<remove_reference_t<ranges::range_reference_t<R>>>;

} // namespace std

*/

#ifndef __cuda_std__
#include <__config>
#endif // __cuda_std__

#include "__assert" // all public C++ headers provide the assertion handler
#include "__fwd/array.h"
#include "__fwd/span.h"
#include "__fwd/string.h"
#include "__iterator/data.h"
#include "__iterator/distance.h"
#include "__iterator/size.h"
#include "__iterator/iterator_traits.h"
#include "__iterator/reverse_iterator.h"
#include "__iterator/wrap_iter.h"
#include "__memory/pointer_traits.h"
#include "__type_traits/enable_if.h"
#include "__type_traits/integral_constant.h"
#include "__type_traits/is_array.h"
#include "__type_traits/is_const.h"
#include "__type_traits/is_convertible.h"
#include "__type_traits/remove_cv.h"
#include "__type_traits/remove_pointer.h"
#include "__type_traits/type_identity.h"
#include "__type_traits/void_t.h"
#include "__utility/declval.h"
#include "array"
#include "cstddef"      // for ptrdiff_t
#include "version"

#if defined(_LIBCUDACXX_USE_PRAGMA_GCC_SYSTEM_HEADER)
#pragma GCC system_header
#endif

_LIBCUDACXX_BEGIN_NAMESPACE_STD

#if _LIBCUDACXX_STD_VER > 11

template <class _Tp>
struct __is_span_impl : public false_type {};

template <class _Tp, size_t _Extent>
struct __is_span_impl<span<_Tp, _Extent>> : public true_type {};

template <class _Tp>
struct __is_span : public __is_span_impl<remove_cv_t<_Tp>> {};

template <class _Tp>
struct __is_std_array_impl : public false_type {};

template <class _Tp, size_t _Sz>
struct __is_std_array_impl<array<_Tp, _Sz>> : public true_type {};

template <class _Tp>
struct __is_std_array : public __is_std_array_impl<remove_cv_t<_Tp>> {};

template <class _Tp, class _ElementType, class = void>
struct __is_span_compatible_container : public false_type {};

template <class _Tp, class _ElementType>
struct __is_span_compatible_container<_Tp, _ElementType,
        void_t<
        // is not a specialization of span
            enable_if_t<!__is_span<_Tp>::value, nullptr_t>,
        // is not a specialization of array
            enable_if_t<!__is_std_array<_Tp>::value, nullptr_t>,
        // is_array_v<Container> is false,
            enable_if_t<!_LIBCUDACXX_TRAIT(is_array, _Tp), nullptr_t>,
        // data(cont) and size(cont) are well formed
            decltype(data(declval<_Tp>())),
            decltype(size(declval<_Tp>())),
        // remove_pointer_t<decltype(data(cont))>(*)[] is convertible to ElementType(*)[]
            enable_if_t<
                is_convertible<remove_pointer_t<decltype(data(declval<_Tp &>()))>(*)[],
                                 _ElementType(*)[]>::value,
                nullptr_t>
        >>
    : public true_type {};

template <typename _Tp, size_t _Extent>
class _LIBCUDACXX_TEMPLATE_VIS span {
public:
//  constants and types
    using element_type           = _Tp;
    using value_type             = remove_cv_t<_Tp>;
    using size_type              = size_t;
    using difference_type        = ptrdiff_t;
    using pointer                = _Tp *;
    using const_pointer          = const _Tp *;
    using reference              = _Tp &;
    using const_reference        = const _Tp &;
    using iterator               =  __wrap_iter<pointer>;
    using reverse_iterator       = _CUDA_VSTD::reverse_iterator<iterator>;

    static constexpr size_type extent = _Extent;

// [span.cons], span constructors, copy, assignment, and destructor
    template <size_t _Sz = _Extent, enable_if_t<_Sz == 0, int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY constexpr span() noexcept : __data{nullptr} {}

    span           (const span&) noexcept = default;
    span& operator=(const span&) noexcept = default;

    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span(pointer __ptr, size_type __count) : __data{__ptr}
        { (void)__count; _LIBCUDACXX_ASSERT(_Extent == __count, "size mismatch in span's constructor (ptr, len)"); }
    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span(pointer __f, pointer __l) : __data{__f}
        { (void)__l;     _LIBCUDACXX_ASSERT(_Extent == distance(__f, __l), "size mismatch in span's constructor (ptr, ptr)"); }
#if defined(_LIBCUDACXX_COMPILER_NVRTC) \
 || defined(_LIBCUDACXX_COMPILER_MSVC_2017)
    template <size_t _Sz = _Extent, enable_if_t<_Sz != 0, int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY constexpr span(type_identity_t<element_type> (&__arr)[_Sz]) noexcept : __data{__arr} {}
#else
    _LIBCUDACXX_INLINE_VISIBILITY constexpr span(type_identity_t<element_type> (&__arr)[_Extent]) noexcept : __data{__arr} {}
#endif
    template <class _OtherElementType,
              enable_if_t< _LIBCUDACXX_TRAIT(is_convertible, _OtherElementType(*)[], element_type (*)[]), int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX14
    span(      array<_OtherElementType, _Extent>& __arr) noexcept : __data{__arr.data()} {}
    template <class _OtherElementType,
              enable_if_t< _LIBCUDACXX_TRAIT(is_convertible, _OtherElementType(*)[], element_type (*)[]), int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX14
    span(const array<_OtherElementType, _Extent>& __arr) noexcept : __data{__arr.data()} {}

    template <class _OtherElementType,
#ifdef _LIBCUDACXX_COMPILER_MSVC_2017
              size_t _Extent2 = _Extent, enable_if_t< _Extent2 != dynamic_extent, int> = 0,
#endif // _LIBCUDACXX_COMPILER_MSVC_2017
              enable_if_t<!_LIBCUDACXX_TRAIT(is_same, _OtherElementType, _Tp), int> = 0,
              enable_if_t< _LIBCUDACXX_TRAIT(is_convertible, _OtherElementType(*)[], element_type (*)[]), int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY
        constexpr span(const span<_OtherElementType, _Extent>& __other) noexcept
        : __data{__other.data()} {}

    template <class _OtherElementType,
              enable_if_t<!_LIBCUDACXX_TRAIT(is_same, _OtherElementType, _Tp), int> = 0,
              enable_if_t< _LIBCUDACXX_TRAIT(is_convertible, _OtherElementType(*)[], element_type (*)[]), int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY
        _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span(const span<_OtherElementType, dynamic_extent>& __other) noexcept
        : __data{__other.data()} { _LIBCUDACXX_ASSERT(_Extent == __other.size(), "size mismatch in span's constructor (other span)"); }

    template <class _Container, enable_if_t<
                __is_span_compatible_container<_Container, _Tp>::value, int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY
        constexpr span(      _Container& __c) noexcept(noexcept(_CUDA_VSTD::data(__c)))
        : __data{_CUDA_VSTD::data(__c)} { _LIBCUDACXX_ASSERT(_Extent == _CUDA_VSTD::size(__c), "size mismatch in span's constructor (other span)"); }

    template <class _Container, enable_if_t<
                __is_span_compatible_container<_Container, _Tp>::value, int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY
        constexpr span(const _Container& __c) noexcept(noexcept(_CUDA_VSTD::data(__c)))
        : __data{_CUDA_VSTD::data(__c)} { _LIBCUDACXX_ASSERT(_Extent == _CUDA_VSTD::size(__c), "size mismatch in span's constructor (other span)"); }

//  ~span() noexcept = default;

    template <size_t _Count>
    _LIBCUDACXX_INLINE_VISIBILITY
    constexpr span<element_type, _Count> first() const noexcept
    {
        static_assert(_Count <= _Extent, "span<T, N>::first<Count>(): Count out of range");
        return {data(), _Count};
    }

    template <size_t _Count>
    _LIBCUDACXX_INLINE_VISIBILITY
    constexpr span<element_type, _Count> last() const noexcept
    {
        static_assert(_Count <= _Extent, "span<T, N>::last<Count>(): Count out of range");
        return {data() + size() - _Count, _Count};
    }

    _LIBCUDACXX_INLINE_VISIBILITY
    _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span<element_type, dynamic_extent> first(size_type __count) const noexcept
    {
        _LIBCUDACXX_ASSERT(__count <= size(), "span<T, N>::first(count): count out of range");
        return {data(), __count};
    }

    _LIBCUDACXX_INLINE_VISIBILITY
    _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span<element_type, dynamic_extent> last(size_type __count) const noexcept
    {
        _LIBCUDACXX_ASSERT(__count <= size(), "span<T, N>::last(count): count out of range");
        return {data() + size() - __count, __count};
    }

    template <size_t _Offset, size_t _Count = dynamic_extent>
    _LIBCUDACXX_INLINE_VISIBILITY
    constexpr auto subspan() const noexcept
        -> span<element_type, _Count != dynamic_extent ? _Count : _Extent - _Offset>
    {
        static_assert(_Offset <= _Extent, "span<T, N>::subspan<Offset, Count>(): Offset out of range");
        static_assert(_Count == dynamic_extent || _Count <= _Extent - _Offset, "span<T, N>::subspan<Offset, Count>(): Offset + Count out of range");

        using _ReturnType = span<element_type, _Count != dynamic_extent ? _Count : _Extent - _Offset>;
        return _ReturnType{data() + _Offset, _Count == dynamic_extent ? size() - _Offset : _Count};
    }


    _LIBCUDACXX_INLINE_VISIBILITY
    _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span<element_type, dynamic_extent>
       subspan(size_type __offset, size_type __count = dynamic_extent) const noexcept
    {
        _LIBCUDACXX_ASSERT(__offset <= size(), "span<T, N>::subspan(offset, count): offset out of range");
        _LIBCUDACXX_ASSERT(__count  <= size() || __count == dynamic_extent, "span<T, N>::subspan(offset, count): count out of range");
        if (__count == dynamic_extent)
            return {data() + __offset, size() - __offset};
        _LIBCUDACXX_ASSERT(__count <= size() - __offset, "span<T, N>::subspan(offset, count): offset + count out of range");
        return {data() + __offset, __count};
    }

    _LIBCUDACXX_INLINE_VISIBILITY constexpr size_type size()       const noexcept { return _Extent; }
    _LIBCUDACXX_INLINE_VISIBILITY constexpr size_type size_bytes() const noexcept { return _Extent * sizeof(element_type); }
    _LIBCUDACXX_INLINE_VISIBILITY constexpr bool empty()            const noexcept { return _Extent == 0; }

    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 reference operator[](size_type __idx) const noexcept
    {
        _LIBCUDACXX_ASSERT(__idx < size(), "span<T, N>::operator[](index): index out of range");
        return __data[__idx];
    }

    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 reference front() const noexcept
    {
        _LIBCUDACXX_ASSERT(!empty(), "span<T, N>::front() on empty span");
        return __data[0];
    }

    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 reference back() const noexcept
    {
        _LIBCUDACXX_ASSERT(!empty(), "span<T, N>::back() on empty span");
        return __data[size()-1];
    }

    _LIBCUDACXX_INLINE_VISIBILITY constexpr pointer data()                         const noexcept { return __data; }

// [span.iter], span iterator support
    _LIBCUDACXX_INLINE_VISIBILITY constexpr iterator begin() const noexcept { return iterator(data()); }
    _LIBCUDACXX_INLINE_VISIBILITY constexpr iterator end() const noexcept { return iterator(data() + size()); }
    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX14 reverse_iterator rbegin() const noexcept { return reverse_iterator(end()); }
    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX14 reverse_iterator rend() const noexcept { return reverse_iterator(begin()); }

    _LIBCUDACXX_INLINE_VISIBILITY span<const byte, _Extent * sizeof(element_type)> __as_bytes() const noexcept
    { return span<const byte, _Extent * sizeof(element_type)>{reinterpret_cast<const byte *>(data()), size_bytes()}; }

    _LIBCUDACXX_INLINE_VISIBILITY span<byte, _Extent * sizeof(element_type)> __as_writable_bytes() const noexcept
    { return span<byte, _Extent * sizeof(element_type)>{reinterpret_cast<byte *>(data()), size_bytes()}; }

private:
    pointer    __data;
};


template <typename _Tp>
class _LIBCUDACXX_TEMPLATE_VIS span<_Tp, dynamic_extent> {
public:
//  constants and types
    using element_type           = _Tp;
    using value_type             = remove_cv_t<_Tp>;
    using size_type              = size_t;
    using difference_type        = ptrdiff_t;
    using pointer                = _Tp *;
    using const_pointer          = const _Tp *;
    using reference              = _Tp &;
    using const_reference        = const _Tp &;
    using iterator               =  __wrap_iter<pointer>;
    using reverse_iterator       = _CUDA_VSTD::reverse_iterator<iterator>;

    static constexpr size_type extent = dynamic_extent;

// [span.cons], span constructors, copy, assignment, and destructor
    _LIBCUDACXX_INLINE_VISIBILITY constexpr span() noexcept : __data{nullptr}, __size{0} {}

    span           (const span&) noexcept = default;
    span& operator=(const span&) noexcept = default;

    _LIBCUDACXX_INLINE_VISIBILITY constexpr span(pointer __ptr, size_type __count) : __data{__ptr}, __size{__count} {}
#if _LIBCUDACXX_STD_VER > 14
    _LIBCUDACXX_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(distance(__f, __l))} {}
#else
    _LIBCUDACXX_INLINE_VISIBILITY constexpr span(pointer __f, pointer __l) : __data{__f}, __size{static_cast<size_t>(__l - __f)} {}
#endif

    template <size_t _Sz>
    _LIBCUDACXX_INLINE_VISIBILITY
    constexpr span(type_identity_t<element_type> (&__arr)[_Sz]) noexcept : __data{__arr}, __size{_Sz} {}

    template <class _OtherElementType, size_t _Sz, enable_if_t<
                is_convertible<_OtherElementType(*)[], element_type (*)[]>::value, int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY
    _LIBCUDACXX_CONSTEXPR_AFTER_CXX14 span(array<_OtherElementType, _Sz>& __arr)       noexcept : __data{__arr.data()}, __size{_Sz} {}

    template <class _OtherElementType, size_t _Sz, enable_if_t<
                is_convertible<_OtherElementType(*)[], element_type (*)[]>::value, int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY
    _LIBCUDACXX_CONSTEXPR_AFTER_CXX14 span(const array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}

    template <class _Container, enable_if_t<
                __is_span_compatible_container<_Container, _Tp>::value, int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY
        constexpr span(      _Container& __c)
        : __data{_CUDA_VSTD::data(__c)}, __size{(size_type) _CUDA_VSTD::size(__c)} {}

    template <class _Container, enable_if_t<
                __is_span_compatible_container<_Container, _Tp>::value, int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY
        constexpr span(const _Container& __c)
        : __data{_CUDA_VSTD::data(__c)}, __size{(size_type) _CUDA_VSTD::size(__c)} {}


    template <class _OtherElementType, size_t _OtherExtent, enable_if_t<
                is_convertible<_OtherElementType(*)[], element_type (*)[]>::value, int> = 0>
    _LIBCUDACXX_INLINE_VISIBILITY
        constexpr span(const span<_OtherElementType, _OtherExtent>& __other) noexcept
        : __data{__other.data()}, __size{__other.size()} {}

//    ~span() noexcept = default;

    template <size_t _Count>
    _LIBCUDACXX_INLINE_VISIBILITY
    _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span<element_type, _Count> first() const noexcept
    {
        _LIBCUDACXX_ASSERT(_Count <= size(), "span<T>::first<Count>(): Count out of range");
        return span<element_type, _Count>{data(), _Count};
    }

    template <size_t _Count>
    _LIBCUDACXX_INLINE_VISIBILITY
    _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span<element_type, _Count> last() const noexcept
    {
        _LIBCUDACXX_ASSERT(_Count <= size(), "span<T>::last<Count>(): Count out of range");
        return span<element_type, _Count>{data() + size() - _Count, _Count};
    }

    _LIBCUDACXX_INLINE_VISIBILITY
    _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span<element_type, dynamic_extent> first(size_type __count) const noexcept
    {
        _LIBCUDACXX_ASSERT(__count <= size(), "span<T>::first(count): count out of range");
        return {data(), __count};
    }

    _LIBCUDACXX_INLINE_VISIBILITY
    _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span<element_type, dynamic_extent> last (size_type __count) const noexcept
    {
        _LIBCUDACXX_ASSERT(__count <= size(), "span<T>::last(count): count out of range");
        return {data() + size() - __count, __count};
    }

    template <size_t _Offset, size_t _Count = dynamic_extent>
    _LIBCUDACXX_INLINE_VISIBILITY
    _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span<element_type, _Count> subspan() const noexcept
    {
        _LIBCUDACXX_ASSERT(_Offset <= size(), "span<T>::subspan<Offset, Count>(): Offset out of range");
        _LIBCUDACXX_ASSERT(_Count == dynamic_extent || _Count <= size() - _Offset, "span<T>::subspan<Offset, Count>(): Offset + Count out of range");
        return span<element_type, _Count>{data() + _Offset, _Count == dynamic_extent ? size() - _Offset : _Count};
    }

    _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 span<element_type, dynamic_extent>
    _LIBCUDACXX_INLINE_VISIBILITY
    subspan(size_type __offset, size_type __count = dynamic_extent) const noexcept
    {
        _LIBCUDACXX_ASSERT(__offset <= size(), "span<T>::subspan(offset, count): offset out of range");
        _LIBCUDACXX_ASSERT(__count <= size() || __count == dynamic_extent, "span<T>::subspan(offset, count): count out of range");
        if (__count == dynamic_extent)
            return {data() + __offset, size() - __offset};
        _LIBCUDACXX_ASSERT(__count <= size() - __offset, "span<T>::subspan(offset, count): offset + count out of range");
        return {data() + __offset, __count};
    }

    _LIBCUDACXX_INLINE_VISIBILITY constexpr size_type size()       const noexcept { return __size; }
    _LIBCUDACXX_INLINE_VISIBILITY constexpr size_type size_bytes() const noexcept { return __size * sizeof(element_type); }
    _LIBCUDACXX_INLINE_VISIBILITY constexpr bool empty()           const noexcept { return __size == 0; }

    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 reference operator[](size_type __idx) const noexcept
    {
        _LIBCUDACXX_ASSERT(__idx < size(), "span<T>::operator[](index): index out of range");
        return __data[__idx];
    }

    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 reference front() const noexcept
    {
        _LIBCUDACXX_ASSERT(!empty(), "span<T>::front() on empty span");
        return __data[0];
    }

    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 reference back() const noexcept
    {
        _LIBCUDACXX_ASSERT(!empty(), "span<T>::back() on empty span");
        return __data[size()-1];
    }


    _LIBCUDACXX_INLINE_VISIBILITY constexpr pointer data() const noexcept { return __data; }

// [span.iter], span iterator support
    _LIBCUDACXX_INLINE_VISIBILITY constexpr iterator begin() const noexcept { return iterator(data()); }
    _LIBCUDACXX_INLINE_VISIBILITY constexpr iterator end() const noexcept { return iterator(data() + size()); }
    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX14 reverse_iterator rbegin() const noexcept { return reverse_iterator(end()); }
    _LIBCUDACXX_INLINE_VISIBILITY _LIBCUDACXX_CONSTEXPR_AFTER_CXX14 reverse_iterator rend() const noexcept { return reverse_iterator(begin()); }

    _LIBCUDACXX_INLINE_VISIBILITY span<const byte, dynamic_extent> __as_bytes() const noexcept
    { return {reinterpret_cast<const byte *>(data()), size_bytes()}; }

    _LIBCUDACXX_INLINE_VISIBILITY span<byte, dynamic_extent> __as_writable_bytes() const noexcept
    { return {reinterpret_cast<byte *>(data()), size_bytes()}; }

private:
    pointer    __data;
    size_type __size;
};

//  as_bytes & as_writable_bytes
template <class _Tp, size_t _Extent>
_LIBCUDACXX_INLINE_VISIBILITY
auto as_bytes(span<_Tp, _Extent> __s) noexcept
-> decltype(__s.__as_bytes())
{ return    __s.__as_bytes(); }

template <class _Tp, size_t _Extent>
_LIBCUDACXX_INLINE_VISIBILITY
auto as_writable_bytes(span<_Tp, _Extent> __s) noexcept
-> enable_if_t<!is_const<_Tp>::value, decltype(__s.__as_writable_bytes())>
{ return __s.__as_writable_bytes(); }

#endif // _LIBCUDACXX_STD_VER > 11

#if _LIBCUDACXX_STD_VER > 14 && !defined(_LIBCUDACXX_HAS_NO_DEDUCTION_GUIDES)

//  Deduction guides
template<class _Tp, size_t _Sz>
    span(_Tp (&)[_Sz]) -> span<_Tp, _Sz>;

template<class _Tp, size_t _Sz>
    span(array<_Tp, _Sz>&) -> span<_Tp, _Sz>;

template<class _Tp, size_t _Sz>
    span(const array<_Tp, _Sz>&) -> span<const _Tp, _Sz>;

template<class _Container>
    span(_Container&) -> span<typename _Container::value_type>;

template<class _Container>
    span(const _Container&) -> span<const typename _Container::value_type>;

#endif // _LIBCUDACXX_STD_VER > 14

_LIBCUDACXX_END_NAMESPACE_STD

#endif // _LIBCUDACXX_SPAN
