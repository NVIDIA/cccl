//===----------------------------------------------------------------------===//
//
// Part of libcu++, the C++ Standard Library for your entire system,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES.
//
//===----------------------------------------------------------------------===//

#ifndef _CUDA_STD_CSTRING
#define _CUDA_STD_CSTRING

#include <cuda/std/detail/__config>

#if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
#  pragma GCC system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
#  pragma clang system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
#  pragma system_header
#endif // no system header

_CCCL_PUSH_MACROS

#include <cuda/std/__type_traits/is_constant_evaluated.h>

#if !_CCCL_COMPILER(NVRTC)
#  include <cstring>
#endif // !_CCCL_COMPILER(NVRTC)

_LIBCUDACXX_BEGIN_NAMESPACE_STD

using ::memcpy;
using ::memset;
using ::size_t;

// strcpy

_LIBCUDACXX_HIDE_FROM_ABI constexpr char*
__cccl_constexpr_strcpy(char* _CCCL_RESTRICT __dst, const char* _CCCL_RESTRICT __src) noexcept
{
  char* __dst_it = __dst;
  while ((*__dst_it++ = *__src++) != '\0')
  {
  }
  return __dst;
}

_LIBCUDACXX_HIDE_FROM_ABI constexpr char* strcpy(char* _CCCL_RESTRICT __dst, const char* _CCCL_RESTRICT __src)
{
  if (!_CUDA_VSTD::__cccl_default_is_constant_evaluated())
  {
    NV_IF_TARGET(NV_IS_HOST, (return ::strcpy(__dst, __src);))
  }
  return _CUDA_VSTD::__cccl_constexpr_strcpy(__dst, __src);
}

// strncpy

_LIBCUDACXX_HIDE_FROM_ABI constexpr char*
__cccl_constexpr_strncpy(char* _CCCL_RESTRICT __dst, const char* _CCCL_RESTRICT __src, size_t __n) noexcept
{
  char* __dst_it = __dst;
  while (__n--)
  {
    if ((*__dst_it++ = *__src++) == '\0')
    {
      while (__n--)
      {
        *__dst_it++ = '\0';
      }
      break;
    }
  }
  return __dst;
}

_LIBCUDACXX_HIDE_FROM_ABI constexpr char*
strncpy(char* _CCCL_RESTRICT __dst, const char* _CCCL_RESTRICT __src, size_t __n)
{
  if (!_CUDA_VSTD::__cccl_default_is_constant_evaluated())
  {
    NV_IF_TARGET(NV_IS_HOST, (return ::strncpy(__dst, __src, __n);))
  }
  return _CUDA_VSTD::__cccl_constexpr_strncpy(__dst, __src, __n);
}

// strlen

[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr size_t __cccl_constexpr_strlen(const char* __ptr) noexcept
{
  size_t __len = 0;
  while (*__ptr++ != '\0')
  {
    ++__len;
  }
  return __len;
}

[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr size_t strlen(const char* __ptr)
{
  if (!_CUDA_VSTD::__cccl_default_is_constant_evaluated())
  {
    NV_IF_TARGET(NV_IS_HOST, (return ::strlen(__ptr);))
  }
  return _CUDA_VSTD::__cccl_constexpr_strlen(__ptr);
}

// strcmp

[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr int
__cccl_constexpr_strcmp(const char* __lhs, const char* __rhs) noexcept
{
  while (*__lhs == *__rhs)
  {
    if (*__lhs == '\0')
    {
      return 0;
    }

    ++__lhs;
    ++__rhs;
  }
  return (static_cast<unsigned char>(*__lhs) < static_cast<unsigned char>(*__rhs)) ? -1 : 1;
}

[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr int strcmp(const char* __lhs, const char* __rhs)
{
  if (!_CUDA_VSTD::__cccl_default_is_constant_evaluated())
  {
    NV_IF_TARGET(NV_IS_HOST, (return ::strcmp(__lhs, __rhs);))
  }
  return _CUDA_VSTD::__cccl_constexpr_strcmp(__lhs, __rhs);
}

// strncmp

[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr int
__cccl_constexpr_strncmp(const char* __lhs, const char* __rhs, size_t __n) noexcept
{
  while (__n--)
  {
    if (*__lhs != *__rhs)
    {
      return (static_cast<unsigned char>(*__lhs) < static_cast<unsigned char>(*__rhs)) ? -1 : 1;
    }

    if (*__lhs == '\0')
    {
      return 0;
    }

    ++__lhs;
    ++__rhs;
  }
  return 0;
}

[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr int strncmp(const char* __lhs, const char* __rhs, size_t __n)
{
  if (!_CUDA_VSTD::__cccl_default_is_constant_evaluated())
  {
    NV_IF_TARGET(NV_IS_HOST, (return ::strncmp(__lhs, __rhs, __n);))
  }
  return _CUDA_VSTD::__cccl_constexpr_strncmp(__lhs, __rhs, __n);
}

// strchr

template <class _Tp>
[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp* __cccl_constexpr_strchr(_Tp* __ptr, int __c) noexcept
{
  while (*__ptr != static_cast<char>(__c))
  {
    if (*__ptr == '\0')
    {
      return nullptr;
    }
    ++__ptr;
  }
  return __ptr;
}

[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr const char* strchr(const char* __ptr, int __c)
{
  if (!_CUDA_VSTD::__cccl_default_is_constant_evaluated())
  {
    NV_IF_TARGET(NV_IS_HOST, (return ::strchr(__ptr, __c);))
  }
  return _CUDA_VSTD::__cccl_constexpr_strchr(__ptr, __c);
}

[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr char* strchr(char* __ptr, int __c)
{
  if (!_CUDA_VSTD::__cccl_default_is_constant_evaluated())
  {
    NV_IF_TARGET(NV_IS_HOST, (return ::strchr(__ptr, __c);))
  }
  return _CUDA_VSTD::__cccl_constexpr_strchr(__ptr, __c);
}

// strrchr

template <class _Tp>
[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp* __cccl_constexpr_strrchr(_Tp* __ptr, int __c) noexcept
{
  if (static_cast<char>(__c) == '\0')
  {
    return __ptr + _CUDA_VSTD::strlen(__ptr);
  }

  _Tp* __last{};
  while (*__ptr != '\0')
  {
    if (*__ptr == static_cast<char>(__c))
    {
      __last = __ptr;
    }
    ++__ptr;
  }
  return __last;
}

[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr const char* strrchr(const char* __ptr, int __c)
{
  if (!_CUDA_VSTD::__cccl_default_is_constant_evaluated())
  {
    NV_IF_TARGET(NV_IS_HOST, (return ::strrchr(__ptr, __c);))
  }
  return _CUDA_VSTD::__cccl_constexpr_strrchr(__ptr, __c);
}

[[nodiscard]] _LIBCUDACXX_HIDE_FROM_ABI constexpr char* strrchr(char* __ptr, int __c)
{
  if (!_CUDA_VSTD::__cccl_default_is_constant_evaluated())
  {
    NV_IF_TARGET(NV_IS_HOST, (return ::strrchr(__ptr, __c);))
  }
  return _CUDA_VSTD::__cccl_constexpr_strrchr(__ptr, __c);
}

// memchr

#if _CCCL_HAS_CUDA_COMPILER()
_CCCL_HIDE_FROM_ABI _CCCL_DEVICE const void* __memchr_device(const void* __ptr, int __c, size_t __n) noexcept
{
  auto __p = static_cast<const unsigned char*>(__ptr);

  while (__n--)
  {
    if (*__p == static_cast<unsigned char>(__c))
    {
      return __p;
    }
    ++__p;
  }

  return nullptr;
}
#endif // _CCCL_HAS_CUDA_COMPILER()

_LIBCUDACXX_HIDE_FROM_ABI const void* memchr(const void* __ptr, int __c, size_t __n) noexcept
{
  NV_IF_ELSE_TARGET(
    NV_IS_HOST, (return ::memchr(__ptr, __c, __n);), (return _CUDA_VSTD::__memchr_device(__ptr, __c, __n);))
}

_LIBCUDACXX_HIDE_FROM_ABI void* memchr(void* __ptr, int __c, size_t __n) noexcept
{
  NV_IF_ELSE_TARGET(NV_IS_HOST,
                    (return ::memchr(__ptr, __c, __n);),
                    (return const_cast<void*>(_CUDA_VSTD::memchr(const_cast<const void*>(__ptr), __c, __n));))
}

// mommove

#if _CCCL_HAS_CUDA_COMPILER()
_CCCL_HIDE_FROM_ABI _CCCL_DEVICE void* __memmove_device(void* __dst, const void* __src, size_t __n) noexcept
{
  auto __d = (__dst <= __src) ? static_cast<unsigned char*>(__dst) : (static_cast<unsigned char*>(__dst) + __n - 1);
  auto __s =
    (__dst <= __src) ? static_cast<const unsigned char*>(__src) : (static_cast<const unsigned char*>(__src) + __n - 1);
  const auto __inc = (__dst <= __src) ? 1 : -1;

  while (__n--)
  {
    *__d = *__s;
    __d += __inc;
    __s += __inc;
  }

  return __dst;
}
#endif // _CCCL_HAS_CUDA_COMPILER()

_LIBCUDACXX_HIDE_FROM_ABI void* memmove(void* __dst, const void* __src, size_t __n) noexcept
{
#if defined(_CCCL_BUILTIN_MEMMOVE)
  return _CCCL_BUILTIN_MEMMOVE(__dst, __src, __n);
#else // ^^^ _CCCL_BUILTIN_MEMMOVE ^^^ / vvv !_CCCL_BUILTIN_MEMMOVE vvv
  NV_IF_ELSE_TARGET(
    NV_IS_HOST, (return ::memmove(__dst, __src, __n);), (return _CUDA_VSTD::__memmove_device(__dst, __src, __n);))
#endif // ^^^ !_CCCL_BUILTIN_MEMMOVE ^^^
}

// memcmp

#if _CCCL_HAS_CUDA_COMPILER()
_CCCL_HIDE_FROM_ABI _CCCL_DEVICE int __memcmp_device(const void* __lhs, const void* __rhs, size_t __n) noexcept
{
  auto __l = static_cast<const unsigned char*>(__lhs);
  auto __r = static_cast<const unsigned char*>(__rhs);

  while (__n--)
  {
    if (*__l != *__r)
    {
      return *__l < *__r ? -1 : 1;
    }
    ++__l;
    ++__r;
  }
  return 0;
}
#endif // _CCCL_HAS_CUDA_COMPILER()

_LIBCUDACXX_HIDE_FROM_ABI int memcmp(const void* __lhs, const void* __rhs, size_t __n) noexcept
{
#if defined(_CCCL_BUILTIN_MEMCMP)
  return _CCCL_BUILTIN_MEMCMP(__lhs, __rhs, __n);
#else // ^^^ _CCCL_BUILTIN_MEMCMP ^^^ / vvv !_CCCL_BUILTIN_MEMCMP vvv
  NV_IF_ELSE_TARGET(
    NV_IS_HOST, (return ::memcmp(__lhs, __rhs, __n);), (return _CUDA_VSTD::__memcmp_device(__lhs, __rhs, __n);))
#endif // ^^^ !_CCCL_BUILTIN_MEMCMP ^^^
}

_LIBCUDACXX_END_NAMESPACE_STD

_CCCL_POP_MACROS

#endif // _CUDA_STD_CSTRING
