//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES.
//
//===----------------------------------------------------------------------===//

#ifndef _CUDA_STD_NUMBERS
#define _CUDA_STD_NUMBERS

#include <cuda/std/detail/__config>

#if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
#  pragma GCC system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
#  pragma clang system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
#  pragma system_header
#endif // no system header

#include <cuda/std/__floating_point/nvfp_types.h>
#include <cuda/std/__type_traits/always_false.h>
#include <cuda/std/__type_traits/enable_if.h>
#include <cuda/std/__type_traits/is_floating_point.h>
#include <cuda/std/version>

#include <cuda/std/__cccl/prologue.h>

_LIBCUDACXX_BEGIN_NAMESPACE_STD

template <class _Tp, class = void>
struct __numbers
{
  static_assert(__always_false_v<_Tp>,
                "[math.constants] A program that instantiates a primary template of a mathematical constant variable "
                "template is ill-formed.");
};

_CCCL_DIAG_PUSH
_CCCL_DIAG_SUPPRESS_MSVC(4305) // truncation from 'double' to 'const _Tp'

template <class _Tp>
struct __numbers<_Tp, enable_if_t<_CCCL_TRAIT(is_floating_point, _Tp)>>
{
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __e() noexcept
  {
    return 2.718281828459045235360287471352662;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __log2e() noexcept
  {
    return 1.442695040888963407359924681001892;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __log10e() noexcept
  {
    return 0.434294481903251827651128918916605;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __pi() noexcept
  {
    return 3.141592653589793238462643383279502;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __inv_pi() noexcept
  {
    return 0.318309886183790671537767526745028;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __inv_sqrtpi() noexcept
  {
    return 0.564189583547756286948079451560772;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __ln2() noexcept
  {
    return 0.693147180559945309417232121458176;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __ln10() noexcept
  {
    return 2.302585092994045684017991454684364;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __sqrt2() noexcept
  {
    return 1.414213562373095048801688724209698;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __sqrt3() noexcept
  {
    return 1.732050807568877293527446341505872;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __inv_sqrt3() noexcept
  {
    return 0.577350269189625764509148780501957;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __egamma() noexcept
  {
    return 0.577215664901532860606512090082402;
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr _Tp __phi() noexcept
  {
    return 1.618033988749894848204586834365638;
  }
};

_CCCL_DIAG_POP

#if _LIBCUDACXX_HAS_NVFP16()
template <>
struct __numbers<__half>
{
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __e() noexcept
  {
    return __half_raw{0x4170u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __log2e() noexcept
  {
    return __half_raw{0x3dc5u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __log10e() noexcept
  {
    return __half_raw{0x36f3u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __pi() noexcept
  {
    return __half_raw{0x4248u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __inv_pi() noexcept
  {
    return __half_raw{0x3518u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __inv_sqrtpi() noexcept
  {
    return __half_raw{0x3883u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __ln2() noexcept
  {
    return __half_raw{0x398cu};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __ln10() noexcept
  {
    return __half_raw{0x409bu};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __sqrt2() noexcept
  {
    return __half_raw{0x3da8u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __sqrt3() noexcept
  {
    return __half_raw{0x3eeeu};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __inv_sqrt3() noexcept
  {
    return __half_raw{0x389eu};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __egamma() noexcept
  {
    return __half_raw{0x389eu};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __half __phi() noexcept
  {
    return __half_raw{0x3e79u};
  }
};
#endif // _LIBCUDACXX_HAS_NVFP16()

#if _LIBCUDACXX_HAS_NVBF16()
template <>
struct __numbers<__nv_bfloat16>
{
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __e() noexcept
  {
    return __nv_bfloat16_raw{0x402eu};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __log2e() noexcept
  {
    return __nv_bfloat16_raw{0x3fb9u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __log10e() noexcept
  {
    return __nv_bfloat16_raw{0x3edeu};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __pi() noexcept
  {
    return __nv_bfloat16_raw{0x4049u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __inv_pi() noexcept
  {
    return __nv_bfloat16_raw{0x3ea3u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __inv_sqrtpi() noexcept
  {
    return __nv_bfloat16_raw{0x3f10u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __ln2() noexcept
  {
    return __nv_bfloat16_raw{0x3f31u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __ln10() noexcept
  {
    return __nv_bfloat16_raw{0x4013u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __sqrt2() noexcept
  {
    return __nv_bfloat16_raw{0x3fb5u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __sqrt3() noexcept
  {
    return __nv_bfloat16_raw{0x3fdeu};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __inv_sqrt3() noexcept
  {
    return __nv_bfloat16_raw{0x3f14u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __egamma() noexcept
  {
    return __nv_bfloat16_raw{0x3f14u};
  }
  [[nodiscard]] static _LIBCUDACXX_HIDE_FROM_ABI constexpr __nv_bfloat16 __phi() noexcept
  {
    return __nv_bfloat16_raw{0x3fcfu};
  }
};
#endif // _LIBCUDACXX_HAS_NVBF16()

namespace numbers
{

template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp e_v = __numbers<_Tp>::__e();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp log2e_v = __numbers<_Tp>::__log2e();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp log10e_v = __numbers<_Tp>::__log10e();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp pi_v = __numbers<_Tp>::__pi();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp inv_pi_v = __numbers<_Tp>::__inv_pi();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp inv_sqrtpi_v = __numbers<_Tp>::__inv_sqrtpi();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp ln2_v = __numbers<_Tp>::__ln2();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp ln10_v = __numbers<_Tp>::__ln10();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp sqrt2_v = __numbers<_Tp>::__sqrt2();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp sqrt3_v = __numbers<_Tp>::__sqrt3();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp inv_sqrt3_v = __numbers<_Tp>::__inv_sqrt3();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp egamma_v = __numbers<_Tp>::__egamma();
template <class _Tp>
_CCCL_GLOBAL_CONSTANT _Tp phi_v = __numbers<_Tp>::__phi();

#if !_CCCL_COMPILER(MSVC)
// MSVC errors here because of "error: A __device__ variable template cannot have a const qualified type on Windows"
#  if _LIBCUDACXX_HAS_NVFP16()
template <>
_CCCL_GLOBAL_CONSTANT __half e_v<__half> = __numbers<__half>::__e();
template <>
_CCCL_GLOBAL_CONSTANT __half log2e_v<__half> = __numbers<__half>::__log2e();
template <>
_CCCL_GLOBAL_CONSTANT __half log10e_v<__half> = __numbers<__half>::__log10e();
template <>
_CCCL_GLOBAL_CONSTANT __half pi_v<__half> = __numbers<__half>::__pi();
template <>
_CCCL_GLOBAL_CONSTANT __half inv_pi_v<__half> = __numbers<__half>::__inv_pi();
template <>
_CCCL_GLOBAL_CONSTANT __half inv_sqrtpi_v<__half> = __numbers<__half>::__inv_sqrtpi();
template <>
_CCCL_GLOBAL_CONSTANT __half ln2_v<__half> = __numbers<__half>::__ln2();
template <>
_CCCL_GLOBAL_CONSTANT __half ln10_v<__half> = __numbers<__half>::__ln10();
template <>
_CCCL_GLOBAL_CONSTANT __half sqrt2_v<__half> = __numbers<__half>::__sqrt2();
template <>
_CCCL_GLOBAL_CONSTANT __half sqrt3_v<__half> = __numbers<__half>::__sqrt3();
template <>
_CCCL_GLOBAL_CONSTANT __half inv_sqrt3_v<__half> = __numbers<__half>::__inv_sqrt3();
template <>
_CCCL_GLOBAL_CONSTANT __half egamma_v<__half> = __numbers<__half>::__egamma();
template <>
_CCCL_GLOBAL_CONSTANT __half phi_v<__half> = __numbers<__half>::__phi();
#  endif // _LIBCUDACXX_HAS_NVFP16()

#  if _LIBCUDACXX_HAS_NVBF16()
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 e_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__e();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 log2e_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__log2e();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 log10e_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__log10e();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 pi_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__pi();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 inv_pi_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__inv_pi();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 inv_sqrtpi_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__inv_sqrtpi();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 ln2_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__ln2();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 ln10_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__ln10();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 sqrt2_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__sqrt2();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 sqrt3_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__sqrt3();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 inv_sqrt3_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__inv_sqrt3();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 egamma_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__egamma();
template <>
_CCCL_GLOBAL_CONSTANT __nv_bfloat16 phi_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__phi();
#  endif // _LIBCUDACXX_HAS_NVBF16()
#endif // !_CCCL_COMPILER(MSVC)

_CCCL_GLOBAL_CONSTANT double e          = __numbers<double>::__e();
_CCCL_GLOBAL_CONSTANT double log2e      = __numbers<double>::__log2e();
_CCCL_GLOBAL_CONSTANT double log10e     = __numbers<double>::__log10e();
_CCCL_GLOBAL_CONSTANT double pi         = __numbers<double>::__pi();
_CCCL_GLOBAL_CONSTANT double inv_pi     = __numbers<double>::__inv_pi();
_CCCL_GLOBAL_CONSTANT double inv_sqrtpi = __numbers<double>::__inv_sqrtpi();
_CCCL_GLOBAL_CONSTANT double ln2        = __numbers<double>::__ln2();
_CCCL_GLOBAL_CONSTANT double ln10       = __numbers<double>::__ln10();
_CCCL_GLOBAL_CONSTANT double sqrt2      = __numbers<double>::__sqrt2();
_CCCL_GLOBAL_CONSTANT double sqrt3      = __numbers<double>::__sqrt3();
_CCCL_GLOBAL_CONSTANT double inv_sqrt3  = __numbers<double>::__inv_sqrt3();
_CCCL_GLOBAL_CONSTANT double egamma     = __numbers<double>::__egamma();
_CCCL_GLOBAL_CONSTANT double phi        = __numbers<double>::__phi();

} // namespace numbers

_LIBCUDACXX_END_NAMESPACE_STD

#include <cuda/std/__cccl/epilogue.h>

#endif // _CUDA_STD_NUMBERS
