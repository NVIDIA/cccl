//===----------------------------------------------------------------------===//
//
// Part of libcu++, the C++ Standard Library for your entire system,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES.
//
//===----------------------------------------------------------------------===//

#ifndef _CUDA_STD_NUMBERS
#define _CUDA_STD_NUMBERS

#include <cuda/std/detail/__config>

#if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
#  pragma GCC system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
#  pragma clang system_header
#elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
#  pragma system_header
#endif // no system header

#include <cuda/std/__type_traits/enable_if.h>
#include <cuda/std/__type_traits/is_floating_point.h>
#include <cuda/std/version>

#if defined(_LIBCUDACXX_HAS_NVFP16)
#  include <cuda_fp16.h>
#endif // _LIBCUDACXX_HAS_NVFP16
#if defined(_LIBCUDACXX_HAS_NVBF16)
_CCCL_DIAG_PUSH
_CCCL_DIAG_SUPPRESS_CLANG("-Wunused-function")
#  include <cuda_bf16.h>
_CCCL_DIAG_POP
#endif // _LIBCUDACXX_HAS_NVBF16

_LIBCUDACXX_BEGIN_NAMESPACE_STD

template <class _Tp>
struct __numbers_ill_formed_impl : false_type
{};

template <class _Tp, class = void>
struct __numbers
{
  static_assert(__numbers_ill_formed_impl<_Tp>::value,
                "[math.constants] A program that instantiates a primary template of a mathematical constant variable "
                "template is ill-formed.");
};

_CCCL_DIAG_PUSH
_CCCL_DIAG_SUPPRESS_MSVC(4305) // truncation from 'double' to 'const _Tp'

template <class _Tp>
struct __numbers<_Tp, enable_if_t<_CCCL_TRAIT(is_floating_point, _Tp)>>
{
  static constexpr _Tp __e          = 2.718281828459045235360287471352662;
  static constexpr _Tp __log2e      = 1.442695040888963407359924681001892;
  static constexpr _Tp __log10e     = 0.434294481903251827651128918916605;
  static constexpr _Tp __pi         = 3.141592653589793238462643383279502;
  static constexpr _Tp __inv_pi     = 0.318309886183790671537767526745028;
  static constexpr _Tp __inv_sqrtpi = 0.564189583547756286948079451560772;
  static constexpr _Tp __ln2        = 0.693147180559945309417232121458176;
  static constexpr _Tp __ln10       = 2.302585092994045684017991454684364;
  static constexpr _Tp __sqrt2      = 1.414213562373095048801688724209698;
  static constexpr _Tp __sqrt3      = 1.732050807568877293527446341505872;
  static constexpr _Tp __inv_sqrt3  = 0.577350269189625764509148780501957;
  static constexpr _Tp __egamma     = 0.577215664901532860606512090082402;
  static constexpr _Tp __phi        = 1.618033988749894848204586834365638;
};

_CCCL_DIAG_POP

#if defined(_LIBCUDACXX_HAS_NVFP16)
template <>
struct __numbers<__half>
{
  static constexpr __half __e          = __half_raw{0x4170u};
  static constexpr __half __log2e      = __half_raw{0x3dc5u};
  static constexpr __half __log10e     = __half_raw{0x36f3u};
  static constexpr __half __pi         = __half_raw{0x4248u};
  static constexpr __half __inv_pi     = __half_raw{0x3518u};
  static constexpr __half __inv_sqrtpi = __half_raw{0x3883u};
  static constexpr __half __ln2        = __half_raw{0x398cu};
  static constexpr __half __ln10       = __half_raw{0x409bu};
  static constexpr __half __sqrt2      = __half_raw{0x3da8u};
  static constexpr __half __sqrt3      = __half_raw{0x3eeeu};
  static constexpr __half __inv_sqrt3  = __half_raw{0x389eu};
  static constexpr __half __egamma     = __half_raw{0x389eu};
  static constexpr __half __phi        = __half_raw{0x3e79u};
};
#endif // _LIBCUDACXX_HAS_NVFP16

#if defined(_LIBCUDACXX_HAS_NVBF16)
template <>
struct __numbers<__nv_bfloat16>
{
  static constexpr __nv_bfloat16 __e          = __nv_bfloat16_raw{0x402eu};
  static constexpr __nv_bfloat16 __log2e      = __nv_bfloat16_raw{0x3fb9u};
  static constexpr __nv_bfloat16 __log10e     = __nv_bfloat16_raw{0x3edeu};
  static constexpr __nv_bfloat16 __pi         = __nv_bfloat16_raw{0x4049u};
  static constexpr __nv_bfloat16 __inv_pi     = __nv_bfloat16_raw{0x3ea3u};
  static constexpr __nv_bfloat16 __inv_sqrtpi = __nv_bfloat16_raw{0x3f10u};
  static constexpr __nv_bfloat16 __ln2        = __nv_bfloat16_raw{0x3f31u};
  static constexpr __nv_bfloat16 __ln10       = __nv_bfloat16_raw{0x4013u};
  static constexpr __nv_bfloat16 __sqrt2      = __nv_bfloat16_raw{0x3fb5u};
  static constexpr __nv_bfloat16 __sqrt3      = __nv_bfloat16_raw{0x3fdeu};
  static constexpr __nv_bfloat16 __inv_sqrt3  = __nv_bfloat16_raw{0x3f14u};
  static constexpr __nv_bfloat16 __egamma     = __nv_bfloat16_raw{0x3f14u};
  static constexpr __nv_bfloat16 __phi        = __nv_bfloat16_raw{0x3fcfu};
};
#endif // _LIBCUDACXX_HAS_NVBF16

namespace numbers
{

template <class _Tp>
inline constexpr _Tp e_v = __numbers<_Tp>::__e;
template <class _Tp>
inline constexpr _Tp log2e_v = __numbers<_Tp>::__log2e;
template <class _Tp>
inline constexpr _Tp log10e_v = __numbers<_Tp>::__log10e;
template <class _Tp>
inline constexpr _Tp pi_v = __numbers<_Tp>::__pi;
template <class _Tp>
inline constexpr _Tp inv_pi_v = __numbers<_Tp>::__inv_pi;
template <class _Tp>
inline constexpr _Tp inv_sqrtpi_v = __numbers<_Tp>::__inv_sqrtpi;
template <class _Tp>
inline constexpr _Tp ln2_v = __numbers<_Tp>::__ln2;
template <class _Tp>
inline constexpr _Tp ln10_v = __numbers<_Tp>::__ln10;
template <class _Tp>
inline constexpr _Tp sqrt2_v = __numbers<_Tp>::__sqrt2;
template <class _Tp>
inline constexpr _Tp sqrt3_v = __numbers<_Tp>::__sqrt3;
template <class _Tp>
inline constexpr _Tp inv_sqrt3_v = __numbers<_Tp>::__inv_sqrt3;
template <class _Tp>
inline constexpr _Tp egamma_v = __numbers<_Tp>::__egamma;
template <class _Tp>
inline constexpr _Tp phi_v = __numbers<_Tp>::__phi;

#if defined(_LIBCUDACXX_HAS_NVFP16)
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half e_v<__half> = __numbers<__half>::__e;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half log2e_v<__half> = __numbers<__half>::__log2e;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half log10e_v<__half> = __numbers<__half>::__log10e;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half pi_v<__half> = __numbers<__half>::__pi;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half inv_pi_v<__half> = __numbers<__half>::__inv_pi;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half inv_sqrtpi_v<__half> = __numbers<__half>::__inv_sqrtpi;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half ln2_v<__half> = __numbers<__half>::__ln2;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half ln10_v<__half> = __numbers<__half>::__ln10;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half sqrt2_v<__half> = __numbers<__half>::__sqrt2;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half sqrt3_v<__half> = __numbers<__half>::__sqrt3;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half inv_sqrt3_v<__half> = __numbers<__half>::__inv_sqrt3;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half egamma_v<__half> = __numbers<__half>::__egamma;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __half phi_v<__half> = __numbers<__half>::__phi;
#endif // _LIBCUDACXX_HAS_NVFP16

#if defined(_LIBCUDACXX_HAS_NVBF16)
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 e_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__e;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 log2e_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__log2e;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 log10e_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__log10e;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 pi_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__pi;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 inv_pi_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__inv_pi;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 inv_sqrtpi_v<__nv_bfloat16> =
  __numbers<__nv_bfloat16>::__inv_sqrtpi;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 ln2_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__ln2;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 ln10_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__ln10;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 sqrt2_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__sqrt2;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 sqrt3_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__sqrt3;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 inv_sqrt3_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__inv_sqrt3;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 egamma_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__egamma;
template <>
_CCCL_DEVICE_VARIABLE inline constexpr __nv_bfloat16 phi_v<__nv_bfloat16> = __numbers<__nv_bfloat16>::__phi;
#endif // _LIBCUDACXX_HAS_NVBF16

inline constexpr double e          = e_v<double>;
inline constexpr double log2e      = log2e_v<double>;
inline constexpr double log10e     = log10e_v<double>;
inline constexpr double pi         = pi_v<double>;
inline constexpr double inv_pi     = inv_pi_v<double>;
inline constexpr double inv_sqrtpi = inv_sqrtpi_v<double>;
inline constexpr double ln2        = ln2_v<double>;
inline constexpr double ln10       = ln10_v<double>;
inline constexpr double sqrt2      = sqrt2_v<double>;
inline constexpr double sqrt3      = sqrt3_v<double>;
inline constexpr double inv_sqrt3  = inv_sqrt3_v<double>;
inline constexpr double egamma     = egamma_v<double>;
inline constexpr double phi        = phi_v<double>;

} // namespace numbers

_LIBCUDACXX_END_NAMESPACE_STD

#endif // _CUDA_STD_NUMBERS
