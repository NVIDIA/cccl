//===----------------------------------------------------------------------===//
//
// Part of libcu++, the C++ Standard Library for your entire system,
// under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES.
//
//===----------------------------------------------------------------------===//

#ifndef _CUDA_DISCARD_MEMORY
#define _CUDA_DISCARD_MEMORY

#include <cuda/std/cstdint>
#include <cuda/std/detail/__config>

_LIBCUDACXX_BEGIN_NAMESPACE_CUDA

inline _LIBCUDACXX_HOST_DEVICE void discard_memory(volatile void* __ptr, std::size_t __nbytes) noexcept
{
  NV_IF_TARGET(
    NV_PROVIDES_SM_80,
    (if (!__isGlobal((void*) __ptr)) return;

     char* __p                               = reinterpret_cast<char*>(const_cast<void*>(__ptr));
     char* const __end_p                     = __p + __nbytes;
     static constexpr std::size_t _LINE_SIZE = 128;

     // Trim the first block and last block if they're not 128 bytes aligned
     std::size_t __misalignment = reinterpret_cast<std::uintptr_t>(__p) % _LINE_SIZE;
     char* __start_aligned      = __misalignment == 0 ? __p : __p + (_LINE_SIZE - __misalignment);
     char* const __end_aligned  = __end_p - (reinterpret_cast<std::uintptr_t>(__end_p) % _LINE_SIZE);

     while (__start_aligned < __end_aligned) {
       printf("-> [%p, %p)\n", __start_aligned, __start_aligned + 128);
       asm volatile("discard.global.L2 [%0], 128;" ::"l"(__start_aligned) :);
       __start_aligned += _LINE_SIZE;
     }),
    ((void) (__ptr); (void) (__nbytes);))
}

_LIBCUDACXX_END_NAMESPACE_CUDA

#endif
