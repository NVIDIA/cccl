cub\/iterator\/cache\_modified\_output\_iterator.cuh
====================================================

File members: :ref:`cub\/iterator\/cache\_modified\_output\_iterator.cuh <cache__modified__output__iterator_8cuh>`

.. code-block:: c++

   /******************************************************************************
    * Copyright (c) 2011, Duane Merrill.  All rights reserved.
    * Copyright (c) 2011-2018, NVIDIA CORPORATION.  All rights reserved.
    *
    * Redistribution and use in source and binary forms, with or without
    * modification, are permitted provided that the following conditions are met:
    *     * Redistributions of source code must retain the above copyright
    *       notice, this list of conditions and the following disclaimer.
    *     * Redistributions in binary form must reproduce the above copyright
    *       notice, this list of conditions and the following disclaimer in the
    *       documentation and/or other materials provided with the distribution.
    *     * Neither the name of the NVIDIA CORPORATION nor the
    *       names of its contributors may be used to endorse or promote products
    *       derived from this software without specific prior written permission.
    *
    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    * DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
    * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    *
    ******************************************************************************/

   #pragma once

   #include <cub/config.cuh>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header

   #include <cub/thread/thread_load.cuh>
   #include <cub/thread/thread_store.cuh>

   #include <thrust/iterator/iterator_facade.h>

   #include <cuda/std/type_traits>

   #if !_CCCL_COMPILER(NVRTC)
   #  include <ostream>
   #endif // !_CCCL_COMPILER(NVRTC)

   CUB_NAMESPACE_BEGIN

   template <CacheStoreModifier MODIFIER, typename ValueType, typename OffsetT = ptrdiff_t>
   class CacheModifiedOutputIterator
   {
   private:
     // Proxy object
     struct Reference
     {
       ValueType* ptr;

       _CCCL_HOST_DEVICE _CCCL_FORCEINLINE Reference(ValueType* ptr)
           : ptr(ptr)
       {}

       _CCCL_DEVICE _CCCL_FORCEINLINE ValueType operator=(ValueType val)
       {
         ThreadStore<MODIFIER>(ptr, val);
         return val;
       }
     };

   public:
     // Required iterator traits

     using self_type = CacheModifiedOutputIterator;

     using difference_type = OffsetT;

     using value_type = void;

     using pointer = void;

     using reference = Reference;

     using iterator_category = typename THRUST_NS_QUALIFIER::detail::iterator_facade_category<
       THRUST_NS_QUALIFIER::device_system_tag,
       THRUST_NS_QUALIFIER::random_access_traversal_tag,
       value_type,
       reference>::type;

   private:
     ValueType* ptr;

   public:
     template <typename QualifiedValueType>
     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE CacheModifiedOutputIterator(QualifiedValueType* ptr)
         : ptr(const_cast<::cuda::std::remove_cv_t<QualifiedValueType>*>(ptr))
     {}

     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE self_type operator++(int)
     {
       self_type retval = *this;
       ptr++;
       return retval;
     }

     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE self_type operator++()
     {
       ptr++;
       return *this;
     }

     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE reference operator*() const
     {
       return Reference(ptr);
     }

     template <typename Distance>
     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE self_type operator+(Distance n) const
     {
       self_type retval(ptr + n);
       return retval;
     }

     template <typename Distance>
     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE self_type& operator+=(Distance n)
     {
       ptr += n;
       return *this;
     }

     template <typename Distance>
     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE self_type operator-(Distance n) const
     {
       self_type retval(ptr - n);
       return retval;
     }

     template <typename Distance>
     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE self_type& operator-=(Distance n)
     {
       ptr -= n;
       return *this;
     }

     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE difference_type operator-(self_type other) const
     {
       return ptr - other.ptr;
     }

     template <typename Distance>
     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE reference operator[](Distance n) const
     {
       return Reference(ptr + n);
     }

     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE bool operator==(const self_type& rhs)
     {
       return (ptr == rhs.ptr);
     }

     _CCCL_HOST_DEVICE _CCCL_FORCEINLINE bool operator!=(const self_type& rhs)
     {
       return (ptr != rhs.ptr);
     }

   #if !_CCCL_COMPILER(NVRTC)
     friend ::std::ostream& operator<<(::std::ostream& os, const self_type& itr)
     {
       return os;
     }
   #endif // !_CCCL_COMPILER(NVRTC)
   };

   CUB_NAMESPACE_END

