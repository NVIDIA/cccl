cub\/block\/block\_histogram.cuh
================================

File members: :ref:`cub\/block\/block\_histogram.cuh <block__histogram_8cuh>`

.. code-block:: c++

   /******************************************************************************
    * Copyright (c) 2011, Duane Merrill.  All rights reserved.
    * Copyright (c) 2011-2018, NVIDIA CORPORATION.  All rights reserved.
    *
    * Redistribution and use in source and binary forms, with or without
    * modification, are permitted provided that the following conditions are met:
    *     * Redistributions of source code must retain the above copyright
    *       notice, this list of conditions and the following disclaimer.
    *     * Redistributions in binary form must reproduce the above copyright
    *       notice, this list of conditions and the following disclaimer in the
    *       documentation and/or other materials provided with the distribution.
    *     * Neither the name of the NVIDIA CORPORATION nor the
    *       names of its contributors may be used to endorse or promote products
    *       derived from this software without specific prior written permission.
    *
    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    * DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
    * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    *
    ******************************************************************************/

   #pragma once

   #include <cub/config.cuh>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header

   #include <cub/block/specializations/block_histogram_atomic.cuh>
   #include <cub/block/specializations/block_histogram_sort.cuh>
   #include <cub/util_ptx.cuh>

   #include <cuda/std/type_traits>

   CUB_NAMESPACE_BEGIN

   enum BlockHistogramAlgorithm
   {

     BLOCK_HISTO_SORT,

     BLOCK_HISTO_ATOMIC,
   };

   template <typename T,
             int BLOCK_DIM_X,
             int ITEMS_PER_THREAD,
             int BINS,
             BlockHistogramAlgorithm ALGORITHM = BLOCK_HISTO_SORT,
             int BLOCK_DIM_Y                   = 1,
             int BLOCK_DIM_Z                   = 1>
   class BlockHistogram
   {
   private:
     enum
     {
       BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,
     };

     using InternalBlockHistogram =
       ::cuda::std::_If<ALGORITHM == BLOCK_HISTO_SORT,
                        detail::BlockHistogramSort<T, BLOCK_DIM_X, ITEMS_PER_THREAD, BINS, BLOCK_DIM_Y, BLOCK_DIM_Z>,
                        detail::BlockHistogramAtomic<BINS>>;

     using _TempStorage = typename InternalBlockHistogram::TempStorage;

     _TempStorage& temp_storage;

     unsigned int linear_tid;

     _CCCL_DEVICE _CCCL_FORCEINLINE _TempStorage& PrivateStorage()
     {
       __shared__ _TempStorage private_storage;
       return private_storage;
     }

   public:
     struct TempStorage : Uninitialized<_TempStorage>
     {};

     _CCCL_DEVICE _CCCL_FORCEINLINE BlockHistogram()
         : temp_storage(PrivateStorage())
         , linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
     {}

     _CCCL_DEVICE _CCCL_FORCEINLINE BlockHistogram(TempStorage& temp_storage)
         : temp_storage(temp_storage.Alias())
         , linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
     {}

     template <typename CounterT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void InitHistogram(CounterT histogram[BINS])
     {
       // Initialize histogram bin counts to zeros
       int histo_offset = 0;

       _CCCL_PRAGMA_UNROLL_FULL()
       for (; histo_offset + BLOCK_THREADS <= BINS; histo_offset += BLOCK_THREADS)
       {
         histogram[histo_offset + linear_tid] = 0;
       }
       // Finish up with guarded initialization if necessary
       if ((BINS % BLOCK_THREADS != 0) && (histo_offset + linear_tid < BINS))
       {
         histogram[histo_offset + linear_tid] = 0;
       }
     }

     template <typename CounterT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void Histogram(T (&items)[ITEMS_PER_THREAD], CounterT histogram[BINS])
     {
       // Initialize histogram bin counts to zeros
       InitHistogram(histogram);

       __syncthreads();

       // Composite the histogram
       InternalBlockHistogram(temp_storage).Composite(items, histogram);
     }

     template <typename CounterT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void Composite(T (&items)[ITEMS_PER_THREAD], CounterT histogram[BINS])
     {
       InternalBlockHistogram(temp_storage).Composite(items, histogram);
     }
   };

   CUB_NAMESPACE_END

