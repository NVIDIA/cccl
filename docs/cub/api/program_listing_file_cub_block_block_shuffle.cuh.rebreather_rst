cub\/block\/block\_shuffle.cuh
==============================

File members: :ref:`cub\/block\/block\_shuffle.cuh <block__shuffle_8cuh>`

.. code-block:: c++

   /******************************************************************************
    * Copyright (c) 2011, Duane Merrill.  All rights reserved.
    * Copyright (c) 2011-2018, NVIDIA CORPORATION.  All rights reserved.
    *
    * Redistribution and use in source and binary forms, with or without
    * modification, are permitted provided that the following conditions are met:
    *     * Redistributions of source code must retain the above copyright
    *       notice, this list of conditions and the following disclaimer.
    *     * Redistributions in binary form must reproduce the above copyright
    *       notice, this list of conditions and the following disclaimer in the
    *       documentation and/or other materials provided with the distribution.
    *     * Neither the name of the NVIDIA CORPORATION nor the
    *       names of its contributors may be used to endorse or promote products
    *       derived from this software without specific prior written permission.
    *
    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    * DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
    * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    *
    ******************************************************************************/

   #pragma once

   #include <cub/config.cuh>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header

   #include <cub/util_ptx.cuh>
   #include <cub/util_type.cuh>

   CUB_NAMESPACE_BEGIN

   template <typename T, int BLOCK_DIM_X, int BLOCK_DIM_Y = 1, int BLOCK_DIM_Z = 1>
   class BlockShuffle
   {
   private:
     enum
     {
       BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,

       LOG_WARP_THREADS = detail::log2_warp_threads,
       WARP_THREADS     = 1 << LOG_WARP_THREADS,
       WARPS            = (BLOCK_THREADS + WARP_THREADS - 1) / WARP_THREADS,
     };

     using _TempStorage = T[BLOCK_THREADS];

   public:
     struct TempStorage : Uninitialized<_TempStorage>
     {};

   private:
     _TempStorage& temp_storage;

     unsigned int linear_tid;

     _CCCL_DEVICE _CCCL_FORCEINLINE _TempStorage& PrivateStorage()
     {
       __shared__ _TempStorage private_storage;
       return private_storage;
     }

   public:

     _CCCL_DEVICE _CCCL_FORCEINLINE BlockShuffle()
         : temp_storage(PrivateStorage())
         , linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
     {}

     _CCCL_DEVICE _CCCL_FORCEINLINE BlockShuffle(TempStorage& temp_storage)
         : temp_storage(temp_storage.Alias())
         , linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
     {}

     _CCCL_DEVICE _CCCL_FORCEINLINE void Offset(T input, T& output, int distance = 1)
     {
       temp_storage[linear_tid] = input;

       __syncthreads();

       const int offset_tid = static_cast<int>(linear_tid) + distance;
       if ((offset_tid >= 0) && (offset_tid < BLOCK_THREADS))
       {
         output = temp_storage[static_cast<size_t>(offset_tid)];
       }
     }

     _CCCL_DEVICE _CCCL_FORCEINLINE void Rotate(T input, T& output, unsigned int distance = 1)
     {
       temp_storage[linear_tid] = input;

       __syncthreads();

       unsigned int offset = linear_tid + distance;
       if (offset >= BLOCK_THREADS)
       {
         offset -= BLOCK_THREADS;
       }

       output = temp_storage[offset];
     }

     template <int ITEMS_PER_THREAD>
     _CCCL_DEVICE _CCCL_FORCEINLINE void Up(T (&input)[ITEMS_PER_THREAD], T (&prev)[ITEMS_PER_THREAD])
     {
       temp_storage[linear_tid] = input[ITEMS_PER_THREAD - 1];

       __syncthreads();

       _CCCL_PRAGMA_UNROLL_FULL()
       for (int ITEM = ITEMS_PER_THREAD - 1; ITEM > 0; --ITEM)
       {
         prev[ITEM] = input[ITEM - 1];
       }

       if (linear_tid > 0)
       {
         prev[0] = temp_storage[linear_tid - 1];
       }
     }

     template <int ITEMS_PER_THREAD>
     _CCCL_DEVICE _CCCL_FORCEINLINE void Up(T (&input)[ITEMS_PER_THREAD], T (&prev)[ITEMS_PER_THREAD], T& block_suffix)
     {
       Up(input, prev);
       block_suffix = temp_storage[BLOCK_THREADS - 1];
     }

     template <int ITEMS_PER_THREAD>
     _CCCL_DEVICE _CCCL_FORCEINLINE void Down(T (&input)[ITEMS_PER_THREAD], T (&prev)[ITEMS_PER_THREAD])
     {
       temp_storage[linear_tid] = input[0];

       __syncthreads();

       _CCCL_PRAGMA_UNROLL_FULL()
       for (int ITEM = 0; ITEM < ITEMS_PER_THREAD - 1; ITEM++)
       {
         prev[ITEM] = input[ITEM + 1];
       }

       if (linear_tid < BLOCK_THREADS - 1)
       {
         prev[ITEMS_PER_THREAD - 1] = temp_storage[linear_tid + 1];
       }
     }

     template <int ITEMS_PER_THREAD>
     _CCCL_DEVICE _CCCL_FORCEINLINE void Down(T (&input)[ITEMS_PER_THREAD], T (&prev)[ITEMS_PER_THREAD], T& block_prefix)
     {
       Down(input, prev);
       block_prefix = temp_storage[0];
     }

   };

   CUB_NAMESPACE_END

