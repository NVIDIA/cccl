cub\/warp\/warp\_load.cuh
=========================

File members: :ref:`cub\/warp\/warp\_load.cuh <warp__load_8cuh>`

.. code-block:: c++

   /******************************************************************************
    * Copyright (c) 2011-2021, NVIDIA CORPORATION.  All rights reserved.
    *
    * Redistribution and use in source and binary forms, with or without
    * modification, are permitted provided that the following conditions are met:
    *     * Redistributions of source code must retain the above copyright
    *       notice, this list of conditions and the following disclaimer.
    *     * Redistributions in binary form must reproduce the above copyright
    *       notice, this list of conditions and the following disclaimer in the
    *       documentation and/or other materials provided with the distribution.
    *     * Neither the name of the NVIDIA CORPORATION nor the
    *       names of its contributors may be used to endorse or promote products
    *       derived from this software without specific prior written permission.
    *
    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    * DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
    * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    *
    ******************************************************************************/

   #pragma once

   #include <cub/config.cuh>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header

   #include <cub/block/block_load.cuh>
   #include <cub/iterator/cache_modified_input_iterator.cuh>
   #include <cub/util_ptx.cuh>
   #include <cub/util_type.cuh>
   #include <cub/warp/warp_exchange.cuh>

   #include <cuda/ptx>

   CUB_NAMESPACE_BEGIN

   enum WarpLoadAlgorithm
   {
     WARP_LOAD_DIRECT,

     WARP_LOAD_STRIPED,

     WARP_LOAD_VECTORIZE,

     WARP_LOAD_TRANSPOSE
   };

   template <typename InputT,
             int ITEMS_PER_THREAD,
             WarpLoadAlgorithm ALGORITHM = WARP_LOAD_DIRECT,
             int LOGICAL_WARP_THREADS    = detail::warp_threads>
   class WarpLoad
   {
     static constexpr bool IS_ARCH_WARP = LOGICAL_WARP_THREADS == detail::warp_threads;

     static_assert(PowerOfTwo<LOGICAL_WARP_THREADS>::VALUE, "LOGICAL_WARP_THREADS must be a power of two");

   private:
     /*****************************************************************************
      * Algorithmic variants
      ****************************************************************************/

     template <WarpLoadAlgorithm _POLICY, int DUMMY>
     struct LoadInternal;

     template <int DUMMY>
     struct LoadInternal<WARP_LOAD_DIRECT, DUMMY>
     {
       using TempStorage = NullType;

       int linear_tid;

       _CCCL_DEVICE _CCCL_FORCEINLINE LoadInternal(TempStorage& /*temp_storage*/, int linear_tid)
           : linear_tid(linear_tid)
       {}

       template <typename InputIteratorT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD])
       {
         LoadDirectBlocked(linear_tid, block_itr, items);
       }

       template <typename InputIteratorT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void
       Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD], int valid_items)
       {
         LoadDirectBlocked(linear_tid, block_itr, items, valid_items);
       }

       template <typename InputIteratorT, typename DefaultT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void
       Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD], int valid_items, DefaultT oob_default)
       {
         LoadDirectBlocked(linear_tid, block_itr, items, valid_items, oob_default);
       }
     };

     template <int DUMMY>
     struct LoadInternal<WARP_LOAD_STRIPED, DUMMY>
     {
       using TempStorage = NullType;

       int linear_tid;

       _CCCL_DEVICE _CCCL_FORCEINLINE LoadInternal(TempStorage& /*temp_storage*/, int linear_tid)
           : linear_tid(linear_tid)
       {}

       template <typename InputIteratorT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD])
       {
         LoadDirectStriped<LOGICAL_WARP_THREADS>(linear_tid, block_itr, items);
       }

       template <typename InputIteratorT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void
       Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD], int valid_items)
       {
         LoadDirectStriped<LOGICAL_WARP_THREADS>(linear_tid, block_itr, items, valid_items);
       }

       template <typename InputIteratorT, typename DefaultT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void
       Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD], int valid_items, DefaultT oob_default)
       {
         LoadDirectStriped<LOGICAL_WARP_THREADS>(linear_tid, block_itr, items, valid_items, oob_default);
       }
     };

     template <int DUMMY>
     struct LoadInternal<WARP_LOAD_VECTORIZE, DUMMY>
     {
       using TempStorage = NullType;

       int linear_tid;

       _CCCL_DEVICE _CCCL_FORCEINLINE LoadInternal(TempStorage& /*temp_storage*/, int linear_tid)
           : linear_tid(linear_tid)
       {}

       _CCCL_DEVICE _CCCL_FORCEINLINE void Load(InputT* block_ptr, InputT (&items)[ITEMS_PER_THREAD])
       {
         InternalLoadDirectBlockedVectorized<LOAD_DEFAULT>(linear_tid, block_ptr, items);
       }

       _CCCL_DEVICE _CCCL_FORCEINLINE void Load(const InputT* block_ptr, InputT (&items)[ITEMS_PER_THREAD])
       {
         InternalLoadDirectBlockedVectorized<LOAD_DEFAULT>(linear_tid, block_ptr, items);
       }

       template <CacheLoadModifier MODIFIER, typename ValueType, typename OffsetT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void
       Load(CacheModifiedInputIterator<MODIFIER, ValueType, OffsetT> block_itr, InputT (&items)[ITEMS_PER_THREAD])
       {
         InternalLoadDirectBlockedVectorized<MODIFIER>(linear_tid, block_itr.ptr, items);
       }

       template <typename _InputIteratorT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void Load(_InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD])
       {
         LoadDirectBlocked(linear_tid, block_itr, items);
       }

       template <typename InputIteratorT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void
       Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD], int valid_items)
       {
         LoadDirectBlocked(linear_tid, block_itr, items, valid_items);
       }

       template <typename InputIteratorT, typename DefaultT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void
       Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD], int valid_items, DefaultT oob_default)
       {
         LoadDirectBlocked(linear_tid, block_itr, items, valid_items, oob_default);
       }
     };

     template <int DUMMY>
     struct LoadInternal<WARP_LOAD_TRANSPOSE, DUMMY>
     {
       using WarpExchangeT = WarpExchange<InputT, ITEMS_PER_THREAD, LOGICAL_WARP_THREADS>;

       struct _TempStorage : WarpExchangeT::TempStorage
       {};

       struct TempStorage : Uninitialized<_TempStorage>
       {};

       _TempStorage& temp_storage;

       int linear_tid;

       _CCCL_DEVICE _CCCL_FORCEINLINE LoadInternal(TempStorage& temp_storage, int linear_tid)
           : temp_storage(temp_storage.Alias())
           , linear_tid(linear_tid)
       {}

       template <typename InputIteratorT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD])
       {
         LoadDirectStriped<LOGICAL_WARP_THREADS>(linear_tid, block_itr, items);
         WarpExchangeT(temp_storage).StripedToBlocked(items, items);
       }

       template <typename InputIteratorT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void
       Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD], int valid_items)
       {
         LoadDirectStriped<LOGICAL_WARP_THREADS>(linear_tid, block_itr, items, valid_items);
         WarpExchangeT(temp_storage).StripedToBlocked(items, items);
       }

       template <typename InputIteratorT, typename DefaultT>
       _CCCL_DEVICE _CCCL_FORCEINLINE void
       Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD], int valid_items, DefaultT oob_default)
       {
         LoadDirectStriped<LOGICAL_WARP_THREADS>(linear_tid, block_itr, items, valid_items, oob_default);
         WarpExchangeT(temp_storage).StripedToBlocked(items, items);
       }
     };

     /*****************************************************************************
      * Type definitions
      ****************************************************************************/

     using InternalLoad = LoadInternal<ALGORITHM, 0>;

     using _TempStorage = typename InternalLoad::TempStorage;

     /*****************************************************************************
      * Utility methods
      ****************************************************************************/

     _CCCL_DEVICE _CCCL_FORCEINLINE _TempStorage& PrivateStorage()
     {
       __shared__ _TempStorage private_storage;
       return private_storage;
     }

     /*****************************************************************************
      * Thread fields
      ****************************************************************************/

     _TempStorage& temp_storage;

     int linear_tid;

   public:
     struct TempStorage : Uninitialized<_TempStorage>
     {};

     _CCCL_DEVICE _CCCL_FORCEINLINE WarpLoad()
         : temp_storage(PrivateStorage())
         , linear_tid(
             IS_ARCH_WARP ? ::cuda::ptx::get_sreg_laneid() : (::cuda::ptx::get_sreg_laneid() % LOGICAL_WARP_THREADS))
     {}

     _CCCL_DEVICE _CCCL_FORCEINLINE WarpLoad(TempStorage& temp_storage)
         : temp_storage(temp_storage.Alias())
         , linear_tid(
             IS_ARCH_WARP ? ::cuda::ptx::get_sreg_laneid() : (::cuda::ptx::get_sreg_laneid() % LOGICAL_WARP_THREADS))
     {}

     template <typename InputIteratorT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD])
     {
       InternalLoad(temp_storage, linear_tid).Load(block_itr, items);
     }

     template <typename InputIteratorT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD], int valid_items)
     {
       InternalLoad(temp_storage, linear_tid).Load(block_itr, items, valid_items);
     }

     template <typename InputIteratorT, typename DefaultT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void
     Load(InputIteratorT block_itr, InputT (&items)[ITEMS_PER_THREAD], int valid_items, DefaultT oob_default)
     {
       InternalLoad(temp_storage, linear_tid).Load(block_itr, items, valid_items, oob_default);
     }

   };

   CUB_NAMESPACE_END

