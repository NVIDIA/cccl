cub\/block\/block\_adjacent\_difference.cuh
===========================================

File members: :ref:`cub\/block\/block\_adjacent\_difference.cuh <block__adjacent__difference_8cuh>`

.. code-block:: c++

   /******************************************************************************
    * Copyright (c) 2011, Duane Merrill.  All rights reserved.
    * Copyright (c) 2011-2021, NVIDIA CORPORATION.  All rights reserved.
    *
    * Redistribution and use in source and binary forms, with or without
    * modification, are permitted provided that the following conditions are met:
    *     * Redistributions of source code must retain the above copyright
    *       notice, this list of conditions and the following disclaimer.
    *     * Redistributions in binary form must reproduce the above copyright
    *       notice, this list of conditions and the following disclaimer in the
    *       documentation and/or other materials provided with the distribution.
    *     * Neither the name of the NVIDIA CORPORATION nor the
    *       names of its contributors may be used to endorse or promote products
    *       derived from this software without specific prior written permission.
    *
    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    * DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
    * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    *
    ******************************************************************************/

   #pragma once

   #include <cub/config.cuh>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header

   #include <cub/util_ptx.cuh>
   #include <cub/util_type.cuh>

   CUB_NAMESPACE_BEGIN

   template <typename T, int BLOCK_DIM_X, int BLOCK_DIM_Y = 1, int BLOCK_DIM_Z = 1>
   class BlockAdjacentDifference
   {
   private:
     static constexpr int BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z;

     struct _TempStorage
     {
       T first_items[BLOCK_THREADS];
       T last_items[BLOCK_THREADS];
     };

     _CCCL_DEVICE _CCCL_FORCEINLINE _TempStorage& PrivateStorage()
     {
       __shared__ _TempStorage private_storage;
       return private_storage;
     }

     template <typename FlagOp, bool HAS_PARAM = BinaryOpHasIdxParam<T, FlagOp>::value>
     struct ApplyOp
     {
       // Apply flag operator
       static _CCCL_DEVICE _CCCL_FORCEINLINE T FlagT(FlagOp flag_op, const T& a, const T& b, int idx)
       {
         return flag_op(b, a, idx);
       }
     };

     template <typename FlagOp>
     struct ApplyOp<FlagOp, false>
     {
       // Apply flag operator
       static _CCCL_DEVICE _CCCL_FORCEINLINE T FlagT(FlagOp flag_op, const T& a, const T& b, int /*idx*/)
       {
         return flag_op(b, a);
       }
     };

     struct Iterate
     {
       template <int ITEMS_PER_THREAD, typename FlagT, typename FlagOp>
       static _CCCL_DEVICE _CCCL_FORCEINLINE void FlagHeads(
         int linear_tid,
         FlagT (&flags)[ITEMS_PER_THREAD],
         T (&input)[ITEMS_PER_THREAD],
         T (&preds)[ITEMS_PER_THREAD],
         FlagOp flag_op)
       {
         _CCCL_PRAGMA_UNROLL_FULL()
         for (int i = 1; i < ITEMS_PER_THREAD; ++i)
         {
           preds[i] = input[i - 1];
           flags[i] = ApplyOp<FlagOp>::FlagT(flag_op, preds[i], input[i], (linear_tid * ITEMS_PER_THREAD) + i);
         }
       }

       template <int ITEMS_PER_THREAD, typename FlagT, typename FlagOp>
       static _CCCL_DEVICE _CCCL_FORCEINLINE void
       FlagTails(int linear_tid, FlagT (&flags)[ITEMS_PER_THREAD], T (&input)[ITEMS_PER_THREAD], FlagOp flag_op)
       {
         _CCCL_PRAGMA_UNROLL_FULL()
         for (int i = 0; i < ITEMS_PER_THREAD - 1; ++i)
         {
           flags[i] = ApplyOp<FlagOp>::FlagT(flag_op, input[i], input[i + 1], (linear_tid * ITEMS_PER_THREAD) + i + 1);
         }
       }
     };

     _TempStorage& temp_storage;

     unsigned int linear_tid;

   public:
     struct TempStorage : Uninitialized<_TempStorage>
     {};

     _CCCL_DEVICE _CCCL_FORCEINLINE BlockAdjacentDifference()
         : temp_storage(PrivateStorage())
         , linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
     {}

     _CCCL_DEVICE _CCCL_FORCEINLINE BlockAdjacentDifference(TempStorage& temp_storage)
         : temp_storage(temp_storage.Alias())
         , linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
     {}

     template <int ITEMS_PER_THREAD, typename OutputType, typename DifferenceOpT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void
     SubtractLeft(T (&input)[ITEMS_PER_THREAD], OutputType (&output)[ITEMS_PER_THREAD], DifferenceOpT difference_op)
     {
       // Share last item
       temp_storage.last_items[linear_tid] = input[ITEMS_PER_THREAD - 1];

       __syncthreads();

       _CCCL_PRAGMA_UNROLL_FULL()
       for (int item = ITEMS_PER_THREAD - 1; item > 0; item--)
       {
         output[item] = difference_op(input[item], input[item - 1]);
       }

       if (linear_tid == 0)
       {
         output[0] = input[0];
       }
       else
       {
         output[0] = difference_op(input[0], temp_storage.last_items[linear_tid - 1]);
       }
     }

     template <int ITEMS_PER_THREAD, typename OutputT, typename DifferenceOpT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void SubtractLeft(
       T (&input)[ITEMS_PER_THREAD],
       OutputT (&output)[ITEMS_PER_THREAD],
       DifferenceOpT difference_op,
       T tile_predecessor_item)
     {
       // Share last item
       temp_storage.last_items[linear_tid] = input[ITEMS_PER_THREAD - 1];

       __syncthreads();

       _CCCL_PRAGMA_UNROLL_FULL()
       for (int item = ITEMS_PER_THREAD - 1; item > 0; item--)
       {
         output[item] = difference_op(input[item], input[item - 1]);
       }

       // Set flag for first thread-item
       if (linear_tid == 0)
       {
         output[0] = difference_op(input[0], tile_predecessor_item);
       }
       else
       {
         output[0] = difference_op(input[0], temp_storage.last_items[linear_tid - 1]);
       }
     }

     template <int ITEMS_PER_THREAD, typename OutputType, typename DifferenceOpT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void SubtractLeftPartialTile(
       T (&input)[ITEMS_PER_THREAD], OutputType (&output)[ITEMS_PER_THREAD], DifferenceOpT difference_op, int valid_items)
     {
       // Share last item
       temp_storage.last_items[linear_tid] = input[ITEMS_PER_THREAD - 1];

       __syncthreads();

       if ((linear_tid + 1) * ITEMS_PER_THREAD <= valid_items)
       {
         _CCCL_PRAGMA_UNROLL_FULL()
         for (int item = ITEMS_PER_THREAD - 1; item > 0; item--)
         {
           output[item] = difference_op(input[item], input[item - 1]);
         }
       }
       else
       {
         _CCCL_PRAGMA_UNROLL_FULL()
         for (int item = ITEMS_PER_THREAD - 1; item > 0; item--)
         {
           const int idx = linear_tid * ITEMS_PER_THREAD + item;

           if (idx < valid_items)
           {
             output[item] = difference_op(input[item], input[item - 1]);
           }
           else
           {
             output[item] = input[item];
           }
         }
       }

       if (linear_tid == 0 || valid_items <= linear_tid * ITEMS_PER_THREAD)
       {
         output[0] = input[0];
       }
       else
       {
         output[0] = difference_op(input[0], temp_storage.last_items[linear_tid - 1]);
       }
     }

     template <int ITEMS_PER_THREAD, typename OutputType, typename DifferenceOpT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void SubtractLeftPartialTile(
       T (&input)[ITEMS_PER_THREAD],
       OutputType (&output)[ITEMS_PER_THREAD],
       DifferenceOpT difference_op,
       int valid_items,
       T tile_predecessor_item)
     {
       // Share last item
       temp_storage.last_items[linear_tid] = input[ITEMS_PER_THREAD - 1];

       __syncthreads();

       if ((linear_tid + 1) * ITEMS_PER_THREAD <= valid_items)
       {
         _CCCL_PRAGMA_UNROLL_FULL()
         for (int item = ITEMS_PER_THREAD - 1; item > 0; item--)
         {
           output[item] = difference_op(input[item], input[item - 1]);
         }
       }
       else
       {
         _CCCL_PRAGMA_UNROLL_FULL()
         for (int item = ITEMS_PER_THREAD - 1; item > 0; item--)
         {
           const int idx = linear_tid * ITEMS_PER_THREAD + item;

           if (idx < valid_items)
           {
             output[item] = difference_op(input[item], input[item - 1]);
           }
           else
           {
             output[item] = input[item];
           }
         }
       }

       if (valid_items <= linear_tid * ITEMS_PER_THREAD)
       {
         output[0] = input[0];
       }
       else if (linear_tid == 0)
       {
         output[0] = difference_op(input[0], tile_predecessor_item);
       }
       else
       {
         output[0] = difference_op(input[0], temp_storage.last_items[linear_tid - 1]);
       }
     }

     template <int ITEMS_PER_THREAD, typename OutputT, typename DifferenceOpT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void
     SubtractRight(T (&input)[ITEMS_PER_THREAD], OutputT (&output)[ITEMS_PER_THREAD], DifferenceOpT difference_op)
     {
       // Share first item
       temp_storage.first_items[linear_tid] = input[0];

       __syncthreads();

       _CCCL_PRAGMA_UNROLL_FULL()
       for (int item = 0; item < ITEMS_PER_THREAD - 1; item++)
       {
         output[item] = difference_op(input[item], input[item + 1]);
       }

       if (linear_tid == BLOCK_THREADS - 1)
       {
         output[ITEMS_PER_THREAD - 1] = input[ITEMS_PER_THREAD - 1];
       }
       else
       {
         output[ITEMS_PER_THREAD - 1] =
           difference_op(input[ITEMS_PER_THREAD - 1], temp_storage.first_items[linear_tid + 1]);
       }
     }

     template <int ITEMS_PER_THREAD, typename OutputT, typename DifferenceOpT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void SubtractRight(
       T (&input)[ITEMS_PER_THREAD],
       OutputT (&output)[ITEMS_PER_THREAD],
       DifferenceOpT difference_op,
       T tile_successor_item)
     {
       // Share first item
       temp_storage.first_items[linear_tid] = input[0];

       __syncthreads();

       // Set flag for last thread-item
       T successor_item = (linear_tid == BLOCK_THREADS - 1)
                          ? tile_successor_item // Last thread
                          : temp_storage.first_items[linear_tid + 1];

       _CCCL_PRAGMA_UNROLL_FULL()
       for (int item = 0; item < ITEMS_PER_THREAD - 1; item++)
       {
         output[item] = difference_op(input[item], input[item + 1]);
       }

       output[ITEMS_PER_THREAD - 1] = difference_op(input[ITEMS_PER_THREAD - 1], successor_item);
     }

     template <int ITEMS_PER_THREAD, typename OutputT, typename DifferenceOpT>
     _CCCL_DEVICE _CCCL_FORCEINLINE void SubtractRightPartialTile(
       T (&input)[ITEMS_PER_THREAD], OutputT (&output)[ITEMS_PER_THREAD], DifferenceOpT difference_op, int valid_items)
     {
       // Share first item
       temp_storage.first_items[linear_tid] = input[0];

       __syncthreads();

       if ((linear_tid + 1) * ITEMS_PER_THREAD < valid_items)
       {
         _CCCL_PRAGMA_UNROLL_FULL()
         for (int item = 0; item < ITEMS_PER_THREAD - 1; item++)
         {
           output[item] = difference_op(input[item], input[item + 1]);
         }

         output[ITEMS_PER_THREAD - 1] =
           difference_op(input[ITEMS_PER_THREAD - 1], temp_storage.first_items[linear_tid + 1]);
       }
       else
       {
         _CCCL_PRAGMA_UNROLL_FULL()
         for (int item = 0; item < ITEMS_PER_THREAD; item++)
         {
           const int idx = linear_tid * ITEMS_PER_THREAD + item;

           // Right element of input[valid_items - 1] is out of bounds.
           // According to the API it's copied into output array
           // without modification.
           if (idx < valid_items - 1)
           {
             output[item] = difference_op(input[item], input[item + 1]);
           }
           else
           {
             output[item] = input[item];
           }
         }
       }
     }
   };

   CUB_NAMESPACE_END

