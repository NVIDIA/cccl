cub\/device\/device\_copy.cuh
=============================

File members: :ref:`cub\/device\/device\_copy.cuh <device__copy_8cuh>`

.. code-block:: c++

   /******************************************************************************
    * Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
    *
    * Redistribution and use in source and binary forms, with or without
    * modification, are permitted provided that the following conditions are met:
    *     * Redistributions of source code must retain the above copyright
    *       notice, this list of conditions and the following disclaimer.
    *     * Redistributions in binary form must reproduce the above copyright
    *       notice, this list of conditions and the following disclaimer in the
    *       documentation and/or other materials provided with the distribution.
    *     * Neither the name of the NVIDIA CORPORATION nor the
    *       names of its contributors may be used to endorse or promote products
    *       derived from this software without specific prior written permission.
    *
    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    * DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
    * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    *
    ******************************************************************************/

   #pragma once

   #include <cub/config.cuh>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header

   #include <cub/device/dispatch/dispatch_batch_memcpy.cuh>
   #include <cub/device/dispatch/tuning/tuning_batch_memcpy.cuh>

   #include <thrust/system/cuda/detail/core/triple_chevron_launch.h>

   #include <cuda/std/cstdint>

   CUB_NAMESPACE_BEGIN

   struct DeviceCopy
   {
     template <typename InputIt, typename OutputIt, typename SizeIteratorT>
     CUB_RUNTIME_FUNCTION static cudaError_t Batched(
       void* d_temp_storage,
       size_t& temp_storage_bytes,
       InputIt input_it,
       OutputIt output_it,
       SizeIteratorT sizes,
       ::cuda::std::int64_t num_ranges,
       cudaStream_t stream = 0)
     {
       _CCCL_NVTX_RANGE_SCOPE_IF(d_temp_storage, "cub::DeviceCopy::Batched");

       // Integer type large enough to hold any offset in [0, num_thread_blocks_launched), where a safe
       // upper bound on num_thread_blocks_launched can be assumed to be given by
       // IDIV_CEIL(num_ranges, 64)
       using BlockOffsetT = uint32_t;

       return detail::DispatchBatchMemcpy<InputIt, OutputIt, SizeIteratorT, BlockOffsetT, CopyAlg::Copy>::Dispatch(
         d_temp_storage, temp_storage_bytes, input_it, output_it, sizes, num_ranges, stream);
     }
   };

   CUB_NAMESPACE_END

