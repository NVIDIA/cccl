cub\/device\/device\_adjacent\_difference.cuh
=============================================

File members: :ref:`cub\/device\/device\_adjacent\_difference.cuh <device__adjacent__difference_8cuh>`

.. code-block:: c++

   /******************************************************************************
    * Copyright (c) 2011-2021, NVIDIA CORPORATION.  All rights reserved.
    *
    * Redistribution and use in source and binary forms, with or without
    * modification, are permitted provided that the following conditions are met:
    *     * Redistributions of source code must retain the above copyright
    *       notice, this list of conditions and the following disclaimer.
    *     * Redistributions in binary form must reproduce the above copyright
    *       notice, this list of conditions and the following disclaimer in the
    *       documentation and/or other materials provided with the distribution.
    *     * Neither the name of the NVIDIA CORPORATION nor the
    *       names of its contributors may be used to endorse or promote products
    *       derived from this software without specific prior written permission.
    *
    * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    * DISCLAIMED. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR ANY
    * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    *
    ******************************************************************************/

   #pragma once

   #include <cub/config.cuh>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header

   #include <cub/detail/choose_offset.cuh>
   #include <cub/detail/type_traits.cuh>
   #include <cub/device/dispatch/dispatch_adjacent_difference.cuh>
   #include <cub/util_namespace.cuh>

   #include <cuda/std/cstdint>

   CUB_NAMESPACE_BEGIN

   struct DeviceAdjacentDifference
   {
   private:
     template <MayAlias AliasOpt,
               ReadOption ReadOpt,
               typename NumItemsT,
               typename InputIteratorT,
               typename OutputIteratorT,
               typename DifferenceOpT>
     static CUB_RUNTIME_FUNCTION cudaError_t AdjacentDifference(
       void* d_temp_storage,
       size_t& temp_storage_bytes,
       InputIteratorT d_input,
       OutputIteratorT d_output,
       NumItemsT num_items,
       DifferenceOpT difference_op,
       cudaStream_t stream)
     {
       using OffsetT = detail::choose_offset_t<NumItemsT>;

       using DispatchT =
         DispatchAdjacentDifference<InputIteratorT, OutputIteratorT, DifferenceOpT, OffsetT, AliasOpt, ReadOpt>;

       return DispatchT::Dispatch(
         d_temp_storage, temp_storage_bytes, d_input, d_output, static_cast<OffsetT>(num_items), difference_op, stream);
     }

   public:
     template <typename InputIteratorT,
               typename OutputIteratorT,
               typename DifferenceOpT = ::cuda::std::minus<>,
               typename NumItemsT     = uint32_t>
     static CUB_RUNTIME_FUNCTION cudaError_t SubtractLeftCopy(
       void* d_temp_storage,
       size_t& temp_storage_bytes,
       InputIteratorT d_input,
       OutputIteratorT d_output,
       NumItemsT num_items,
       DifferenceOpT difference_op = {},
       cudaStream_t stream         = 0)
     {
       _CCCL_NVTX_RANGE_SCOPE_IF(d_temp_storage, "cub::DeviceAdjacentDifference::SubtractLeftCopy");

       return AdjacentDifference<MayAlias::No, ReadOption::Left>(
         d_temp_storage, temp_storage_bytes, d_input, d_output, num_items, difference_op, stream);
     }

     template <typename RandomAccessIteratorT, typename DifferenceOpT = ::cuda::std::minus<>, typename NumItemsT = uint32_t>
     static CUB_RUNTIME_FUNCTION cudaError_t SubtractLeft(
       void* d_temp_storage,
       size_t& temp_storage_bytes,
       RandomAccessIteratorT d_input,
       NumItemsT num_items,
       DifferenceOpT difference_op = {},
       cudaStream_t stream         = 0)
     {
       _CCCL_NVTX_RANGE_SCOPE_IF(d_temp_storage, "cub::DeviceAdjacentDifference::SubtractLeft");

       return AdjacentDifference<MayAlias::Yes, ReadOption::Left>(
         d_temp_storage, temp_storage_bytes, d_input, d_input, num_items, difference_op, stream);
     }

     template <typename InputIteratorT,
               typename OutputIteratorT,
               typename DifferenceOpT = ::cuda::std::minus<>,
               typename NumItemsT     = uint32_t>
     static CUB_RUNTIME_FUNCTION cudaError_t SubtractRightCopy(
       void* d_temp_storage,
       size_t& temp_storage_bytes,
       InputIteratorT d_input,
       OutputIteratorT d_output,
       NumItemsT num_items,
       DifferenceOpT difference_op = {},
       cudaStream_t stream         = 0)
     {
       _CCCL_NVTX_RANGE_SCOPE_IF(d_temp_storage, "cub::DeviceAdjacentDifference::SubtractRightCopy");

       return AdjacentDifference<MayAlias::No, ReadOption::Right>(
         d_temp_storage, temp_storage_bytes, d_input, d_output, num_items, difference_op, stream);
     }

     template <typename RandomAccessIteratorT, typename DifferenceOpT = ::cuda::std::minus<>, typename NumItemsT = uint32_t>
     static CUB_RUNTIME_FUNCTION cudaError_t SubtractRight(
       void* d_temp_storage,
       size_t& temp_storage_bytes,
       RandomAccessIteratorT d_input,
       NumItemsT num_items,
       DifferenceOpT difference_op = {},
       cudaStream_t stream         = 0)
     {
       _CCCL_NVTX_RANGE_SCOPE_IF(d_temp_storage, "cub::DeviceAdjacentDifference::SubtractRight");

       return AdjacentDifference<MayAlias::Yes, ReadOption::Right>(
         d_temp_storage, temp_storage_bytes, d_input, d_input, num_items, difference_op, stream);
     }
   };

   CUB_NAMESPACE_END

