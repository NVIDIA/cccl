thrust\/system\/system\_error.h
===============================

File members: :ref:`thrust\/system\/system\_error.h <system_2system__error_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2013 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/system/error_code.h>

   #include <stdexcept>
   #include <string>

   THRUST_NAMESPACE_BEGIN

   namespace system
   {

   // [19.5.5] Class system_error

   // [19.5.5.1] Class system_error overview

   class system_error : public std::runtime_error
   {
   public:
     // [19.5.5.2] Class system_error members

     inline system_error(error_code ec, const std::string& what_arg);

     inline system_error(error_code ec, const char* what_arg);

     inline system_error(error_code ec);

     inline system_error(int ev, const error_category& ecat, const std::string& what_arg);

     inline system_error(int ev, const error_category& ecat, const char* what_arg);

     inline system_error(int ev, const error_category& ecat);

     inline virtual ~system_error() noexcept {}

     inline const error_code& code() const noexcept;

     inline const char* what() const noexcept;

   private:
     error_code m_error_code;
     mutable std::string m_what;

   }; // end system_error

   } // namespace system

   // import names into thrust::
   using system::system_error;

   THRUST_NAMESPACE_END

   #include <thrust/system/detail/system_error.inl>

