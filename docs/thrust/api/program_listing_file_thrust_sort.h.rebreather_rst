thrust\/sort.h
==============

File members: :ref:`thrust\/sort.h <sort_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2013 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/detail/execution_policy.h>

   THRUST_NAMESPACE_BEGIN

   template <typename DerivedPolicy, typename RandomAccessIterator>
   _CCCL_HOST_DEVICE void sort(const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
                               RandomAccessIterator first,
                               RandomAccessIterator last);

   template <typename RandomAccessIterator>
   void sort(RandomAccessIterator first, RandomAccessIterator last);

   template <typename DerivedPolicy, typename RandomAccessIterator, typename StrictWeakOrdering>
   _CCCL_HOST_DEVICE void
   sort(const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
        RandomAccessIterator first,
        RandomAccessIterator last,
        StrictWeakOrdering comp);

   template <typename RandomAccessIterator, typename StrictWeakOrdering>
   _CCCL_HOST_DEVICE void sort(RandomAccessIterator first, RandomAccessIterator last, StrictWeakOrdering comp);

   template <typename DerivedPolicy, typename RandomAccessIterator>
   _CCCL_HOST_DEVICE void stable_sort(const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
                                      RandomAccessIterator first,
                                      RandomAccessIterator last);

   template <typename RandomAccessIterator>
   void stable_sort(RandomAccessIterator first, RandomAccessIterator last);

   template <typename DerivedPolicy, typename RandomAccessIterator, typename StrictWeakOrdering>
   _CCCL_HOST_DEVICE void stable_sort(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     RandomAccessIterator first,
     RandomAccessIterator last,
     StrictWeakOrdering comp);

   template <typename RandomAccessIterator, typename StrictWeakOrdering>
   void stable_sort(RandomAccessIterator first, RandomAccessIterator last, StrictWeakOrdering comp);

   // Key Value //

   template <typename DerivedPolicy, typename RandomAccessIterator1, typename RandomAccessIterator2>
   _CCCL_HOST_DEVICE void sort_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     RandomAccessIterator1 keys_first,
     RandomAccessIterator1 keys_last,
     RandomAccessIterator2 values_first);

   template <typename RandomAccessIterator1, typename RandomAccessIterator2>
   void sort_by_key(RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first);

   template <typename DerivedPolicy,
             typename RandomAccessIterator1,
             typename RandomAccessIterator2,
             typename StrictWeakOrdering>
   _CCCL_HOST_DEVICE void sort_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     RandomAccessIterator1 keys_first,
     RandomAccessIterator1 keys_last,
     RandomAccessIterator2 values_first,
     StrictWeakOrdering comp);

   template <typename RandomAccessIterator1, typename RandomAccessIterator2, typename StrictWeakOrdering>
   void sort_by_key(RandomAccessIterator1 keys_first,
                    RandomAccessIterator1 keys_last,
                    RandomAccessIterator2 values_first,
                    StrictWeakOrdering comp);

   template <typename DerivedPolicy, typename RandomAccessIterator1, typename RandomAccessIterator2>
   _CCCL_HOST_DEVICE void stable_sort_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     RandomAccessIterator1 keys_first,
     RandomAccessIterator1 keys_last,
     RandomAccessIterator2 values_first);

   template <typename RandomAccessIterator1, typename RandomAccessIterator2>
   void stable_sort_by_key(
     RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last, RandomAccessIterator2 values_first);

   template <typename DerivedPolicy,
             typename RandomAccessIterator1,
             typename RandomAccessIterator2,
             typename StrictWeakOrdering>
   _CCCL_HOST_DEVICE void stable_sort_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     RandomAccessIterator1 keys_first,
     RandomAccessIterator1 keys_last,
     RandomAccessIterator2 values_first,
     StrictWeakOrdering comp);

   template <typename RandomAccessIterator1, typename RandomAccessIterator2, typename StrictWeakOrdering>
   void stable_sort_by_key(RandomAccessIterator1 keys_first,
                           RandomAccessIterator1 keys_last,
                           RandomAccessIterator2 values_first,
                           StrictWeakOrdering comp);

   template <typename DerivedPolicy, typename ForwardIterator>
   _CCCL_HOST_DEVICE bool is_sorted(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec, ForwardIterator first, ForwardIterator last);

   template <typename ForwardIterator>
   bool is_sorted(ForwardIterator first, ForwardIterator last);

   template <typename DerivedPolicy, typename ForwardIterator, typename Compare>
   _CCCL_HOST_DEVICE bool
   is_sorted(const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
             ForwardIterator first,
             ForwardIterator last,
             Compare comp);

   template <typename ForwardIterator, typename Compare>
   bool is_sorted(ForwardIterator first, ForwardIterator last, Compare comp);

   template <typename DerivedPolicy, typename ForwardIterator>
   _CCCL_HOST_DEVICE ForwardIterator is_sorted_until(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec, ForwardIterator first, ForwardIterator last);

   template <typename ForwardIterator>
   ForwardIterator is_sorted_until(ForwardIterator first, ForwardIterator last);

   template <typename DerivedPolicy, typename ForwardIterator, typename Compare>
   _CCCL_HOST_DEVICE ForwardIterator is_sorted_until(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     ForwardIterator first,
     ForwardIterator last,
     Compare comp);

   template <typename ForwardIterator, typename Compare>
   ForwardIterator is_sorted_until(ForwardIterator first, ForwardIterator last, Compare comp);

   THRUST_NAMESPACE_END

   #include <thrust/detail/sort.inl>

