thrust\/set\_operations.h
=========================

File members: :ref:`thrust\/set\_operations.h <set__operations_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2013 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/detail/execution_policy.h>
   #include <thrust/pair.h>

   THRUST_NAMESPACE_BEGIN

   template <typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator>
   _CCCL_HOST_DEVICE OutputIterator set_difference(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator>
   OutputIterator set_difference(
     InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename StrictWeakCompare>
   _CCCL_HOST_DEVICE OutputIterator set_difference(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result,
     StrictWeakCompare comp);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator, typename StrictWeakCompare>
   OutputIterator set_difference(
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result,
     StrictWeakCompare comp);

   template <typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator>
   _CCCL_HOST_DEVICE OutputIterator set_intersection(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator>
   OutputIterator set_intersection(
     InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename StrictWeakCompare>
   _CCCL_HOST_DEVICE OutputIterator set_intersection(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result,
     StrictWeakCompare comp);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator, typename StrictWeakCompare>
   OutputIterator set_intersection(
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result,
     StrictWeakCompare comp);

   template <typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator>
   _CCCL_HOST_DEVICE OutputIterator set_symmetric_difference(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator>
   OutputIterator set_symmetric_difference(
     InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename StrictWeakCompare>
   _CCCL_HOST_DEVICE OutputIterator set_symmetric_difference(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result,
     StrictWeakCompare comp);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator, typename StrictWeakCompare>
   OutputIterator set_symmetric_difference(
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result,
     StrictWeakCompare comp);

   template <typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator>
   _CCCL_HOST_DEVICE OutputIterator set_union(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator>
   OutputIterator set_union(
     InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename StrictWeakCompare>
   _CCCL_HOST_DEVICE OutputIterator set_union(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result,
     StrictWeakCompare comp);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator, typename StrictWeakCompare>
   OutputIterator set_union(
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator2 last2,
     OutputIterator result,
     StrictWeakCompare comp);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> set_difference_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result);

   template <typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2>
   thrust::pair<OutputIterator1, OutputIterator2> set_difference_by_key(
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2,
             typename StrictWeakCompare>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> set_difference_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result,
     StrictWeakCompare comp);

   template <typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2,
             typename StrictWeakCompare>
   thrust::pair<OutputIterator1, OutputIterator2> set_difference_by_key(
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result,
     StrictWeakCompare comp);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename OutputIterator1,
             typename OutputIterator2>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> set_intersection_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     OutputIterator1 keys_result,
     OutputIterator2 values_result);

   template <typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename OutputIterator1,
             typename OutputIterator2>
   thrust::pair<OutputIterator1, OutputIterator2> set_intersection_by_key(
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     OutputIterator1 keys_result,
     OutputIterator2 values_result);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename OutputIterator1,
             typename OutputIterator2,
             typename StrictWeakCompare>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> set_intersection_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     OutputIterator1 keys_result,
     OutputIterator2 values_result,
     StrictWeakCompare comp);

   template <typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename OutputIterator1,
             typename OutputIterator2,
             typename StrictWeakCompare>
   thrust::pair<OutputIterator1, OutputIterator2> set_intersection_by_key(
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     OutputIterator1 keys_result,
     OutputIterator2 values_result,
     StrictWeakCompare comp);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> set_symmetric_difference_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result);

   template <typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2>
   thrust::pair<OutputIterator1, OutputIterator2> set_symmetric_difference_by_key(
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2,
             typename StrictWeakCompare>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> set_symmetric_difference_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result,
     StrictWeakCompare comp);

   template <typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2,
             typename StrictWeakCompare>
   thrust::pair<OutputIterator1, OutputIterator2> set_symmetric_difference_by_key(
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result,
     StrictWeakCompare comp);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> set_union_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result);

   template <typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2>
   thrust::pair<OutputIterator1, OutputIterator2> set_union_by_key(
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2,
             typename StrictWeakCompare>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> set_union_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result,
     StrictWeakCompare comp);

   template <typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename InputIterator4,
             typename OutputIterator1,
             typename OutputIterator2,
             typename StrictWeakCompare>
   thrust::pair<OutputIterator1, OutputIterator2> set_union_by_key(
     InputIterator1 keys_first1,
     InputIterator1 keys_last1,
     InputIterator2 keys_first2,
     InputIterator2 keys_last2,
     InputIterator3 values_first1,
     InputIterator4 values_first2,
     OutputIterator1 keys_result,
     OutputIterator2 values_result,
     StrictWeakCompare comp);

   THRUST_NAMESPACE_END

   #include <thrust/detail/set_operations.inl>

