thrust\/iterator\/iterator\_categories.h
========================================

File members: :ref:`thrust\/iterator\/iterator\_categories.h <iterator__categories_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2013 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   /*
    * (C) Copyright Jeremy Siek 2002.
    *
    * Distributed under the Boost Software License, Version 1.0.
    * (See accompanying NOTICE file for the complete license)
    *
    * For more information, see http://www.boost.org
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/iterator/detail/device_system_tag.h>
   #include <thrust/iterator/detail/iterator_category_with_system_and_traversal.h>
   #include <thrust/iterator/detail/iterator_traversal_tags.h>

   #include <cuda/std/iterator>

   THRUST_NAMESPACE_BEGIN

   struct input_device_iterator_tag
       : detail::iterator_category_with_system_and_traversal<::cuda::std::input_iterator_tag,
                                                             device_system_tag,
                                                             single_pass_traversal_tag>
   {};

   struct output_device_iterator_tag
       : detail::iterator_category_with_system_and_traversal<::cuda::std::output_iterator_tag,
                                                             device_system_tag,
                                                             single_pass_traversal_tag>
   {};

   struct forward_device_iterator_tag
       : detail::iterator_category_with_system_and_traversal<::cuda::std::forward_iterator_tag,
                                                             device_system_tag,
                                                             forward_traversal_tag>
   {};

   struct bidirectional_device_iterator_tag
       : detail::iterator_category_with_system_and_traversal<::cuda::std::bidirectional_iterator_tag,
                                                             device_system_tag,
                                                             bidirectional_traversal_tag>
   {};

   struct random_access_device_iterator_tag
       : detail::iterator_category_with_system_and_traversal<::cuda::std::random_access_iterator_tag,
                                                             device_system_tag,
                                                             random_access_traversal_tag>
   {};

   using input_host_iterator_tag = ::cuda::std::input_iterator_tag;

   using output_host_iterator_tag = ::cuda::std::output_iterator_tag;

   using forward_host_iterator_tag = ::cuda::std::forward_iterator_tag;

   using bidirectional_host_iterator_tag = ::cuda::std::bidirectional_iterator_tag;

   using random_access_host_iterator_tag = ::cuda::std::random_access_iterator_tag;

   THRUST_NAMESPACE_END

