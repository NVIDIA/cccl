thrust\/mr\/disjoint\_sync\_pool.h
==================================

File members: :ref:`thrust\/mr\/disjoint\_sync\_pool.h <disjoint__sync__pool_8h>`

.. code-block:: c++

   /*
    *  Copyright 2018 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/mr/disjoint_pool.h>

   #include <mutex>

   THRUST_NAMESPACE_BEGIN
   namespace mr
   {

   template <typename Upstream, typename Bookkeeper>
   struct disjoint_synchronized_pool_resource : public memory_resource<typename Upstream::pointer>
   {
     using unsync_pool = disjoint_unsynchronized_pool_resource<Upstream, Bookkeeper>;
     using lock_t      = std::lock_guard<std::mutex>;

     using void_ptr = typename Upstream::pointer;

   public:
     static pool_options get_default_options()
     {
       return unsync_pool::get_default_options();
     }

     disjoint_synchronized_pool_resource(
       Upstream* upstream, Bookkeeper* bookkeeper, pool_options options = get_default_options())
         : upstream_pool(upstream, bookkeeper, options)
     {}

     disjoint_synchronized_pool_resource(pool_options options = get_default_options())
         : upstream_pool(get_global_resource<Upstream>(), get_global_resource<Bookkeeper>(), options)
     {}

     void release()
     {
       lock_t lock(mtx);
       upstream_pool.release();
     }

     [[nodiscard]] virtual void_ptr
     do_allocate(std::size_t bytes, std::size_t alignment = THRUST_MR_DEFAULT_ALIGNMENT) override
     {
       lock_t lock(mtx);
       return upstream_pool.do_allocate(bytes, alignment);
     }

     virtual void do_deallocate(void_ptr p, std::size_t n, std::size_t alignment = THRUST_MR_DEFAULT_ALIGNMENT) override
     {
       lock_t lock(mtx);
       upstream_pool.do_deallocate(p, n, alignment);
     }

   private:
     std::mutex mtx;
     unsync_pool upstream_pool;
   };

   } // namespace mr
   THRUST_NAMESPACE_END

