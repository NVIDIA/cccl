thrust\/type\_traits\/is\_operator\_less\_or\_greater\_function\_object.h
=========================================================================

File members: :ref:`thrust\/type\_traits\/is\_operator\_less\_or\_greater\_function\_object.h <is__operator__less__or__greater__function__object_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2021 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/detail/type_traits.h>
   #include <thrust/detail/type_traits/pointer_traits.h>
   #include <thrust/functional.h>

   THRUST_NAMESPACE_BEGIN

   namespace detail
   {

   template <typename T>
   struct is_operator_less_function_object_impl;

   template <typename T>
   struct is_operator_greater_function_object_impl;

   } // namespace detail

   template <typename T>
   using is_operator_less_function_object = detail::is_operator_less_function_object_impl<T>;

   template <typename T>
   constexpr bool is_operator_less_function_object_v = is_operator_less_function_object<T>::value;

   template <typename T>
   using is_operator_greater_function_object = detail::is_operator_greater_function_object_impl<T>;

   template <typename T>
   constexpr bool is_operator_greater_function_object_v = is_operator_greater_function_object<T>::value;

   template <typename T>
   using is_operator_less_or_greater_function_object =
     integral_constant<bool,
                       detail::is_operator_less_function_object_impl<T>::value
                         || detail::is_operator_greater_function_object_impl<T>::value>;

   template <typename T>
   constexpr bool is_operator_less_or_greater_function_object_v = is_operator_less_or_greater_function_object<T>::value;

   namespace detail
   {

   template <typename T>
   struct is_operator_less_function_object_impl : false_type
   {};
   template <typename T>
   struct is_operator_less_function_object_impl<::cuda::std::less<T>> : true_type
   {};
   template <typename T>
   struct is_operator_less_function_object_impl<std::less<T>> : true_type
   {};

   template <typename T>
   struct is_operator_greater_function_object_impl : false_type
   {};
   template <typename T>
   struct is_operator_greater_function_object_impl<::cuda::std::greater<T>> : true_type
   {};
   template <typename T>
   struct is_operator_greater_function_object_impl<std::greater<T>> : true_type
   {};

   } // namespace detail

   THRUST_NAMESPACE_END

