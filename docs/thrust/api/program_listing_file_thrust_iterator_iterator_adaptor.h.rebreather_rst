thrust\/iterator\/iterator\_adaptor.h
=====================================

File members: :ref:`thrust\/iterator\/iterator\_adaptor.h <iterator__adaptor_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2013 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   /*
    * (C) Copyright David Abrahams 2002.
    * (C) Copyright Jeremy Siek    2002.
    * (C) Copyright Thomas Witt    2002.
    *
    * Distributed under the Boost Software License, Version 1.0.
    * (See accompanying NOTICE file for the complete license)
    *
    * For more information, see http://www.boost.org
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/detail/use_default.h>
   #include <thrust/iterator/detail/iterator_adaptor_base.h>
   #include <thrust/iterator/iterator_facade.h>

   THRUST_NAMESPACE_BEGIN

   template <typename Derived,
             typename Base,
             typename Value      = use_default,
             typename System     = use_default,
             typename Traversal  = use_default,
             typename Reference  = use_default,
             typename Difference = use_default>
   class _CCCL_DECLSPEC_EMPTY_BASES iterator_adaptor
       : public detail::make_iterator_adaptor_base<Derived, Base, Value, System, Traversal, Reference, Difference>::type
   {
     friend class iterator_core_access;

   protected:
     using super_t =
       typename detail::make_iterator_adaptor_base<Derived, Base, Value, System, Traversal, Reference, Difference>::type;

   public:
     iterator_adaptor() = default;

     _CCCL_EXEC_CHECK_DISABLE
     _CCCL_HOST_DEVICE explicit iterator_adaptor(Base const& iter)
         : m_iterator(iter)
     {}

     using base_type = Base;

     using reference = typename super_t::reference;

     using difference_type = typename super_t::difference_type;
     _CCCL_HOST_DEVICE Base const& base() const
     {
       return m_iterator;
     }

   protected:
     _CCCL_HOST_DEVICE Base const& base_reference() const
     {
       return m_iterator;
     }

     _CCCL_HOST_DEVICE Base& base_reference()
     {
       return m_iterator;
     }

   private: // Core iterator interface for iterator_facade
     _CCCL_EXEC_CHECK_DISABLE
     _CCCL_HOST_DEVICE reference dereference() const
     {
       return *m_iterator;
     }

     _CCCL_EXEC_CHECK_DISABLE
     template <typename OtherDerived, typename OtherIterator, typename V, typename S, typename T, typename R, typename D>
     _CCCL_HOST_DEVICE bool equal(iterator_adaptor<OtherDerived, OtherIterator, V, S, T, R, D> const& x) const
     {
       return m_iterator == x.base();
     }

     _CCCL_EXEC_CHECK_DISABLE
     _CCCL_HOST_DEVICE void advance(difference_type n)
     {
       // XXX statically assert on random_access_traversal_tag

       // counting_iterator will pick eg. diff_t=int64 when base=int32.
       // Explicitly cast to avoid static conversion warnings.
       m_iterator = static_cast<base_type>(m_iterator + n);
     }

     _CCCL_EXEC_CHECK_DISABLE
     _CCCL_HOST_DEVICE void increment()
     {
       ++m_iterator;
     }

     _CCCL_EXEC_CHECK_DISABLE
     _CCCL_HOST_DEVICE void decrement()
     {
       // XXX statically assert on bidirectional_traversal_tag
       --m_iterator;
     }

     _CCCL_EXEC_CHECK_DISABLE
     template <typename OtherDerived, typename OtherIterator, typename V, typename S, typename T, typename R, typename D>
     _CCCL_HOST_DEVICE difference_type
     distance_to(iterator_adaptor<OtherDerived, OtherIterator, V, S, T, R, D> const& y) const
     {
       return y.base() - m_iterator;
     }

   private:
     Base m_iterator;

   }; // end iterator_adaptor

   THRUST_NAMESPACE_END

