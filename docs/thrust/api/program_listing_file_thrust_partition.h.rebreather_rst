thrust\/partition.h
===================

File members: :ref:`thrust\/partition.h <partition_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2013 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/detail/execution_policy.h>
   #include <thrust/pair.h>

   THRUST_NAMESPACE_BEGIN

   template <typename DerivedPolicy, typename ForwardIterator, typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator partition(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     ForwardIterator first,
     ForwardIterator last,
     Predicate pred);

   template <typename ForwardIterator, typename Predicate>
   ForwardIterator partition(ForwardIterator first, ForwardIterator last, Predicate pred);

   template <typename DerivedPolicy, typename ForwardIterator, typename InputIterator, typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator partition(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     ForwardIterator first,
     ForwardIterator last,
     InputIterator stencil,
     Predicate pred);

   template <typename ForwardIterator, typename InputIterator, typename Predicate>
   ForwardIterator partition(ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred);

   template <typename DerivedPolicy,
             typename InputIterator,
             typename OutputIterator1,
             typename OutputIterator2,
             typename Predicate>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> partition_copy(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator1 out_true,
     OutputIterator2 out_false,
     Predicate pred);

   template <typename InputIterator, typename OutputIterator1, typename OutputIterator2, typename Predicate>
   thrust::pair<OutputIterator1, OutputIterator2> partition_copy(
     InputIterator first, InputIterator last, OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator1,
             typename OutputIterator2,
             typename Predicate>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> partition_copy(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first,
     InputIterator1 last,
     InputIterator2 stencil,
     OutputIterator1 out_true,
     OutputIterator2 out_false,
     Predicate pred);

   template <typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator1,
             typename OutputIterator2,
             typename Predicate>
   thrust::pair<OutputIterator1, OutputIterator2> partition_copy(
     InputIterator1 first,
     InputIterator1 last,
     InputIterator2 stencil,
     OutputIterator1 out_true,
     OutputIterator2 out_false,
     Predicate pred);

   template <typename DerivedPolicy, typename ForwardIterator, typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator stable_partition(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     ForwardIterator first,
     ForwardIterator last,
     Predicate pred);

   template <typename ForwardIterator, typename Predicate>
   ForwardIterator stable_partition(ForwardIterator first, ForwardIterator last, Predicate pred);

   template <typename DerivedPolicy, typename ForwardIterator, typename InputIterator, typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator stable_partition(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     ForwardIterator first,
     ForwardIterator last,
     InputIterator stencil,
     Predicate pred);

   template <typename ForwardIterator, typename InputIterator, typename Predicate>
   ForwardIterator stable_partition(ForwardIterator first, ForwardIterator last, InputIterator stencil, Predicate pred);

   template <typename DerivedPolicy,
             typename InputIterator,
             typename OutputIterator1,
             typename OutputIterator2,
             typename Predicate>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> stable_partition_copy(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator1 out_true,
     OutputIterator2 out_false,
     Predicate pred);

   template <typename InputIterator, typename OutputIterator1, typename OutputIterator2, typename Predicate>
   thrust::pair<OutputIterator1, OutputIterator2> stable_partition_copy(
     InputIterator first, InputIterator last, OutputIterator1 out_true, OutputIterator2 out_false, Predicate pred);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator1,
             typename OutputIterator2,
             typename Predicate>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> stable_partition_copy(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first,
     InputIterator1 last,
     InputIterator2 stencil,
     OutputIterator1 out_true,
     OutputIterator2 out_false,
     Predicate pred);

   template <typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator1,
             typename OutputIterator2,
             typename Predicate>
   thrust::pair<OutputIterator1, OutputIterator2> stable_partition_copy(
     InputIterator1 first,
     InputIterator1 last,
     InputIterator2 stencil,
     OutputIterator1 out_true,
     OutputIterator2 out_false,
     Predicate pred);

   template <typename DerivedPolicy, typename ForwardIterator, typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator partition_point(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     ForwardIterator first,
     ForwardIterator last,
     Predicate pred);

   template <typename ForwardIterator, typename Predicate>
   ForwardIterator partition_point(ForwardIterator first, ForwardIterator last, Predicate pred);

   template <typename DerivedPolicy, typename InputIterator, typename Predicate>
   _CCCL_HOST_DEVICE bool is_partitioned(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     Predicate pred);

   template <typename InputIterator, typename Predicate>
   bool is_partitioned(InputIterator first, InputIterator last, Predicate pred);

   THRUST_NAMESPACE_END

   #include <thrust/detail/partition.inl>

