thrust\/scan.h
==============

File members: :ref:`thrust\/scan.h <scan_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2013 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/detail/execution_policy.h>

   THRUST_NAMESPACE_BEGIN

   template <typename DerivedPolicy, typename InputIterator, typename OutputIterator>
   _CCCL_HOST_DEVICE OutputIterator inclusive_scan(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator result);

   template <typename InputIterator, typename OutputIterator>
   OutputIterator inclusive_scan(InputIterator first, InputIterator last, OutputIterator result);

   template <typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename AssociativeOperator>
   _CCCL_HOST_DEVICE OutputIterator inclusive_scan(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator result,
     AssociativeOperator binary_op);

   template <typename InputIterator, typename OutputIterator, typename AssociativeOperator>
   OutputIterator
   inclusive_scan(InputIterator first, InputIterator last, OutputIterator result, AssociativeOperator binary_op);

   template <typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename T, typename AssociativeOperator>
   _CCCL_HOST_DEVICE OutputIterator inclusive_scan(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator result,
     T init,
     AssociativeOperator binary_op);

   template <typename InputIterator, typename OutputIterator, typename T, typename AssociativeOperator>
   OutputIterator
   inclusive_scan(InputIterator first, InputIterator last, OutputIterator result, T init, AssociativeOperator binary_op);

   template <typename DerivedPolicy, typename InputIterator, typename OutputIterator>
   _CCCL_HOST_DEVICE OutputIterator exclusive_scan(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator result);

   template <typename InputIterator, typename OutputIterator>
   OutputIterator exclusive_scan(InputIterator first, InputIterator last, OutputIterator result);

   template <typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename T>
   _CCCL_HOST_DEVICE OutputIterator exclusive_scan(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator result,
     T init);

   template <typename InputIterator, typename OutputIterator, typename T>
   OutputIterator exclusive_scan(InputIterator first, InputIterator last, OutputIterator result, T init);

   template <typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename T, typename AssociativeOperator>
   _CCCL_HOST_DEVICE OutputIterator exclusive_scan(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator result,
     T init,
     AssociativeOperator binary_op);

   template <typename InputIterator, typename OutputIterator, typename T, typename AssociativeOperator>
   OutputIterator
   exclusive_scan(InputIterator first, InputIterator last, OutputIterator result, T init, AssociativeOperator binary_op);

   template <typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator>
   _CCCL_HOST_DEVICE OutputIterator inclusive_scan_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator>
   OutputIterator
   inclusive_scan_by_key(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename BinaryPredicate>
   _CCCL_HOST_DEVICE OutputIterator inclusive_scan_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result,
     BinaryPredicate binary_pred);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator, typename BinaryPredicate>
   OutputIterator inclusive_scan_by_key(
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result,
     BinaryPredicate binary_pred);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename BinaryPredicate,
             typename AssociativeOperator>
   _CCCL_HOST_DEVICE OutputIterator inclusive_scan_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result,
     BinaryPredicate binary_pred,
     AssociativeOperator binary_op);

   template <typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename BinaryPredicate,
             typename AssociativeOperator>
   OutputIterator inclusive_scan_by_key(
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result,
     BinaryPredicate binary_pred,
     AssociativeOperator binary_op);

   template <typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator>
   _CCCL_HOST_DEVICE OutputIterator exclusive_scan_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator>
   OutputIterator
   exclusive_scan_by_key(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result);

   template <typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator, typename T>
   _CCCL_HOST_DEVICE OutputIterator exclusive_scan_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result,
     T init);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator, typename T>
   OutputIterator exclusive_scan_by_key(
     InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, T init);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename T,
             typename BinaryPredicate>
   _CCCL_HOST_DEVICE OutputIterator exclusive_scan_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result,
     T init,
     BinaryPredicate binary_pred);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator, typename T, typename BinaryPredicate>
   OutputIterator exclusive_scan_by_key(
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result,
     T init,
     BinaryPredicate binary_pred);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename T,
             typename BinaryPredicate,
             typename AssociativeOperator>
   _CCCL_HOST_DEVICE OutputIterator exclusive_scan_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result,
     T init,
     BinaryPredicate binary_pred,
     AssociativeOperator binary_op);

   template <typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename T,
             typename BinaryPredicate,
             typename AssociativeOperator>
   OutputIterator exclusive_scan_by_key(
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result,
     T init,
     BinaryPredicate binary_pred,
     AssociativeOperator binary_op);

   THRUST_NAMESPACE_END

   #include <thrust/detail/scan.inl>

