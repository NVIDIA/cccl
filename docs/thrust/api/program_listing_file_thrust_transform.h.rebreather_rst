thrust\/transform.h
===================

File members: :ref:`thrust\/transform.h <transform_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2013 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header

   #include <thrust/detail/execution_policy.h>
   #include <thrust/iterator/iterator_traits.h>
   #include <thrust/system/detail/adl/transform.h>
   #include <thrust/system/detail/generic/select_system.h>
   #include <thrust/system/detail/generic/transform.h>
   #include <thrust/transform.h>

   #include <cuda/std/iterator>

   THRUST_NAMESPACE_BEGIN

   _CCCL_EXEC_CHECK_DISABLE
   template <typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename UnaryFunction>
   _CCCL_HOST_DEVICE OutputIterator transform(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator result,
     UnaryFunction op)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform");
     using thrust::system::detail::generic::transform;
     return transform(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result, op);
   }

   template <typename InputIterator, typename OutputIterator, typename UnaryFunction>
   OutputIterator transform(InputIterator first, InputIterator last, OutputIterator result, UnaryFunction op)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform");
     using thrust::system::detail::generic::select_system;

     using System1 = typename thrust::iterator_system<InputIterator>::type;
     using System2 = typename thrust::iterator_system<OutputIterator>::type;

     System1 system1;
     System2 system2;

     return thrust::transform(select_system(system1, system2), first, last, result, op);
   }

   _CCCL_EXEC_CHECK_DISABLE
   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename BinaryFunction>
   _CCCL_HOST_DEVICE OutputIterator transform(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     OutputIterator result,
     BinaryFunction op)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform");
     using thrust::system::detail::generic::transform;
     return transform(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2, result, op);
   }

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator, typename BinaryFunction>
   OutputIterator
   transform(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator result, BinaryFunction op)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform");
     using thrust::system::detail::generic::select_system;

     using System1 = typename thrust::iterator_system<InputIterator1>::type;
     using System2 = typename thrust::iterator_system<InputIterator2>::type;
     using System3 = typename thrust::iterator_system<OutputIterator>::type;

     System1 system1;
     System2 system2;
     System3 system3;

     return thrust::transform(select_system(system1, system2, system3), first1, last1, first2, result, op);
   }

   _CCCL_EXEC_CHECK_DISABLE
   template <typename DerivedPolicy,
             typename InputIterator,
             typename ForwardIterator,
             typename UnaryFunction,
             typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator transform_if(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     ForwardIterator result,
     UnaryFunction op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if");
     using thrust::system::detail::generic::transform_if;
     return transform_if(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result, op, pred);
   }

   template <typename InputIterator, typename ForwardIterator, typename UnaryFunction, typename Predicate>
   ForwardIterator
   transform_if(InputIterator first, InputIterator last, ForwardIterator result, UnaryFunction op, Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if");
     using thrust::system::detail::generic::select_system;

     using System1 = typename thrust::iterator_system<InputIterator>::type;
     using System2 = typename thrust::iterator_system<ForwardIterator>::type;

     System1 system1;
     System2 system2;

     return thrust::transform_if(select_system(system1, system2), first, last, result, op, pred);
   }

   _CCCL_EXEC_CHECK_DISABLE
   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename ForwardIterator,
             typename UnaryFunction,
             typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator transform_if(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first,
     InputIterator1 last,
     InputIterator2 stencil,
     ForwardIterator result,
     UnaryFunction op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if");
     using thrust::system::detail::generic::transform_if;
     return transform_if(
       thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, stencil, result, op, pred);
   }

   template <typename InputIterator1,
             typename InputIterator2,
             typename ForwardIterator,
             typename UnaryFunction,
             typename Predicate>
   ForwardIterator transform_if(
     InputIterator1 first,
     InputIterator1 last,
     InputIterator2 stencil,
     ForwardIterator result,
     UnaryFunction op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if");
     using thrust::system::detail::generic::select_system;

     using System1 = typename thrust::iterator_system<InputIterator1>::type;
     using System2 = typename thrust::iterator_system<InputIterator2>::type;
     using System3 = typename thrust::iterator_system<ForwardIterator>::type;

     System1 system1;
     System2 system2;
     System3 system3;

     return thrust::transform_if(select_system(system1, system2, system3), first, last, stencil, result, op, pred);
   }

   _CCCL_EXEC_CHECK_DISABLE
   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename ForwardIterator,
             typename BinaryFunction,
             typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator transform_if(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator3 stencil,
     ForwardIterator result,
     BinaryFunction binary_op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if");
     using thrust::system::detail::generic::transform_if;
     return transform_if(
       thrust::detail::derived_cast(thrust::detail::strip_const(exec)),
       first1,
       last1,
       first2,
       stencil,
       result,
       binary_op,
       pred);
   }

   template <typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename ForwardIterator,
             typename BinaryFunction,
             typename Predicate>
   ForwardIterator transform_if(
     InputIterator1 first1,
     InputIterator1 last1,
     InputIterator2 first2,
     InputIterator3 stencil,
     ForwardIterator result,
     BinaryFunction binary_op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if");
     using thrust::system::detail::generic::select_system;

     using System1 = typename thrust::iterator_system<InputIterator1>::type;
     using System2 = typename thrust::iterator_system<InputIterator2>::type;
     using System3 = typename thrust::iterator_system<InputIterator3>::type;
     using System4 = typename thrust::iterator_system<ForwardIterator>::type;

     System1 system1;
     System2 system2;
     System3 system3;
     System4 system4;

     return thrust::transform_if(
       select_system(system1, system2, system3, system4), first1, last1, first2, stencil, result, binary_op, pred);
   }

   template <typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename UnaryFunction>
   _CCCL_HOST_DEVICE OutputIterator transform_n(
     const detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     ::cuda::std::iter_difference_t<InputIterator> count,
     OutputIterator result,
     UnaryFunction op)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_n");
     using thrust::system::detail::generic::transform_n;
     return transform_n(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, count, result, op);
   }

   template <typename InputIterator, typename OutputIterator, typename UnaryFunction>
   OutputIterator transform_n(
     InputIterator first, ::cuda::std::iter_difference_t<InputIterator> count, OutputIterator result, UnaryFunction op)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_n");
     iterator_system_t<InputIterator> system1;
     iterator_system_t<OutputIterator> system2;
     using thrust::system::detail::generic::select_system;
     return thrust::transform_n(select_system(system1, system2), first, count, result, op);
   }

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator,
             typename BinaryFunction>
   _CCCL_HOST_DEVICE OutputIterator transform_n(
     const detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     ::cuda::std::iter_difference_t<InputIterator1> count,
     InputIterator2 first2,
     OutputIterator result,
     BinaryFunction op)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_n");
     using thrust::system::detail::generic::transform_n;
     return transform_n(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, count, first2, result, op);
   }

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator, typename BinaryFunction>
   OutputIterator transform_n(
     InputIterator1 first1,
     ::cuda::std::iter_difference_t<InputIterator1> count,
     InputIterator2 first2,
     OutputIterator result,
     BinaryFunction op)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_n");
     iterator_system_t<InputIterator1> system1;
     iterator_system_t<InputIterator2> system2;
     iterator_system_t<OutputIterator> system3;
     using thrust::system::detail::generic::select_system;
     return thrust::transform_n(select_system(system1, system2, system3), first1, count, first2, result, op);
   }

   template <typename DerivedPolicy,
             typename InputIterator,
             typename ForwardIterator,
             typename UnaryFunction,
             typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator transform_if_n(
     const detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     ::cuda::std::iter_difference_t<InputIterator> count,
     ForwardIterator result,
     UnaryFunction op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if_n");
     using thrust::system::detail::generic::transform_if_n;
     return transform_if_n(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, count, result, op, pred);
   }

   template <typename InputIterator, typename ForwardIterator, typename UnaryFunction, typename Predicate>
   ForwardIterator transform_if_n(
     InputIterator first,
     ::cuda::std::iter_difference_t<InputIterator> count,
     ForwardIterator result,
     UnaryFunction op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if_n");
     iterator_system_t<InputIterator> system1;
     iterator_system_t<ForwardIterator> system2;
     using thrust::system::detail::generic::select_system;
     return thrust::transform_if_n(select_system(system1, system2), first, count, result, op, pred);
   }

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename ForwardIterator,
             typename UnaryFunction,
             typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator transform_if_n(
     const detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first,
     ::cuda::std::iter_difference_t<InputIterator1> count,
     InputIterator2 stencil,
     ForwardIterator result,
     UnaryFunction op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if_n");
     using thrust::system::detail::generic::transform_if_n;
     return transform_if_n(
       thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, count, stencil, result, op, pred);
   }

   template <typename InputIterator1,
             typename InputIterator2,
             typename ForwardIterator,
             typename UnaryFunction,
             typename Predicate>
   ForwardIterator transform_if_n(
     InputIterator1 first,
     ::cuda::std::iter_difference_t<InputIterator1> count,
     InputIterator2 stencil,
     ForwardIterator result,
     UnaryFunction op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if_n");
     iterator_system_t<InputIterator1> system1;
     iterator_system_t<InputIterator2> system2;
     iterator_system_t<ForwardIterator> system3;
     using thrust::system::detail::generic::select_system;
     return thrust::transform_if_n(select_system(system1, system2, system3), first, count, stencil, result, op, pred);
   }

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename ForwardIterator,
             typename BinaryFunction,
             typename Predicate>
   _CCCL_HOST_DEVICE ForwardIterator transform_if_n(
     const detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 first1,
     ::cuda::std::iter_difference_t<InputIterator1> count,
     InputIterator2 first2,
     InputIterator3 stencil,
     ForwardIterator result,
     BinaryFunction binary_op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if_n");
     using thrust::system::detail::generic::transform_if_n;
     return transform_if_n(
       thrust::detail::derived_cast(thrust::detail::strip_const(exec)),
       first1,
       count,
       first2,
       stencil,
       result,
       binary_op,
       pred);
   }

   template <typename InputIterator1,
             typename InputIterator2,
             typename InputIterator3,
             typename ForwardIterator,
             typename BinaryFunction,
             typename Predicate>
   ForwardIterator transform_if_n(
     InputIterator1 first1,
     ::cuda::std::iter_difference_t<InputIterator1> count,
     InputIterator2 first2,
     InputIterator3 stencil,
     ForwardIterator result,
     BinaryFunction binary_op,
     Predicate pred)
   {
     _CCCL_NVTX_RANGE_SCOPE("thrust::transform_if_n");
     iterator_system_t<InputIterator1> system1;
     iterator_system_t<InputIterator2> system2;
     iterator_system_t<InputIterator3> system3;
     iterator_system_t<ForwardIterator> system4;
     using thrust::system::detail::generic::select_system;
     return thrust::transform_if_n(
       select_system(system1, system2, system3, system4), first1, count, first2, stencil, result, binary_op, pred);
   }

   THRUST_NAMESPACE_END

