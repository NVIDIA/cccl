thrust\/unique.h
================

File members: :ref:`thrust\/unique.h <unique_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2013 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/detail/execution_policy.h>
   #include <thrust/iterator/iterator_traits.h>
   #include <thrust/pair.h>

   THRUST_NAMESPACE_BEGIN

   template <typename DerivedPolicy, typename ForwardIterator>
   _CCCL_HOST_DEVICE ForwardIterator
   unique(const thrust::detail::execution_policy_base<DerivedPolicy>& exec, ForwardIterator first, ForwardIterator last);

   template <typename ForwardIterator>
   ForwardIterator unique(ForwardIterator first, ForwardIterator last);

   template <typename DerivedPolicy, typename ForwardIterator, typename BinaryPredicate>
   _CCCL_HOST_DEVICE ForwardIterator unique(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     ForwardIterator first,
     ForwardIterator last,
     BinaryPredicate binary_pred);

   template <typename ForwardIterator, typename BinaryPredicate>
   ForwardIterator unique(ForwardIterator first, ForwardIterator last, BinaryPredicate binary_pred);

   template <typename DerivedPolicy, typename InputIterator, typename OutputIterator>
   _CCCL_HOST_DEVICE OutputIterator unique_copy(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator result);

   template <typename InputIterator, typename OutputIterator>
   OutputIterator unique_copy(InputIterator first, InputIterator last, OutputIterator result);

   template <typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename BinaryPredicate>
   _CCCL_HOST_DEVICE OutputIterator unique_copy(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator first,
     InputIterator last,
     OutputIterator result,
     BinaryPredicate binary_pred);

   template <typename InputIterator, typename OutputIterator, typename BinaryPredicate>
   OutputIterator unique_copy(InputIterator first, InputIterator last, OutputIterator result, BinaryPredicate binary_pred);

   template <typename DerivedPolicy, typename ForwardIterator1, typename ForwardIterator2>
   _CCCL_HOST_DEVICE thrust::pair<ForwardIterator1, ForwardIterator2> unique_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     ForwardIterator1 keys_first,
     ForwardIterator1 keys_last,
     ForwardIterator2 values_first);

   template <typename ForwardIterator1, typename ForwardIterator2>
   thrust::pair<ForwardIterator1, ForwardIterator2>
   unique_by_key(ForwardIterator1 keys_first, ForwardIterator1 keys_last, ForwardIterator2 values_first);

   template <typename DerivedPolicy, typename ForwardIterator1, typename ForwardIterator2, typename BinaryPredicate>
   _CCCL_HOST_DEVICE thrust::pair<ForwardIterator1, ForwardIterator2> unique_by_key(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     ForwardIterator1 keys_first,
     ForwardIterator1 keys_last,
     ForwardIterator2 values_first,
     BinaryPredicate binary_pred);

   template <typename ForwardIterator1, typename ForwardIterator2, typename BinaryPredicate>
   thrust::pair<ForwardIterator1, ForwardIterator2> unique_by_key(
     ForwardIterator1 keys_first, ForwardIterator1 keys_last, ForwardIterator2 values_first, BinaryPredicate binary_pred);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator1,
             typename OutputIterator2>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> unique_by_key_copy(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 keys_first,
     InputIterator1 keys_last,
     InputIterator2 values_first,
     OutputIterator1 keys_result,
     OutputIterator2 values_result);

   template <typename InputIterator1, typename InputIterator2, typename OutputIterator1, typename OutputIterator2>
   thrust::pair<OutputIterator1, OutputIterator2> unique_by_key_copy(
     InputIterator1 keys_first,
     InputIterator1 keys_last,
     InputIterator2 values_first,
     OutputIterator1 keys_result,
     OutputIterator2 values_result);

   template <typename DerivedPolicy,
             typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator1,
             typename OutputIterator2,
             typename BinaryPredicate>
   _CCCL_HOST_DEVICE thrust::pair<OutputIterator1, OutputIterator2> unique_by_key_copy(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     InputIterator1 keys_first,
     InputIterator1 keys_last,
     InputIterator2 values_first,
     OutputIterator1 keys_result,
     OutputIterator2 values_result,
     BinaryPredicate binary_pred);

   template <typename InputIterator1,
             typename InputIterator2,
             typename OutputIterator1,
             typename OutputIterator2,
             typename BinaryPredicate>
   thrust::pair<OutputIterator1, OutputIterator2> unique_by_key_copy(
     InputIterator1 keys_first,
     InputIterator1 keys_last,
     InputIterator2 values_first,
     OutputIterator1 keys_result,
     OutputIterator2 values_result,
     BinaryPredicate binary_pred);

   template <typename DerivedPolicy, typename ForwardIterator, typename BinaryPredicate>
   _CCCL_HOST_DEVICE thrust::detail::it_difference_t<ForwardIterator> unique_count(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec,
     ForwardIterator first,
     ForwardIterator last,
     BinaryPredicate binary_pred);

   template <typename DerivedPolicy, typename ForwardIterator>
   _CCCL_HOST_DEVICE thrust::detail::it_difference_t<ForwardIterator> unique_count(
     const thrust::detail::execution_policy_base<DerivedPolicy>& exec, ForwardIterator first, ForwardIterator last);

   template <typename ForwardIterator, typename BinaryPredicate>
   _CCCL_HOST_DEVICE thrust::detail::it_difference_t<ForwardIterator>
   unique_count(ForwardIterator first, ForwardIterator last, BinaryPredicate binary_pred);

   template <typename ForwardIterator>
   _CCCL_HOST_DEVICE thrust::detail::it_difference_t<ForwardIterator>
   unique_count(ForwardIterator first, ForwardIterator last);

   THRUST_NAMESPACE_END

   #include <thrust/detail/unique.inl>

