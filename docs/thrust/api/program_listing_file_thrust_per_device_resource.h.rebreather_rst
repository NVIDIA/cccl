thrust\/per\_device\_resource.h
===============================

File members: :ref:`thrust\/per\_device\_resource.h <per__device__resource_8h>`

.. code-block:: c++

   /*
    *  Copyright 2008-2013 NVIDIA Corporation
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    */

   #pragma once

   #include <thrust/detail/config.h>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header
   #include <thrust/detail/execution_policy.h>
   #include <thrust/mr/allocator.h>
   #include <thrust/system/detail/adl/per_device_resource.h>
   #include <thrust/system/detail/generic/per_device_resource.h>

   THRUST_NAMESPACE_BEGIN

   template <typename MR, typename DerivedPolicy>
   _CCCL_HOST MR* get_per_device_resource(const thrust::detail::execution_policy_base<DerivedPolicy>& system)
   {
     using thrust::system::detail::generic::get_per_device_resource;

     return get_per_device_resource<MR>(thrust::detail::derived_cast(thrust::detail::strip_const(system)));
   }

   template <typename T, typename Upstream, typename ExecutionPolicy>
   class per_device_allocator : public thrust::mr::allocator<T, Upstream>
   {
     using base = thrust::mr::allocator<T, Upstream>;

   public:
     template <typename U>
     struct rebind
     {
       using other = per_device_allocator<U, Upstream, ExecutionPolicy>;
     };

     _CCCL_HOST per_device_allocator()
         : base(get_per_device_resource<Upstream>(ExecutionPolicy()))
     {}

     _CCCL_HOST_DEVICE per_device_allocator(const per_device_allocator& other)
         : base(other)
     {}

     template <typename U>
     _CCCL_HOST_DEVICE per_device_allocator(const per_device_allocator<U, Upstream, ExecutionPolicy>& other)
         : base(other)
     {}

     _CCCL_HOST_DEVICE ~per_device_allocator() {}
   };

   THRUST_NAMESPACE_END

