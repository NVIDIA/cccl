include\/cuda\/experimental\/\_\_memory\_resource\/pinned\_memory\_pool.cuh
===========================================================================

File members: :ref:`include\/cuda\/experimental\/\_\_memory\_resource\/pinned\_memory\_pool.cuh <pinned__memory__pool_8cuh>`

.. code-block:: c++

   //===----------------------------------------------------------------------===//
   //
   // Part of CUDA Experimental in CUDA C++ Core Libraries,
   // under the Apache License v2.0 with LLVM Exceptions.
   // See https://llvm.org/LICENSE.txt for license information.
   // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
   // SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES.
   //
   //===----------------------------------------------------------------------===//

   #ifndef _CUDAX__MEMORY_RESOURCE_PINNED_MEMORY_POOL
   #define _CUDAX__MEMORY_RESOURCE_PINNED_MEMORY_POOL

   #include <cuda/std/detail/__config>

   #if defined(_CCCL_IMPLICIT_SYSTEM_HEADER_GCC)
   #  pragma GCC system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_CLANG)
   #  pragma clang system_header
   #elif defined(_CCCL_IMPLICIT_SYSTEM_HEADER_MSVC)
   #  pragma system_header
   #endif // no system header

   #if _CCCL_CTK_AT_LEAST(12, 6)

   #  if _CCCL_CUDA_COMPILER(CLANG)
   #    include <cuda_runtime.h>
   #    include <cuda_runtime_api.h>
   #  endif // _CCCL_CUDA_COMPILER(CLANG)

   #  include <cuda/experimental/__memory_resource/memory_pool_base.cuh>
   #  include <cuda/experimental/__stream/stream.cuh>

   #  include <cuda/std/__cccl/prologue.h>

   namespace cuda::experimental
   {

   class pinned_memory_pool : public __memory_pool_base
   {
   private:
     explicit pinned_memory_pool(__memory_pool_base::__from_handle_t, ::cudaMemPool_t __handle) noexcept
         : __memory_pool_base(__memory_pool_base::__from_handle_t{}, __handle)
     {}

   public:
     explicit pinned_memory_pool(int __numa_id, memory_pool_properties __properties)
         : __memory_pool_base(__memory_location_type::__host, __properties, __numa_id)
     {
       enable_access_from(devices);
     }

     explicit pinned_memory_pool(int __numa_id = 0)
         : pinned_memory_pool(__numa_id, {})
     {}

     pinned_memory_pool(::cudaMemPool_t) = delete;

     pinned_memory_pool(pinned_memory_pool const&)            = delete;
     pinned_memory_pool(pinned_memory_pool&&)                 = delete;
     pinned_memory_pool& operator=(pinned_memory_pool const&) = delete;
     pinned_memory_pool& operator=(pinned_memory_pool&&)      = delete;

     [[nodiscard]] static pinned_memory_pool from_native_handle(::cudaMemPool_t __handle) noexcept
     {
       return pinned_memory_pool(__memory_pool_base::__from_handle_t{}, __handle);
     }

     // Disallow construction from an `int`, e.g., `0`.
     static pinned_memory_pool from_native_handle(int) = delete;

     // Disallow construction from `nullptr`.
     static pinned_memory_pool from_native_handle(_CUDA_VSTD::nullptr_t) = delete;
   };

   } // namespace cuda::experimental

   #  include <cuda/std/__cccl/epilogue.h>

   #endif // _CCCL_CTK_AT_LEAST(12, 6)

   #endif // _CUDAX__MEMORY_RESOURCE_PINNED_MEMORY_POOL

