ctk_11_1: &ctk_11_1 '11.1'
ctk_11_8: &ctk_11_8 '11.8'
ctk_12_0: &ctk_12_0 '12.0'
ctk_curr: &ctk_curr '12.4'

# The version of the devcontainer images to use from https://hub.docker.com/r/rapidsai/devcontainers
devcontainer_version: '24.06'

# gcc compiler configurations
gcc6: &gcc6 { name: 'gcc', version: '6', exe: 'g++' }
gcc7: &gcc7 { name: 'gcc', version: '7', exe: 'g++' }
gcc8: &gcc8 { name: 'gcc', version: '8', exe: 'g++' }
gcc9: &gcc9 { name: 'gcc', version: '9', exe: 'g++' }
gcc10: &gcc10 { name: 'gcc', version: '10', exe: 'g++' }
gcc11: &gcc11 { name: 'gcc', version: '11', exe: 'g++' }
gcc12: &gcc12 { name: 'gcc', version: '12', exe: 'g++' }
gcc-oldest: &gcc-oldest { name: 'gcc', version: '6', exe: 'g++' }
gcc-newest: &gcc-newest { name: 'gcc', version: '12', exe: 'g++' }

# LLVM Compiler configurations
llvm9: &llvm9 { name: 'llvm', version: '9', exe: 'clang++' }
llvm10: &llvm10 { name: 'llvm', version: '10', exe: 'clang++' }
llvm11: &llvm11 { name: 'llvm', version: '11', exe: 'clang++' }
llvm12: &llvm12 { name: 'llvm', version: '12', exe: 'clang++' }
llvm13: &llvm13 { name: 'llvm', version: '13', exe: 'clang++' }
llvm14: &llvm14 { name: 'llvm', version: '14', exe: 'clang++' }
llvm15: &llvm15 { name: 'llvm', version: '15', exe: 'clang++' }
llvm16: &llvm16 { name: 'llvm', version: '16', exe: 'clang++' }
llvm-oldest: &llvm-oldest { name: 'llvm', version: '9', exe: 'clang++' }
llvm-newest: &llvm-newest { name: 'llvm', version: '16', exe: 'clang++' }

# MSVC configs
msvc2017: &msvc2017 { name: 'cl', version: '14.16', exe: 'cl++' }
msvc2019: &msvc2019 { name: 'cl', version: '14.29', exe: 'cl++' }
msvc2022_1436: &msvc2022_1436 { name: 'cl', version: '14.36', exe: 'cl++' }
msvc2022: &msvc2022 { name: 'cl', version: '14.39', exe: 'cl++' }

# oneAPI configs
oneapi: &oneapi { name: 'oneapi', version: '2023.2.0', exe: 'icpc' }

# GHA Workflow job matrices:
workflows:
  # If any jobs appear here, they will be executed instead of `pull_request' for PRs.
  # This is useful for limiting resource usage when a full matrix is not needed.
  # The branch protection checks will fail when using this override workflow.
  #
  # Example:
  # override:
  #   - {jobs: ['build'], project['thrust'], std: 17, ctk: *ctk_curr, cxx: [*gcc12, *llvm16]}
  #
  override:
    - {jobs: ['test'],  std: '17', cxx: [*gcc12, *llvm16, *msvc2022]}

  pull_request:
    - {jobs: ['build'], std: 'all', ctk: *ctk_11_1, cxx: [*gcc6, *gcc7, *gcc8, *gcc9, *llvm9, *msvc2017]}
    - {jobs: ['build'], std: 'all', ctk: *ctk_11_8, cxx: [*gcc11], sm: '60;70;80;90'}
    - {jobs: ['build'], std: 'all', cxx: [*gcc7, *gcc8, *gcc9, *gcc10, *gcc11]}
    - {jobs: ['build'], std: 'all', cxx: [*llvm9, *llvm10, *llvm11, *llvm12, *llvm13, *llvm14, *llvm15]}
    - {jobs: ['build'], std: 'all', cxx: [*oneapi, *msvc2019]}
    - {jobs: ['test'],  std: 'all', cxx: [*gcc12, *llvm16, *msvc2022]}
    - {jobs: ['build'], std: 'all', cxx: [*gcc12, *llvm16], cpu: 'arm64'}
    - {jobs: ['build'], std: 'all', cxx: [*gcc12], sm: '90a'}
    # default_projects: clang-cuda
    - {jobs: ['build'], std: [17, 20], cudacxx: *llvm-newest, cxx: *llvm-newest}
    # nvrtc:
    - {jobs: ['nvrtc'], project: 'libcudacxx', std: 'all'}
    # verify-codegen:
    - {jobs: ['verify_codegen'], project: 'libcudacxx'}
    # cudax has different CTK reqs:
    # - {jobs: ['build'], project: 'cudax', ctk: [*ctk_12_0, *ctk_curr], std: 'all', cxx: [*gcc9, *gcc10, *gcc11]}
    # - {jobs: ['build'], project: 'cudax', ctk: [*ctk_12_0, *ctk_curr], std: 'all', cxx: [*llvm9, *llvm10, *llvm11, *llvm12, *llvm13, *llvm14]}
    # - {jobs: ['build'], project: 'cudax', ctk: [           *ctk_curr], std: 'all', cxx: [*llvm15]}
    # - {jobs: ['build'], project: 'cudax', ctk: [*ctk_12_0,          ], std: 'all', cxx: [*msvc2022_1436]}
    # - {jobs: ['build'], project: 'cudax', ctk: [           *ctk_curr], std: 'all', cxx: [*msvc2022]}
    # - {jobs: ['build'], project: 'cudax', ctk: [*ctk_12_0           ], std: 17,    cxx: [*gcc12], sm: "90"}
    # - {jobs: ['build'], project: 'cudax', ctk: [           *ctk_curr], std: 17,    cxx: [*gcc12], sm: "90a"}
    # - {jobs: ['build'], project: 'cudax', ctk: [           *ctk_curr], std: 'all', cxx: [*gcc12, *llvm16], cpu: 'arm64'}
    # - {jobs: ['build'], project: 'cudax', ctk: [           *ctk_curr], std: 17,    cxx: [*oneapi]}
    # - {jobs: ['test'],  project: 'cudax', ctk: [*ctk_12_0, *ctk_curr], std: 'all', cxx: [*gcc12]}
    # - {jobs: ['test'],  project: 'cudax', ctk: [*ctk_12_0           ], std: 'all', cxx: [*llvm14]}
    # - {jobs: ['test'],  project: 'cudax', ctk: [           *ctk_curr], std: 'all', cxx: [*llvm16]}
    # cccl-infra:
    - {jobs: ['infra'], project: 'cccl', ctk: *ctk_11_1, cxx: [*gcc-oldest, *llvm-oldest]}
    - {jobs: ['infra'], project: 'cccl', ctk: *ctk_curr, cxx: [*gcc-newest, *llvm-newest]}
  nightly:
  # libcudacxx build fails, CUB tests fail:
    - {jobs: ['build'], ctk: *ctk_11_1, gpu: 'v100',     sm: 'gpu', cxx: *gcc6,   std: [11],     project: ['cub']}
    - {jobs: ['test'],  ctk: *ctk_11_1, gpu: 'v100',     sm: 'gpu', cxx: *gcc6,   std: [11],     project: ['thrust']}
  # - {jobs: ['test'],  ctk: *ctk_11_1, gpu: 'v100',     sm: 'gpu', cxx: *gcc6,   std: [11]      }

  # libcudacxx build fails, CUB tests fail:
    - {jobs: ['build'], ctk: *ctk_11_1, gpu: 't4',       sm: 'gpu', cxx: *llvm9,  std: [17],     project: ['cub']}
    - {jobs: ['test'],  ctk: *ctk_11_1, gpu: 't4',       sm: 'gpu', cxx: *llvm9,  std: [17],     project: ['thrust']}
  # - {jobs: ['test'],  ctk: *ctk_11_1, gpu: 't4',       sm: 'gpu', cxx: *llvm9,  std: [17]      }

  # CUB + libcudacxx tests fails:
    - {jobs: ['build'], ctk: *ctk_11_8, gpu: 'rtx2080',  sm: 'gpu', cxx: *gcc11,  std: [17],     project: ['libcudacxx', 'cub']}
    - {jobs: ['test'],  ctk: *ctk_11_8, gpu: 'rtx2080',  sm: 'gpu', cxx: *gcc11,  std: [17],     project: ['thrust']}
  # - {jobs: ['test'],  ctk: *ctk_11_8, gpu: 'rtx2080',  sm: 'gpu', cxx: *gcc11,  std: [17]      }

  # libcudacxx tests fail:
    - {jobs: ['build'], ctk: *ctk_curr, gpu: 'rtxa6000', sm: 'gpu', cxx: *gcc7,   std: [14],     project: ['libcudacxx']}
    - {jobs: ['build'], ctk: *ctk_curr, gpu: 'l4',       sm: 'gpu', cxx: *gcc12,  std: 'all',    project: ['libcudacxx']}
    - {jobs: ['build'], ctk: *ctk_curr, gpu: 'rtx4090',  sm: 'gpu', cxx: *llvm9,  std: [11],     project: ['libcudacxx']}
    - {jobs: ['build'], ctk: *ctk_curr, gpu: 'h100',     sm: 'gpu', cxx: *gcc12,  std: [11, 20], project: ['libcudacxx']}
    - {jobs: ['build'], ctk: *ctk_curr, gpu: 'h100',     sm: 'gpu', cxx: *llvm16, std: [17],     project: ['libcudacxx']}
    - {jobs: ['test'],  ctk: *ctk_curr, gpu: 'rtxa6000', sm: 'gpu', cxx: *gcc7,   std: [14],     project: ['cub', 'thrust']}
    - {jobs: ['test'],  ctk: *ctk_curr, gpu: 'l4',       sm: 'gpu', cxx: *gcc12,  std: 'all',    project: ['cub', 'thrust']}
    - {jobs: ['test'],  ctk: *ctk_curr, gpu: 'rtx4090',  sm: 'gpu', cxx: *llvm9,  std: [11],     project: ['cub', 'thrust']}
    - {jobs: ['test'],  ctk: *ctk_curr, gpu: 'h100',     sm: 'gpu', cxx: *gcc12,  std: [11, 20], project: ['cub', 'thrust']}
    - {jobs: ['test'],  ctk: *ctk_curr, gpu: 'h100',     sm: 'gpu', cxx: *llvm16, std: [17],     project: ['cub', 'thrust']}
   # - {jobs: ['test'],  ctk: *ctk_curr, gpu: 'rtxa6000', sm: 'gpu', cxx: *gcc7,   std: [14]     }
   # - {jobs: ['test'],  ctk: *ctk_curr, gpu: 'l4',       sm: 'gpu', cxx: *gcc12,  std: 'all'    }
   # - {jobs: ['test'],  ctk: *ctk_curr, gpu: 'rtx4090',  sm: 'gpu', cxx: *llvm9,  std: [11]     }
   # - {jobs: ['test'],  ctk: *ctk_curr, gpu: 'h100',     sm: 'gpu', cxx: *gcc12,  std: [11, 20] }
   # - {jobs: ['test'],  ctk: *ctk_curr, gpu: 'h100',     sm: 'gpu', cxx: *llvm16, std: [17]     }

    # nvrtc:
    - {jobs: ['nvrtc'], ctk: *ctk_curr, gpu: 't4',       sm: 'gpu', cxx: *gcc12,  std: [20],     project: ['libcudacxx']}
    - {jobs: ['nvrtc'], ctk: *ctk_curr, gpu: 'rtxa6000', sm: 'gpu', cxx: *gcc12,  std: [20],     project: ['libcudacxx']}
    - {jobs: ['nvrtc'], ctk: *ctk_curr, gpu: 'l4',       sm: 'gpu', cxx: *gcc12,  std: 'all',    project: ['libcudacxx']}
  # Fails on h100:
  # - {jobs: ['nvrtc'], ctk: *ctk_curr, gpu: 'h100',     sm: 'gpu', cxx: *gcc12,  std: [11, 20], project: ['libcudacxx']}

  # Any generated jobs that match the entries in `exclude` will be removed from the final matrix for all workflows.
  exclude:
    # Ubuntu 18.04 is EOL and we only use it to get access to CTK 11.1 containers for CUDA testing.
    # Disable non-CUDA tests on this platform.
    - {jobs: ['test_cpu'], os: 'ubuntu18.04'}
    # GPU runners are not available on Windows.
    - {jobs: ['test', 'test_gpu', 'test_nolid', 'test_lid0', 'test_lid1', 'test_lid2'], os: 'windows2022'}


#
# Resources for compute_matrix.py. These can be modified to add new jobs, etc.
#
# Jobs are executed by running scripts:
# - Linux:   'ci/<job>_<project>.sh`
# - Windows: `ci/windows/<job>_<project>.ps1`

# A matrix entry must have the following tag.
required_tags:
  - 'jobs' # A list of job types to run (e.g. 'build', 'test', 'nvrtc', 'infra', 'verify_codegen', ...) for
           # the specified configuration(s).

# If a matrix entry omits these tags, a default value (defined later in `default_<tag>`) is used.
defaulted_tags:
 - 'ctk'             # CUDA ToolKit version. Will be exploded if a list.
 - 'cpu'             # CPU architecture. Will be exploded if a list.
 - 'gpu'             # GPU model. Will be exploded if a list.
 - 'cxx'             # Host compiler {name, version, exe}. Will be exploded if a list.
 - 'cudacxx'         # Device compiler as {name, version, exe} or 'nvcc' to use nvcc from the specified `ctk`.
                     # Will be exploded if a list.
 - 'project'         # Project name (e.g. libcudacxx, cub, thrust, cccl). Will be exploded if a list.
 - 'os'              # Operating system. Will be exploded if a list.

# These tags will only exist if needed:
optional_tags:
  - 'std'             # C++ standard. Passed to script with `-std <std>`. Will be exploded if a list.
                      # If set to 'all', all stds supported by the host/device compiler are used.
  - 'sm'              # `CMAKE_CUDA_ARCHITECTURES` Passed to script with `-arch <sm>`.
                      # Defaults to use the settings in the CMakePresets.json file.
                      # Set to 'gpu' to only target the GPU in the `gpu` tag.
                      # Can pass multiple architectures via "60;70-real;80-virtual"
                      # Will be exploded if a list (e.g. `sm: ['60;70;80;90', '90a']` creates two jobs)
  - 'cmake_options'   # Additional CMake options to pass to the build. Passed to script with `-cmake_options "<cmake_options>"`.
                      # Will be exploded if a list.

# `default_<tag>`: Used when the tag is omitted.
default_ctk: *ctk_curr
default_cudacxx: 'nvcc'
default_cxx: *gcc12
default_cpu: 'amd64'
default_gpu: 'v100'
default_project:
  - 'libcudacxx'
  - 'cub'
  - 'thrust'
# Special handling: lookup os from ctk/cxx info
# See `matrix.yml` at https://github.com/rapidsai/devcontainers
default_os_lookup:
  'ctk11.1-gcc6': 'ubuntu18.04'
  'ctk11.1-gcc7': 'ubuntu18.04'
  'ctk11.1-gcc8': 'ubuntu18.04'
  'ctk11.1-gcc9': 'ubuntu18.04'
  'ctk11.1-llvm9': 'ubuntu18.04'
  'ctk11.1-cl14.16': 'windows2022'
  'ctk11.8-gcc11': 'ubuntu22.04'
  'ctk12.0-gcc7': 'ubuntu20.04'
  'ctk12.0-gcc8': 'ubuntu20.04'
  'ctk12.0-gcc9': 'ubuntu20.04'
  'ctk12.0-gcc10': 'ubuntu20.04'
  'ctk12.0-gcc11': 'ubuntu22.04'
  'ctk12.0-gcc12': 'ubuntu22.04'
  'ctk12.0-llvm9': 'ubuntu20.04'
  'ctk12.0-llvm10': 'ubuntu20.04'
  'ctk12.0-llvm11': 'ubuntu20.04'
  'ctk12.0-llvm12': 'ubuntu20.04'
  'ctk12.0-llvm13': 'ubuntu20.04'
  'ctk12.0-llvm14': 'ubuntu20.04'
  'ctk12.0-llvm15': 'ubuntu22.04'
  'ctk12.0-llvm16': 'ubuntu22.04'
  'ctk12.0-cl14.29': 'windows2022'
  'ctk12.0-cl14.36': 'windows2022'
  'ctk12.0-cl14.39': 'windows2022'
  'ctk12.0-oneapi2023.2.0': 'ubuntu22.04'
  'ctk12.4-gcc7': 'ubuntu20.04'
  'ctk12.4-gcc8': 'ubuntu20.04'
  'ctk12.4-gcc9': 'ubuntu20.04'
  'ctk12.4-gcc10': 'ubuntu20.04'
  'ctk12.4-gcc11': 'ubuntu22.04'
  'ctk12.4-gcc12': 'ubuntu22.04'
  'ctk12.4-llvm9': 'ubuntu20.04'
  'ctk12.4-llvm10': 'ubuntu20.04'
  'ctk12.4-llvm11': 'ubuntu20.04'
  'ctk12.4-llvm12': 'ubuntu20.04'
  'ctk12.4-llvm13': 'ubuntu20.04'
  'ctk12.4-llvm14': 'ubuntu20.04'
  'ctk12.4-llvm15': 'ubuntu22.04'
  'ctk12.4-llvm16': 'ubuntu22.04'
  'ctk12.4-cl14.29': 'windows2022'
  'ctk12.4-cl14.36': 'windows2022'
  'ctk12.4-cl14.39': 'windows2022'
  'ctk12.4-oneapi2023.2.0': 'ubuntu22.04'

# Lookup supported C++ standards for a given compiler when `std: 'all'`.
all_stds:           [11, 14, 17, 20]
lookup_cxx_supported_stds:
  'gcc6':           [11, 14        ]
  'gcc7':           [11, 14, 17    ]
  'gcc8':           [11, 14, 17    ]
  'gcc9':           [11, 14, 17    ]
  'gcc10':          [11, 14, 17, 20]
  'gcc11':          [11, 14, 17, 20]
  'gcc12':          [11, 14, 17, 20]
  'llvm9':          [11, 14, 17    ]
  'llvm10':         [11, 14, 17    ]
  'llvm11':         [11, 14, 17, 20]
  'llvm12':         [11, 14, 17, 20]
  'llvm13':         [11, 14, 17, 20]
  'llvm14':         [11, 14, 17, 20]
  'llvm15':         [11, 14, 17, 20]
  'llvm16':         [11, 14, 17, 20]
  'cl14.16':        [    14        ]
  'cl14.29':        [    14, 17    ]
  'cl14.36':        [    14, 17, 20]
  'cl14.39':        [    14, 17, 20]
  'oneapi2023.2.0': [11, 14, 17    ]
lookup_cudacxx_supported_stds:
  'nvcc11.1':       [11, 14, 17    ]
  'nvcc11.8':       [11, 14, 17    ]
  'nvcc12.0':       [11, 14, 17, 20]
  'nvcc12.4':       [11, 14, 17, 20]
  'llvm16':         [11, 14, 17, 20]
lookup_project_supported_stds:
  'cccl':           [11, 14, 17, 20]
  'libcudacxx':     [11, 14, 17, 20]
  'cub':            [11, 14, 17, 20]
  'thrust':         [11, 14, 17, 20]
  'cudax':          [        17, 20]

# Tags that aren't exploded:
non_exploded_tags:
  - 'jobs' # Keeping jobs as a list allows for dependency handling of build->test steps.

# Jobs that have an implied prerequisite 'build' job:
build_required_jobs:
  - 'test'
  - 'test_gpu'
  - 'test_cpu'
  - 'test_nolid'
  - 'test_lid0'
  - 'test_lid1'
  - 'test_lid2'

# Jobs that require a GPU
gpu_required_jobs:
  - 'test'
  - 'test_gpu'
  - 'test_nolid'
  - 'test_lid0'
  - 'test_lid1'
  - 'test_lid2'
  - 'nvrtc'
  - 'infra' # cccl infra's example project test launches a kernel

# When --skip-tests is given to compute-matrix.py, these jobs are ignored.
skip_test_jobs:
  - 'test'
  - 'test_cpu'
  - 'test_gpu'
  - 'test_nolid'
  - 'test_lid0'
  - 'test_lid1'
  - 'test_lid2'
  - 'nvrtc'
  - 'infra'

# Map the job type to the script invocation spec:
# The script is invoked as `ci/<spec[prefix]>_<project>.sh <spec[args]>`.
# 'prefix' is required. 'args' is optional.
# If a job is not specified explicitly, the default is { 'prefix': '<job>' }.
job_invoke:
  'test_cpu'   : { 'prefix': 'test', 'args': '-cpu-only' }
  'test_gpu'   : { 'prefix': 'test', 'args': '-gpu-only' }
  'test_nolid' : { 'prefix': 'test', 'args': '-no-lid' }
  'test_lid0'  : { 'prefix': 'test', 'args': '-lid0' }
  'test_lid1'  : { 'prefix': 'test', 'args': '-lid1' }
  'test_lid2'  : { 'prefix': 'test', 'args': '-lid2' }

# When a listed project has a `test` job, it will be replaced with the specified list of finer-grain jobs.
project_expanded_tests:
  'thrust' : ['test_gpu', 'test_cpu']
  'cub'    : ['test_nolid', 'test_lid0', 'test_lid1', 'test_lid2']

# Human readable name for jobs. Default behavior is to capitalize the first letter.
formatted_jobs:
  'nvrtc':          'NVRTC'
  'verify_codegen': 'VerifyCodegen'
  'test_cpu':       'TestCPU'
  'test_gpu':       'TestGPU'
  'test_nolid':     'TestGPU'
  'test_lid0':      'HostLaunch'
  'test_lid1':      'DeviceLaunch'
  'test_lid2':      'GraphCapture'

# Human readable name for projects. Default behavior uses the project name as-is.
formatted_project_names:
  'libcudacxx': 'libcu++'
  'cub':        'CUB'
  'thrust':     'Thrust'
  'cccl':       'CCCL'

# Human readable name for compilers. Default behavior uses the "compiler.name" tag as-is.
formatted_cxx_names:
  'llvm':   'clang'
  'oneapi': 'Intel'
  'cl':     'MSVC'

# All known GPUs
gpus:
  - 'v100'     # 40 runners
  - 't4'       #  8 runners
  - 'rtx2080'  #  8 runners
  - 'rtxa6000' # 12 runners
  - 'l4'       # 48 runners
  - 'rtx4090'  # 10 runners
  - 'h100'     # 16 runners

# SM versions of GPUs
gpu_sm:
  'v100':     '70'
  't4':       '75'
  'rtx2080':  '75'
  'rtxa6000': '86'
  'l4':       '89'
  'rtx4090':  '89'
  'h100':     '90'

# Memory size of GPUs
gpu_mem_gb:
  'v100':     '32'
  't4':       '16'
  'rtx2080':  '8'
  'rtxa6000': '48'
  'l4':       '24'
  'rtx4090':  '24'
  'h100':     '80'

# GPUs that require `-testing` at the end of the runner pool name.
testing_pool_gpus:
  - 't4'
  - 'rtx2080'
  - 'rtxa6000'
  - 'l4'
  - 'rtx4090'
